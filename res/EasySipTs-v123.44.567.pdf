%PDF-1.4
%‚„œ”
1 0 obj 
<</Type /Catalog /Version /1.4 /Pages 2 0 R /Names 5 0 R >>
endobj
2 0 obj 
<</Type /Pages /Kids [6 0 R 9 0 R 12 0 R 15 0 R 18 0 R 21 0 R 24 0 R 27 0 R 30 0 R 33 0 R 36 0 R 39 0 R 42 0 R 45 0 R 48 0 R 51 0 R 54 0 R 57 0 R 60 0 R 
63 0 R 66 0 R 69 0 R 72 0 R 75 0 R 78 0 R 81 0 R 84 0 R 87 0 R 90 0 R 93 0 R 96 0 R 99 0 R 102 0 R 105 0 R 108 0 R 111 0 R 114 0 R 
117 0 R 120 0 R 123 0 R 126 0 R 129 0 R 132 0 R 135 0 R 138 0 R 141 0 R 144 0 R 147 0 R 150 0 R 153 0 R 156 0 R 159 0 R 162 0 R 165 0 R 
168 0 R 171 0 R 174 0 R 177 0 R 180 0 R 183 0 R 186 0 R 189 0 R 192 0 R 195 0 R 198 0 R 201 0 R 204 0 R 207 0 R 210 0 R 213 0 R 216 0 R 
219 0 R 222 0 R 225 0 R 228 0 R 231 0 R 234 0 R 237 0 R 240 0 R 243 0 R 246 0 R 249 0 R 252 0 R 255 0 R 258 0 R 261 0 R 264 0 R 267 0 R 
270 0 R 273 0 R 276 0 R 279 0 R 282 0 R 285 0 R 288 0 R 291 0 R 294 0 R 297 0 R 300 0 R 303 0 R 306 0 R 309 0 R 312 0 R 315 0 R 318 0 R 
321 0 R 324 0 R 327 0 R 330 0 R 333 0 R 336 0 R 339 0 R 342 0 R 345 0 R 348 0 R 351 0 R 354 0 R 357 0 R 360 0 R 363 0 R 366 0 R 369 0 R 
372 0 R 375 0 R 378 0 R 381 0 R 384 0 R 387 0 R 390 0 R 393 0 R 396 0 R 399 0 R 402 0 R 405 0 R 408 0 R 411 0 R 414 0 R 417 0 R 420 0 R 
423 0 R 426 0 R 429 0 R 432 0 R 435 0 R 438 0 R 441 0 R 444 0 R 447 0 R 450 0 R 453 0 R 456 0 R 459 0 R 462 0 R 465 0 R 468 0 R 471 0 R 
474 0 R 477 0 R 480 0 R 483 0 R 486 0 R 489 0 R 492 0 R 495 0 R 498 0 R 501 0 R 504 0 R 507 0 R 510 0 R 513 0 R 516 0 R 519 0 R 522 0 R 
525 0 R 528 0 R ] 
/Count 175 >>
endobj
3 0 obj 
[]
endobj
4 0 obj 
<</Names 3 0 R >>
endobj
5 0 obj 
<</Dests 4 0 R >>
endobj
6 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [7 0 R ] /Parent 2 0 R >>
endobj
7 0 obj 
<</Length 1813 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/buffer.h) Tj
ET
BT
565 822 Td
(1) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/parameter.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "utils.h"\n) Tj
ET
BT
15 692 Td
(#include "except.h"\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(namespace EasySip\n) Tj
ET
BT
15 659 Td
({\n) Tj
ET
BT
15 648 Td
(    class Buffer\n) Tj
ET
BT
15 637 Td
(    {\n) Tj
ET
BT
15 626 Td
(    protected:\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        char *data_;\n) Tj
ET
BT
15 593 Td
(        size_t len_;\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    public:\n) Tj
ET
BT
15 560 Td
(        Buffer\(size_t len\) : len_\(len\)\n) Tj
ET
BT
15 549 Td
(        {\n) Tj
ET
BT
15 538 Td
(            data_ = new char[len_];\n) Tj
ET
BT
15 527 Td
(            memset\(data_, 0, len_\);\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        ~Buffer\(\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            len_ = 0;\n) Tj
ET
BT
15 461 Td
(            if \(data_\) delete data_;\n) Tj
ET
BT
15 450 Td
(            data_ = 0;\n) Tj
ET
BT
15 439 Td
(        }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        char* data\(\)\n) Tj
ET
BT
15 406 Td
(        {\n) Tj
ET
BT
15 395 Td
(            return data_;\n) Tj
ET
BT
15 384 Td
(        }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        size_t len\(\)\n) Tj
ET
BT
15 351 Td
(        {\n) Tj
ET
BT
15 340 Td
(            return len_;\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(    };\n) Tj
ET
BT
15 307 Td
(} // namespace EasiSip\n) Tj
ET

endstream
endobj
8 0 obj 
<</Type /Font /Encoding /WinAnsiEncoding /Subtype /Type1 /BaseFont /Helvetica >>
endobj
9 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [10 0 R ] /Parent 2 0 R >>
endobj
10 0 obj 
<</Length 3885 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/timer.h) Tj
ET
BT
565 822 Td
(2) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/timer.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include <sys/time.h>\n) Tj
ET
BT
15 692 Td
(#include <signal.h>\n) Tj
ET
BT
15 681 Td
(#include "thread.h"\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(namespace EasySip\n) Tj
ET
BT
15 648 Td
({\n) Tj
ET
BT
15 637 Td
(    /*\n) Tj
ET
BT
15 626 Td
(     * void timeradd\(struct timeval *a, struct timeval *b, struct timeval *res\);\n) Tj
ET
BT
15 615 Td
(     * void timersub\(struct timeval *a, struct timeval *b, struct timeval *res\);\n) Tj
ET
BT
15 604 Td
(     * void timerclear\(struct timeval *tvp\);\n) Tj
ET
BT
15 593 Td
(     * int timerisset\(struct timeval *tvp\);\n) Tj
ET
BT
15 582 Td
(     * int timercmp\(struct timeval *a, struct timeval *b, CMP\);\n) Tj
ET
BT
15 571 Td
(     */\n) Tj
ET
BT
15 560 Td
(    extern bool operator== \(struct itimerval &a, struct itimerval &b\);\n) Tj
ET
BT
15 549 Td
(    extern bool operator!= \(struct itimerval &a, struct itimerval &b\);\n) Tj
ET
BT
15 538 Td
(    extern std::ostream& operator<< \(std::ostream &o, struct timeval &a\);\n) Tj
ET
BT
15 527 Td
(    extern std::ostream& operator<< \(std::ostream &o, struct itimerval &a\);\n) Tj
ET
BT
15 516 Td
(    extern std::ostream& operator<< \(std::ostream &o, struct timespec &a\);\n) Tj
ET
BT
15 505 Td
(    extern std::ostream& operator<< \(std::ostream &o, struct itimerspec &a\);\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(    class Time\n) Tj
ET
BT
15 472 Td
(    {\n) Tj
ET
BT
15 461 Td
(        time_t time_;\n) Tj
ET
BT
15 450 Td
(    public:\n) Tj
ET
BT
15 439 Td
(        static std::string now\(\);\n) Tj
ET
BT
15 428 Td
(    };\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(//    void sigalrm_cb\(int signo\)\n) Tj
ET
BT
15 395 Td
(//    {\n) Tj
ET
BT
15 384 Td
(//        std::cout << "------------time's up-----------------\\n";\n) Tj
ET
BT
15 373 Td
(//        std::cout << "signo: " << signo << "\\n";//" settimer: " << setitimer\(ITIMER_REAL, 0, &it_a\) << '\\n';\n) Tj
ET
BT
15 362 Td
(//        struct itimerval cur;\n) Tj
ET
BT
15 351 Td
(//\n) Tj
ET
BT
15 340 Td
(//        if \(0 <= getitimer\(ITIMER_REAL, &cur\)\)\n) Tj
ET
BT
15 329 Td
(//                std::cout << cur << '\\n';\n) Tj
ET
BT
15 318 Td
(//\n) Tj
ET
BT
15 307 Td
(////        timerclear\(&cur.it_value\);\n) Tj
ET
BT
15 296 Td
(////        timerclear\(&cur.it_interval\);\n) Tj
ET
BT
15 285 Td
(////        std::cout << cur << '\\n';\n) Tj
ET
BT
15 274 Td
(//\n) Tj
ET
BT
15 263 Td
(//        std::cout << "++++++++++++time's up+++++++++++++++++\\n";\n) Tj
ET
BT
15 252 Td
(//    }\n) Tj
ET
BT
15 241 Td
(//\n) Tj
ET
BT
15 230 Td
(//    void sigev_notify_cb\(union sigval sigev_value\)\n) Tj
ET
BT
15 219 Td
(//    {\n) Tj
ET
BT
15 208 Td
(//        std::cout << "------------time's up-----------------\\n";\n) Tj
ET
BT
15 197 Td
(//        std::cout << "sigval.sival_int: [" << sigev_value.sival_int << "]\\n";\n) Tj
ET
BT
15 186 Td
(////        std::cout << "timer id: [" << *\(time_t*\)data << "]\\n";\n) Tj
ET
BT
15 175 Td
(//        std::cout << "++++++++++++time's up+++++++++++++++++\\n";\n) Tj
ET
BT
15 164 Td
(//    }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(    class Timer\n) Tj
ET
BT
15 131 Td
(    {\n) Tj
ET
BT
15 120 Td
(        unsigned long value_; // in  ms\n) Tj
ET
BT
15 109 Td
(        struct itimerval itv_;\n) Tj
ET
BT
15 98 Td
(    \n) Tj
ET
BT
15 87 Td
(    public:\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        typedef Timer Base;\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        Timer\(unsigned long value\)//unsigned long value /* ms */\)\n) Tj
ET

endstream
endobj
12 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [13 0 R ] /Parent 2 0 R >>
endobj
13 0 obj 
<</Length 3715 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/timer.h) Tj
ET
BT
565 822 Td
(3) Tj
ET
BT
15 780 Td
(        :value_\(value\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(//            signal\(SIGALRM, sigalrm_cb\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(            time_t sec = value_/1000;\n) Tj
ET
BT
15 725 Td
(            suseconds_t usec = \(value_ % 1000\) * 1000;\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(               itimev\(sec, usec\); \n) Tj
ET
BT
15 692 Td
(        }\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(        Timer\(time_t sec, suseconds_t usec = 0\)\n) Tj
ET
BT
15 659 Td
(        :value_\(sec*1000 + usec/1000\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(//            signal\(SIGALRM, sigalrm_cb\);\n) Tj
ET
BT
15 626 Td
(//            signal\(SIGVTALRM, sigalrm_cb\);\n) Tj
ET
BT
15 615 Td
(//            signal\(SIGPROF, sigalrm_cb\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(               itimev\(sec, usec\); \n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(   \n) Tj
ET
BT
15 560 Td
(           Timer& itimev\(time_t sec, suseconds_t usec = 0\)\n) Tj
ET
BT
15 549 Td
(        {\n) Tj
ET
BT
15 538 Td
(            itv_.it_interval.tv_sec = sec;\n) Tj
ET
BT
15 527 Td
(            itv_.it_interval.tv_usec = usec;\n) Tj
ET
BT
15 516 Td
(            itv_.it_value.tv_sec = sec;\n) Tj
ET
BT
15 505 Td
(            itv_.it_value.tv_usec = usec;\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(            return *this;\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        Timer\(std::string value\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(            value_ = time_string_to_ulong\(value\);\n) Tj
ET
BT
15 417 Td
(            time_t sec = value_/1000;\n) Tj
ET
BT
15 406 Td
(            suseconds_t usec = \(value_ % 1000\) * 1000;\n) Tj
ET
BT
15 395 Td
(               itimev\(sec, usec\); \n) Tj
ET
BT
15 384 Td
(        }\n) Tj
ET
BT
15 373 Td
(    \n) Tj
ET
BT
15 362 Td
(        ~Timer\(\)\n) Tj
ET
BT
15 351 Td
(        {\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(    \n) Tj
ET
BT
15 318 Td
(        void value\(std::string value\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            value_ = time_string_to_ulong\(value\);\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(    \n) Tj
ET
BT
15 263 Td
(//        std::string value\(\)\n) Tj
ET
BT
15 252 Td
(//        {\n) Tj
ET
BT
15 241 Td
(//            return timer_ulong_to_string\(value_\);\n) Tj
ET
BT
15 230 Td
(//        }\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        unsigned long value\(\)\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(            return value_;\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        void value\(unsigned long value\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            value_ = value;\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(//        ITIMER_REAL    decrements in real time, and delivers SIGALRM upon expiration.\n) Tj
ET
BT
15 87 Td
(//        ITIMER_VIRTUAL decrements only when the process is executing, and delivers SIGVTALRM upon expiration.\n) Tj
ET
BT
15 76 Td
(//        ITIMER_PROF    decrements both when the process executes and when the system is executing on behalf of\n) Tj
ET
BT
15 65 Td
(//                        the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the\n) Tj
ET
BT
15 54 Td
(//                        time spent by the application in user and kernel space.  SIGPROF is delivered upon expiration.\n) Tj
ET
BT
15 43 Td
(//\n) Tj
ET

endstream
endobj
15 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [16 0 R ] /Parent 2 0 R >>
endobj
16 0 obj 
<</Length 4639 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/timer.h) Tj
ET
BT
565 822 Td
(4) Tj
ET
BT
15 780 Td
(//       CLOCK_REALTIME\n) Tj
ET
BT
15 769 Td
(//              A settable system-wide real-time clock.\n) Tj
ET
BT
15 758 Td
(//       CLOCK_MONOTONIC\n) Tj
ET
BT
15 747 Td
(//              A nonsettable monotonically increasing clock that measures time from some unspecified point in the past\n) Tj
ET
BT
15 736 Td
(//              that does not change after system startup.\n) Tj
ET
BT
15 725 Td
(//       CLOCK_PROCESS_CPUTIME_ID \(since Linux 2.6.12\)\n) Tj
ET
BT
15 714 Td
(//              A clock that measures \(user and system\) CPU time consumed by \(all of the threads in\) the calling process.\n) Tj
ET
BT
15 703 Td
(//       CLOCK_THREAD_CPUTIME_ID \(since Linux 2.6.12\)\n) Tj
ET
BT
15 692 Td
(//              A clock that measures \(user and system\) CPU time consumed by the calling thread.\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(//       int timer_create\(clockid_t clockid, struct sigevent *sevp, timer_t *timerid\);\n) Tj
ET
BT
15 659 Td
(//       int timer_settime\(timer_t timerid, int flags, const struct itimerspec *new_value, struct itimerspec * old_value\);\n) Tj
ET
BT
15 648 Td
(//       int timer_gettime\(timer_t timerid, struct itimerspec *curr_value\);\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(        virtual void start\(\)\n) Tj
ET
BT
15 615 Td
(        {\n) Tj
ET
BT
15 604 Td
(//--------------------------------------------------------------------------------------\n) Tj
ET
BT
15 593 Td
(            int t_id = ITIMER_REAL;//VIRTUAL;\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(            std::cout << "settimer: " << setitimer\(t_id, &itv_, 0\) << '\\n';\n) Tj
ET
BT
15 560 Td
(            struct itimerval cur;\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(            getitimer\(t_id, &cur\);\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(            std::cout << itv_ << "|" << cur << '\\n';\n) Tj
ET
BT
15 505 Td
(//--------------------------------------------------------------------------------------\n) Tj
ET
BT
15 494 Td
(//            int ret;\n) Tj
ET
BT
15 483 Td
(//            timer_t tm_id;\n) Tj
ET
BT
15 472 Td
(//\n) Tj
ET
BT
15 461 Td
(//            struct sigevent sevp;\n) Tj
ET
BT
15 450 Td
(//            sevp.sigev_notify = SIGEV_THREAD;\n) Tj
ET
BT
15 439 Td
(//            sevp.sigev_notify_function = sigev_notify_cb;\n) Tj
ET
BT
15 428 Td
(//            sevp.sigev_value.sival_ptr = &tm_id;\n) Tj
ET
BT
15 417 Td
(//\n) Tj
ET
BT
15 406 Td
(//            if \(0 > \(ret = timer_create\(CLOCK_REALTIME, &sevp, &tm_id\)\)\)\n) Tj
ET
BT
15 395 Td
(//                std::cout << "timer_create: " << ret << ' ' << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 384 Td
(//\n) Tj
ET
BT
15 373 Td
(//           std::cout << "tm_id: [" << tm_id << "]\\n";\n) Tj
ET
BT
15 362 Td
(//\n) Tj
ET
BT
15 351 Td
(//           struct itimerspec itspec;\n) Tj
ET
BT
15 340 Td
(//\n) Tj
ET
BT
15 329 Td
(//           itspec.it_value.tv_sec = 3;\n) Tj
ET
BT
15 318 Td
(//           itspec.it_value.tv_nsec = 0;\n) Tj
ET
BT
15 307 Td
(//           itspec.it_interval.tv_sec = 3;\n) Tj
ET
BT
15 296 Td
(//           itspec.it_interval.tv_nsec = 0;\n) Tj
ET
BT
15 285 Td
(//\n) Tj
ET
BT
15 274 Td
(//           if \(0 > \(ret = timer_settime\(tm_id, 0, &itspec, 0\)\)\)\n) Tj
ET
BT
15 263 Td
(//              std::cout << "timer_settime: " << ret << ' ' << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 252 Td
(//\n) Tj
ET
BT
15 241 Td
(//           std::cout << "itspec: [" << itspec << "]\\n";\n) Tj
ET
BT
15 230 Td
(//\n) Tj
ET
BT
15 219 Td
(//           struct itimerspec itscur;\n) Tj
ET
BT
15 208 Td
(//\n) Tj
ET
BT
15 197 Td
(//           if \(0 > \(ret = timer_gettime\(tm_id, &itscur\)\)\)\n) Tj
ET
BT
15 186 Td
(//              std::cout << "timer_gettime: " << ret << ' ' << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 175 Td
(//            \n) Tj
ET
BT
15 164 Td
(//           std::cout << "itscur: [" << itscur << "]\\n";\n) Tj
ET
BT
15 153 Td
(//--------------------------------------------------------------------------------------\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(    \n) Tj
ET
BT
15 120 Td
(        static unsigned long time_string_to_ulong\(std::string value\)\n) Tj
ET
BT
15 109 Td
(        {\n) Tj
ET
BT
15 98 Td
(            // TODO: string value -> long value\n) Tj
ET
BT
15 87 Td
(            return 0;\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(    \n) Tj
ET
BT
15 54 Td
(        static unsigned long time_ulong_to_string\(unsigned long value\)\n) Tj
ET
BT
15 43 Td
(        {\n) Tj
ET

endstream
endobj
18 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [19 0 R ] /Parent 2 0 R >>
endobj
19 0 obj 
<</Length 2805 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/timer.h) Tj
ET
BT
565 822 Td
(5) Tj
ET
BT
15 780 Td
(            // TODO: string value <- long value\n) Tj
ET
BT
15 769 Td
(            return 0;\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(    \n) Tj
ET
BT
15 736 Td
(        unsigned long operator* \(unsigned long val\)\n) Tj
ET
BT
15 725 Td
(        {\n) Tj
ET
BT
15 714 Td
(            return \(value_*val\);\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(    };\n) Tj
ET
BT
15 681 Td
(   \n) Tj
ET
BT
15 670 Td
(    // built-in timers\n) Tj
ET
BT
15 659 Td
(    class T1 : public Timer\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(    public:\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(        T1\(\) : Timer\("500"\)//ms"\)\n) Tj
ET
BT
15 604 Td
(        {\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(    };\n) Tj
ET
BT
15 571 Td
(    \n) Tj
ET
BT
15 560 Td
(    class T2 : public Timer\n) Tj
ET
BT
15 549 Td
(    {\n) Tj
ET
BT
15 538 Td
(    public:\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        T2\(\) : Timer\("4000"\)\n) Tj
ET
BT
15 505 Td
(        {\n) Tj
ET
BT
15 494 Td
(        }\n) Tj
ET
BT
15 483 Td
(    };\n) Tj
ET
BT
15 472 Td
(    \n) Tj
ET
BT
15 461 Td
(    class T4 : public Timer\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(    public:\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        T4\(\) : Timer\("5000"\)\n) Tj
ET
BT
15 406 Td
(        {\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(    };\n) Tj
ET
BT
15 373 Td
(    \n) Tj
ET
BT
15 362 Td
(    // INVITE_RETRAN_INTERVAL\n) Tj
ET
BT
15 351 Td
(    class TA : public Timer\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(    public:\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        TA\(\) : Timer\(T1\(\).value\(\)\)//ms"\) // TODO: T1 initial value\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(    };\n) Tj
ET
BT
15 263 Td
(    \n) Tj
ET
BT
15 252 Td
(    class TB : public Timer\n) Tj
ET
BT
15 241 Td
(    {\n) Tj
ET
BT
15 230 Td
(    public:\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        TB\(\) : Timer\(T1\(\)*64\) // TODO: T1*64\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(        }\n) Tj
ET
BT
15 175 Td
(    };\n) Tj
ET
BT
15 164 Td
(    \n) Tj
ET
BT
15 153 Td
(    class TC : public Timer // 4min\n) Tj
ET
BT
15 142 Td
(    {\n) Tj
ET
BT
15 131 Td
(    public:\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        TC\(\) : Timer\(\(unsigned long\)4*60*1000\) // TODO: > 3min\n) Tj
ET
BT
15 98 Td
(        {\n) Tj
ET
BT
15 87 Td
(        }\n) Tj
ET
BT
15 76 Td
(    \n) Tj
ET
BT
15 65 Td
(        void value\(std::string value\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(            // TODO: check >3min\n) Tj
ET

endstream
endobj
21 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [22 0 R ] /Parent 2 0 R >>
endobj
22 0 obj 
<</Length 2724 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/timer.h) Tj
ET
BT
565 822 Td
(6) Tj
ET
BT
15 780 Td
(            Base::value\(value\);\n) Tj
ET
BT
15 769 Td
(        }\n) Tj
ET
BT
15 758 Td
(    };\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(    class TD : public Timer\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(    public:\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        TD\(\) : Timer\("33000"\) // TODO: UDP: >32s, TCP/SCTP =0s\n) Tj
ET
BT
15 681 Td
(        {\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(    };\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    class TE : public Timer\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(    public:\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        TE\(\) : Timer\("500"\) // TODO: T1 initial value\n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(    };\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    class TF : public Timer\n) Tj
ET
BT
15 527 Td
(    {\n) Tj
ET
BT
15 516 Td
(    public:\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        TF\(\) : Timer\(T1\(\)*64\) // TODO: T1*64\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(    };\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    class TG : public Timer\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(    public:\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        TG\(\) : Timer\("500ms"\) // TODO: T1 initial value\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(    };\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(    class TH : public Timer\n) Tj
ET
BT
15 329 Td
(    {\n) Tj
ET
BT
15 318 Td
(    public:\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        TH\(\) : Timer\(T1\(\)*64\) // TODO: T1*64\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(    };\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(    class TI : public Timer\n) Tj
ET
BT
15 230 Td
(    {\n) Tj
ET
BT
15 219 Td
(    public:\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        TI\(\) : Timer\(T4\(\).value\(\)\) // TODO: UDP: T4, TCP/SCTP =0s\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(    };\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(    class TJ : public Timer\n) Tj
ET
BT
15 131 Td
(    {\n) Tj
ET
BT
15 120 Td
(    public:\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        TJ\(\) : Timer\(T1\(\)*64\) // TODO: UDP: 64*T1, TCP/SCTP =0s\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(    };\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(    class TK : public Timer\n) Tj
ET

endstream
endobj
24 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [25 0 R ] /Parent 2 0 R >>
endobj
25 0 obj 
<</Length 460 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/timer.h) Tj
ET
BT
565 822 Td
(7) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(    public:\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(        TK\(\) : Timer\(T4\(\).value\(\)\) // TODO: UDP: 64*T1, TCP/SCTP =0s\n) Tj
ET
BT
15 736 Td
(        {\n) Tj
ET
BT
15 725 Td
(        }\n) Tj
ET
BT
15 714 Td
(    };\n) Tj
ET
BT
15 703 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
27 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [28 0 R ] /Parent 2 0 R >>
endobj
28 0 obj 
<</Length 3247 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(8) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/header_field.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( *\n) Tj
ET
BT
15 725 Td
( * References:\n) Tj
ET
BT
15 714 Td
( *         Session Initiation Protocol \(Sip\) Parameters, IANA\n) Tj
ET
BT
15 703 Td
( *         RFC-3261\n) Tj
ET
BT
15 692 Td
( *         RFC-6665\n) Tj
ET
BT
15 681 Td
( *        SIP, Understanding The Session Initiation Protocol, 2nd Ed, Artech House\n) Tj
ET
BT
15 670 Td
( */\n) Tj
ET
BT
15 659 Td
(#pragma once\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(#include "uri.h"\n) Tj
ET
BT
15 626 Td
(#include "response_code.h"\n) Tj
ET
BT
15 615 Td
(#include "request_message.h"\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(namespace EasySip\n) Tj
ET
BT
15 582 Td
({\n) Tj
ET
BT
15 571 Td
(    #define SIP_VERSION_1_0 "SIP/1.0"\n) Tj
ET
BT
15 560 Td
(    #define SIP_VERSION_2_0 "SIP/2.0"\n) Tj
ET
BT
15 549 Td
(    #define SIP_VERSION_2_0_UDP SIP_VERSION_2_0"/UDP"\n) Tj
ET
BT
15 538 Td
(    #define SIP_VERSION SIP_VERSION_2_0\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    #define return_false_if_true\(c\) \\\n) Tj
ET
BT
15 505 Td
(    {                                \\\n) Tj
ET
BT
15 494 Td
(        if \(\(c\)\) return false;    \\\n) Tj
ET
BT
15 483 Td
(    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    #define ONE_HOUR 60*60 // in second\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    enum\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(        HF_CALLID = 1,\n) Tj
ET
BT
15 406 Td
(        HF_CSEQ,\n) Tj
ET
BT
15 395 Td
(        HF_FROM,\n) Tj
ET
BT
15 384 Td
(        HF_TO,\n) Tj
ET
BT
15 373 Td
(        HF_VIA,\n) Tj
ET
BT
15 362 Td
(        HF_ALERT_INFO,\n) Tj
ET
BT
15 351 Td
(        HF_ALLOW_EVENTS,\n) Tj
ET
BT
15 340 Td
(        HF_DATE,\n) Tj
ET
BT
15 329 Td
(        HF_CONTACT,\n) Tj
ET
BT
15 318 Td
(        HF_ORGANIZATION,\n) Tj
ET
BT
15 307 Td
(        HF_RECORD_ROUTE,\n) Tj
ET
BT
15 296 Td
(        HF_RETRY_AFTER,\n) Tj
ET
BT
15 285 Td
(        HF_SUBJECT,\n) Tj
ET
BT
15 274 Td
(        HF_SUPPORTED,\n) Tj
ET
BT
15 263 Td
(        HF_TIMESTAMP,\n) Tj
ET
BT
15 252 Td
(        HF_USER_AGENT,\n) Tj
ET
BT
15 241 Td
(        HF_ANSWER_MODE,\n) Tj
ET
BT
15 230 Td
(        HF_PRIV_ANSWER_MODE,\n) Tj
ET
BT
15 219 Td
(        HF_ACCEPT,\n) Tj
ET
BT
15 208 Td
(        HF_ACCEPT_CONTACT,\n) Tj
ET
BT
15 197 Td
(        HF_ACCEPT_ENCODING,\n) Tj
ET
BT
15 186 Td
(        HF_ACCEPT_LANGUAGE,\n) Tj
ET
BT
15 175 Td
(        HF_AUTHORIZATION,\n) Tj
ET
BT
15 164 Td
(        HF_CALL_INFO,\n) Tj
ET
BT
15 153 Td
(        HF_EVENT,\n) Tj
ET
BT
15 142 Td
(        HF_IN_REPLY_TO,\n) Tj
ET
BT
15 131 Td
(        HF_JOIN,\n) Tj
ET
BT
15 120 Td
(        HF_PRIORITY,\n) Tj
ET
BT
15 109 Td
(        HF_PRIVACY,\n) Tj
ET
BT
15 98 Td
(        HF_PROXY_AUTHORIZATION,\n) Tj
ET
BT
15 87 Td
(        HF_PROXY_REQUIRE,\n) Tj
ET
BT
15 76 Td
(        HF_P_OSP_AUTHTOKEN,\n) Tj
ET
BT
15 65 Td
(        HF_PASSERTED_IDENTITY,\n) Tj
ET
BT
15 54 Td
(        HF_PPREFERRED_IDENTITY,\n) Tj
ET
BT
15 43 Td
(        HF_MAX_FORWARDS,\n) Tj
ET

endstream
endobj
30 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [31 0 R ] /Parent 2 0 R >>
endobj
31 0 obj 
<</Length 3160 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(9) Tj
ET
BT
15 780 Td
(        HF_REASON,\n) Tj
ET
BT
15 769 Td
(        HF_REFER_TO,\n) Tj
ET
BT
15 758 Td
(        HF_REFERRED_BY,\n) Tj
ET
BT
15 747 Td
(        HF_REPLY_TO,\n) Tj
ET
BT
15 736 Td
(        HF_REPLACES,\n) Tj
ET
BT
15 725 Td
(        HF_REJECT_CONTACT,\n) Tj
ET
BT
15 714 Td
(        HF_REQUEST_DISPOSITION,\n) Tj
ET
BT
15 703 Td
(        HF_REQUIRE,\n) Tj
ET
BT
15 692 Td
(        HF_ROUTE,\n) Tj
ET
BT
15 681 Td
(        HF_RACK,\n) Tj
ET
BT
15 670 Td
(        HF_SESSION_EXPIRES,\n) Tj
ET
BT
15 659 Td
(        HF_SUBSCRIPTION_STATE,\n) Tj
ET
BT
15 648 Td
(        HF_AUTHENTICATIONINFO,\n) Tj
ET
BT
15 637 Td
(        HF_ERROR_INFO,\n) Tj
ET
BT
15 626 Td
(        HF_MIN_EXPIRES,\n) Tj
ET
BT
15 615 Td
(        HF_MIN_SE,\n) Tj
ET
BT
15 604 Td
(        HF_PROXY_AUTHENTICATE,\n) Tj
ET
BT
15 593 Td
(        HF_SERVER,\n) Tj
ET
BT
15 582 Td
(        HF_UNSUPPORTED,\n) Tj
ET
BT
15 571 Td
(        HF_WARNING,\n) Tj
ET
BT
15 560 Td
(        HF_WWW_AUTHENTICATE,\n) Tj
ET
BT
15 549 Td
(        HF_RSEQ,\n) Tj
ET
BT
15 538 Td
(        HF_ALLOW,\n) Tj
ET
BT
15 527 Td
(        HF_CONTENT_ENCODING,\n) Tj
ET
BT
15 516 Td
(        HF_CONTENT_LENGTH,\n) Tj
ET
BT
15 505 Td
(        HF_CONTENT_DISPOSITION,\n) Tj
ET
BT
15 494 Td
(        HF_CONTENT_LANGUAGE,\n) Tj
ET
BT
15 483 Td
(        HF_CONTENT_TYPE,\n) Tj
ET
BT
15 472 Td
(        HF_EXPIRES,\n) Tj
ET
BT
15 461 Td
(        HF_MIME_VERSION,\n) Tj
ET
BT
15 450 Td
(    };    \n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(    struct HeaderField\n) Tj
ET
BT
15 417 Td
(    {\n) Tj
ET
BT
15 406 Td
(        std::string field_;\n) Tj
ET
BT
15 395 Td
(        std::string compact_form_;\n) Tj
ET
BT
15 384 Td
(        std::string values_;\n) Tj
ET
BT
15 373 Td
(        Parameters header_params_;\n) Tj
ET
BT
15 362 Td
(        bool is_hop_by_hop_;\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        HeaderField\(std::string f, bool is_hbh = false\)\n) Tj
ET
BT
15 329 Td
(        : field_\(f\), is_hop_by_hop_\(is_hbh\)\n) Tj
ET
BT
15 318 Td
(        {\n) Tj
ET
BT
15 307 Td
(        }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        HeaderField\(std::string f, std::string c, bool is_hbh = false\)\n) Tj
ET
BT
15 274 Td
(        : field_\(f\), compact_form_\(c\), is_hop_by_hop_\(is_hbh\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(        }\n) Tj
ET
BT
15 241 Td
(    \n) Tj
ET
BT
15 230 Td
(        HeaderField\(\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        ~HeaderField\(\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(        }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        std::string Compact\(\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(            return compact_form_;\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        std::string Field\(\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            return field_;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
33 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [34 0 R ] /Parent 2 0 R >>
endobj
34 0 obj 
<</Length 3461 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(10) Tj
ET
BT
15 780 Td
(        bool is_value_valid\(\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            return true;\n) Tj
ET
BT
15 747 Td
(        }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(        virtual void generate_values\(\) = 0;\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(        virtual int parse\(std::string &msg, size_t &pos\) = 0;\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        std::string Values\(\)\n) Tj
ET
BT
15 670 Td
(        {\n) Tj
ET
BT
15 659 Td
(            return values_;\n) Tj
ET
BT
15 648 Td
(        }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(        HeaderField& HeaderParam\(std::string n, std::string v\)\n) Tj
ET
BT
15 615 Td
(        {\n) Tj
ET
BT
15 604 Td
(            header_params_.set_value_by_name\(n, v\);\n) Tj
ET
BT
15 593 Td
(            return *this;\n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        friend std::ostream& operator<< \(std::ostream& o, HeaderField& hf\);\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        std::string operator\(\) \(\);\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        void remove_tail_symbol\(char sym\)\n) Tj
ET
BT
15 505 Td
(        {\n) Tj
ET
BT
15 494 Td
(            if \(values_.size\(\) && values_.at\(values_.size\(\)-1\) == sym\)\n) Tj
ET
BT
15 483 Td
(                values_.erase\(values_.size\(\)-1\);\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(    };\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    struct HFBase_1_ : public HeaderField\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(        ContactList cons_;\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        HFBase_1_\(std::string f, bool is_hbh = false\) : HeaderField\(f, is_hbh\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        HFBase_1_\(std::string f, std::string c, bool is_hbh = false\) : HeaderField\(f, c, is_hbh\)\n) Tj
ET
BT
15 340 Td
(        {\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        virtual void generate_values\(\);\n) Tj
ET
BT
15 296 Td
(        virtual int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        virtual HFBase_1_& add_value\(std::string\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            return *this;\n) Tj
ET
BT
15 241 Td
(        }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        HFBase_1_& add_param\(std::string key, std::string value = ""\)\n) Tj
ET
BT
15 208 Td
(        {\n) Tj
ET
BT
15 197 Td
(            if \(!cons_.empty\(\)\)\n) Tj
ET
BT
15 186 Td
(                cons_.last\(\)->add_param\(key, value\);\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(            return *this;\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        HFBase_1_& add_uri\(std::string uri\)\n) Tj
ET
BT
15 120 Td
(        {\n) Tj
ET
BT
15 109 Td
(            if \(cons_.empty\(\) || cons_.last\(\)->full\(\) || !cons_.last\(\)->uri\(\).empty\(\)\)\n) Tj
ET
BT
15 98 Td
(            {\n) Tj
ET
BT
15 87 Td
(                cons_.append_item\(\);\n) Tj
ET
BT
15 76 Td
(            }\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(            if \(cons_.last\(\)->uri\(\).empty\(\)\)\n) Tj
ET
BT
15 43 Td
(            {\n) Tj
ET

endstream
endobj
36 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [37 0 R ] /Parent 2 0 R >>
endobj
37 0 obj 
<</Length 3329 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(11) Tj
ET
BT
15 780 Td
(                cons_.last\(\)->uri\(uri\);\n) Tj
ET
BT
15 769 Td
(            }\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(            return *this;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        HFBase_1_& add_name\(std::string name\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            if \(cons_.empty\(\) || cons_.last\(\)->full\(\)\)\n) Tj
ET
BT
15 681 Td
(            {\n) Tj
ET
BT
15 670 Td
(                cons_.append_item\(\);\n) Tj
ET
BT
15 659 Td
(            }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(            if \(cons_.last\(\)->name\(\).empty\(\)\)\n) Tj
ET
BT
15 626 Td
(            {\n) Tj
ET
BT
15 615 Td
(                cons_.last\(\)->name\(name\);\n) Tj
ET
BT
15 604 Td
(            }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(            return *this;\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(    };\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    struct HFBase_2_ : public HeaderField\n) Tj
ET
BT
15 527 Td
(    {\n) Tj
ET
BT
15 516 Td
(        std::string digit_value_;\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        HFBase_2_\(std::string f, bool is_hbh = false\) : HeaderField\(f, is_hbh\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        HFBase_2_\(std::string f, std::string c, bool is_hbh = false\) : HeaderField\(f, c, is_hbh\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(        }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        virtual void generate_values\(\);\n) Tj
ET
BT
15 395 Td
(        virtual int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        virtual HFBase_2_& add_value\(std::string val\)\n) Tj
ET
BT
15 362 Td
(        {\n) Tj
ET
BT
15 351 Td
(            digit_value_ = val;\n) Tj
ET
BT
15 340 Td
(            return *this;\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(    };\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(    struct HFBase_3_ : public HeaderField\n) Tj
ET
BT
15 285 Td
(    {\n) Tj
ET
BT
15 274 Td
(        std::vector<std::string> opts_;\n) Tj
ET
BT
15 263 Td
(        char sym_;\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(        HFBase_3_\(std::string f, bool is_hbh = false\) : HeaderField\(f, is_hbh\)\n) Tj
ET
BT
15 230 Td
(        {\n) Tj
ET
BT
15 219 Td
(            sym_ = ',';\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        HFBase_3_\(std::string f, std::string c, bool is_hbh = false\) : HeaderField\(f, c, is_hbh\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            sym_ = ',';\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        virtual void generate_values\(\);\n) Tj
ET
BT
15 120 Td
(        virtual int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        virtual HFBase_3_& add_value\(std::string val\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            opts_.push_back\(val\);\n) Tj
ET
BT
15 65 Td
(            return *this;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
39 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [40 0 R ] /Parent 2 0 R >>
endobj
40 0 obj 
<</Length 3493 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(12) Tj
ET
BT
15 780 Td
(        virtual HFBase_3_& add_value\(std::vector<std::string> &vals\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            std::copy\(opts_.begin\(\), vals.begin\(\), vals.end\(\)\);\n) Tj
ET
BT
15 747 Td
(            return *this;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    };\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    struct HFBase_4_ : public HeaderField\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(        PtsOf<ItemWithParams> its_;\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        HFBase_4_\(std::string f, bool is_hbh = false\) : HeaderField\(f, is_hbh\)\n) Tj
ET
BT
15 637 Td
(        {\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        HFBase_4_\(std::string f, std::string c, bool is_hbh = false\) : HeaderField\(f, c, is_hbh\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        virtual void generate_values\(\);\n) Tj
ET
BT
15 549 Td
(        virtual int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        HFBase_4_& add_value\(std::string val\)\n) Tj
ET
BT
15 516 Td
(        {\n) Tj
ET
BT
15 505 Td
(            ItemWithParams it\(val\);\n) Tj
ET
BT
15 494 Td
(            its_.append_item\(it\);\n) Tj
ET
BT
15 483 Td
(            return *this;\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        HFBase_4_& add_param\(std::string key, std::string val = ""\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(            if \(!its_.empty\(\)\)\n) Tj
ET
BT
15 417 Td
(                its_.last\(\)->add_param\(key, val\);\n) Tj
ET
BT
15 406 Td
(            return *this;\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(    };\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    struct HFBase_5_ : public HeaderField\n) Tj
ET
BT
15 351 Td
(    {\n) Tj
ET
BT
15 340 Td
(        std::string challenge_;\n) Tj
ET
BT
15 329 Td
(        Parameters digest_cln_;\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        HFBase_5_\(std::string f, bool is_hbh = false\) : HeaderField\(f, is_hbh\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(            digest_cln_.Sym\(","\);\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        HFBase_5_\(std::string f, std::string c, bool is_hbh = false\) : HeaderField\(f, c, is_hbh\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            digest_cln_.Sym\(","\);\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        virtual void generate_values\(\);\n) Tj
ET
BT
15 186 Td
(        virtual int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(        HFBase_5_& add_value\(std::string val\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(            challenge_ = val;\n) Tj
ET
BT
15 131 Td
(            return *this;\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        HFBase_5_& add_param\(std::string key, std::string val = ""\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            digest_cln_.append\(key, val\);\n) Tj
ET
BT
15 65 Td
(            return *this;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(    };\n) Tj
ET

endstream
endobj
42 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [43 0 R ] /Parent 2 0 R >>
endobj
43 0 obj 
<</Length 3175 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(13) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(    // ---------- Mandatory fields ---------------\n) Tj
ET
BT
15 758 Td
(    /* Call-ID: 19283kjhj5h\n) Tj
ET
BT
15 747 Td
(     */\n) Tj
ET
BT
15 736 Td
(    struct HFCallId : public HFBase_3_\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(        HFCallId\(\) : HFBase_3_\("Call-ID", "i"\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        bool operator== \(HFCallId& val\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            return \(id\(\) == val.id\(\)\);\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        HFCallId& id\(std::string val\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            if \(opts_.empty\(\)\)\n) Tj
ET
BT
15 571 Td
(                HFBase_3_::add_value\(val\);\n) Tj
ET
BT
15 560 Td
(            else\n) Tj
ET
BT
15 549 Td
(                opts_.at\(0\) = val;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(            return *this;\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        std::string id\(\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            if \(opts_.size\(\)\)\n) Tj
ET
BT
15 461 Td
(                return opts_.at\(0\);\n) Tj
ET
BT
15 450 Td
(            return std::string\(\);\n) Tj
ET
BT
15 439 Td
(        }\n) Tj
ET
BT
15 428 Td
(    };\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(    /* CSeq: 35246 INVITE \n) Tj
ET
BT
15 395 Td
(     */\n) Tj
ET
BT
15 384 Td
(    struct HFCSeq : public HFBase_3_\n) Tj
ET
BT
15 373 Td
(    {\n) Tj
ET
BT
15 362 Td
(        HFCSeq\(\) : HFBase_3_\("CSeq"\)\n) Tj
ET
BT
15 351 Td
(        {\n) Tj
ET
BT
15 340 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        HFCSeq& cseq\(std::string val\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(            if \(opts_.empty\(\)\)\n) Tj
ET
BT
15 274 Td
(                HFBase_3_::add_value\(val\);\n) Tj
ET
BT
15 263 Td
(            else\n) Tj
ET
BT
15 252 Td
(                opts_.at\(0\) = val;\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(            return *this;\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        HFCSeq& method\(std::string val\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(            if \(2 > opts_.size\(\)\)\n) Tj
ET
BT
15 164 Td
(                HFBase_3_::add_value\(val\);\n) Tj
ET
BT
15 153 Td
(            else\n) Tj
ET
BT
15 142 Td
(                opts_.at\(1\) = val;\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(            return *this;\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        std::string cseq\(\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            if \(opts_.size\(\)\)\n) Tj
ET
BT
15 54 Td
(                return opts_.at\(0\);\n) Tj
ET
BT
15 43 Td
(            return std::string\(\);\n) Tj
ET

endstream
endobj
45 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [46 0 R ] /Parent 2 0 R >>
endobj
46 0 obj 
<</Length 3124 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(14) Tj
ET
BT
15 780 Td
(        }\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(        std::string method\(\)\n) Tj
ET
BT
15 747 Td
(        {\n) Tj
ET
BT
15 736 Td
(            if \(1 < opts_.size\(\)\)\n) Tj
ET
BT
15 725 Td
(                return opts_.at\(1\);\n) Tj
ET
BT
15 714 Td
(            return std::string\(\);\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        void inc_seq\(\)\n) Tj
ET
BT
15 670 Td
(        {\n) Tj
ET
BT
15 659 Td
(            unsigned int seq;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(            std::istringstream i\(cseq\(\)\);\n) Tj
ET
BT
15 626 Td
(            i >> seq;\n) Tj
ET
BT
15 615 Td
(            seq++;\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(            std::ostringstream o;\n) Tj
ET
BT
15 582 Td
(            o << seq;\n) Tj
ET
BT
15 571 Td
(            cseq\(o.str\(\)\);\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(    };\n) Tj
ET
BT
15 538 Td
(    \n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    /* From: Alice <sip:alice@atlanta.com>;tag=87263237\n) Tj
ET
BT
15 505 Td
(     */\n) Tj
ET
BT
15 494 Td
(    struct HFFrom : public HFBase_1_\n) Tj
ET
BT
15 483 Td
(    {\n) Tj
ET
BT
15 472 Td
(        HFFrom\(\) : HFBase_1_\("From", "f"\)\n) Tj
ET
BT
15 461 Td
(        {\n) Tj
ET
BT
15 450 Td
(        }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        std::string name\(\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            if \(cons_.empty\(\)\)\n) Tj
ET
BT
15 395 Td
(                return std::string\(\);\n) Tj
ET
BT
15 384 Td
(            return cons_.at\(0\)->name\(\);\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        std::string uri\(\)\n) Tj
ET
BT
15 340 Td
(        {\n) Tj
ET
BT
15 329 Td
(            if \(cons_.empty\(\)\)\n) Tj
ET
BT
15 318 Td
(                return std::string\(\);\n) Tj
ET
BT
15 307 Td
(            return cons_.at\(0\)->uri\(\);\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        std::string tag\(\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            return header_params_.get_value_by_name\("tag"\);\n) Tj
ET
BT
15 241 Td
(        }\n) Tj
ET
BT
15 230 Td
(    };\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(    /* To: Alice <sip:alice@atlanta.com>;tag=39u292sd7\n) Tj
ET
BT
15 197 Td
(     */\n) Tj
ET
BT
15 186 Td
(    struct HFTo : public HFBase_1_\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(        HFTo\(\) : HFBase_1_\("To", "t"\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        std::string name\(\)\n) Tj
ET
BT
15 109 Td
(        {\n) Tj
ET
BT
15 98 Td
(            if \(cons_.empty\(\)\)\n) Tj
ET
BT
15 87 Td
(                return std::string\(\);\n) Tj
ET
BT
15 76 Td
(            return cons_.at\(0\)->name\(\);\n) Tj
ET
BT
15 65 Td
(        }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        std::string uri\(\)\n) Tj
ET

endstream
endobj
48 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [49 0 R ] /Parent 2 0 R >>
endobj
49 0 obj 
<</Length 3490 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(15) Tj
ET
BT
15 780 Td
(        {\n) Tj
ET
BT
15 769 Td
(            if \(cons_.empty\(\)\)\n) Tj
ET
BT
15 758 Td
(                return std::string\(\);\n) Tj
ET
BT
15 747 Td
(            return cons_.at\(0\)->uri\(\);\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        std::string tag\(\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            return header_params_.get_value_by_name\("tag"\);\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(    };\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(    /* Via: SIP/2.0/UDP <aa.atlanta.com>;branch=38Z89sdhJ;received=192.168.0.50\n) Tj
ET
BT
15 637 Td
(     * Via: SIP/2.0/UDP <cc.atlanta.com>;branch=2998H933k;received=192.168.0.43\n) Tj
ET
BT
15 626 Td
(     * Via: SIP/2.0/UDP 135.180.130.133\n) Tj
ET
BT
15 615 Td
(     * ...\n) Tj
ET
BT
15 604 Td
(     */\n) Tj
ET
BT
15 593 Td
(    struct HFVia : public HeaderField\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        std::string sent_proto_;\n) Tj
ET
BT
15 560 Td
(        std::string sent_by_;\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        HFVia\(\);\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 505 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        HFVia& add_proto\(std::string proto\)\n) Tj
ET
BT
15 472 Td
(        {\n) Tj
ET
BT
15 461 Td
(            sent_proto_ = proto;\n) Tj
ET
BT
15 450 Td
(            return *this;\n) Tj
ET
BT
15 439 Td
(        }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        HFVia& add_sentby\(std::string by\)\n) Tj
ET
BT
15 406 Td
(        {\n) Tj
ET
BT
15 395 Td
(            sent_by_ = by;\n) Tj
ET
BT
15 384 Td
(            return *this;\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(    };\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(    // ------------------ Optional fields --------------------\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(    /* Alert-Info: <http://wwww.example.com/alice/photo.jpg> ;purpose=icon,\n) Tj
ET
BT
15 307 Td
(     *        <http://www.example.com/alice/> ;purpose=info\n) Tj
ET
BT
15 296 Td
(     */\n) Tj
ET
BT
15 285 Td
(    struct HFAlertInfo : public HeaderField\n) Tj
ET
BT
15 274 Td
(    {\n) Tj
ET
BT
15 263 Td
(        HFAlertInfo\(\) : HeaderField\("Alert-Info", true\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(//            header_params_.append\("appearance"\);\n) Tj
ET
BT
15 230 Td
(//            header_params_.append\("purpose"\);\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 197 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 186 Td
(    };\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(    struct HFAllowEvents : public HeaderField\n) Tj
ET
BT
15 153 Td
(    {\n) Tj
ET
BT
15 142 Td
(        HFAllowEvents\(\) : HeaderField\("Allow-Events", "u"\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 98 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 87 Td
(    };\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    struct HFDate : public HFBase_3_ \n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(        HFDate\(\) : HFBase_3_\("Date", true\)\n) Tj
ET

endstream
endobj
51 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [52 0 R ] /Parent 2 0 R >>
endobj
52 0 obj 
<</Length 3163 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(16) Tj
ET
BT
15 780 Td
(        {\n) Tj
ET
BT
15 769 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(    };\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    /* Contact: <sip:user@example.com?Route=%3Csip:sip.example.com%3E>\n) Tj
ET
BT
15 714 Td
(     */\n) Tj
ET
BT
15 703 Td
(    struct HFContact : public HFBase_1_\n) Tj
ET
BT
15 692 Td
(    {\n) Tj
ET
BT
15 681 Td
(        HFContact\(\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        ContactList& cons\(\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            return cons_;\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(    };\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    struct HFOrganization : public HFBase_3_\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        HFOrganization\(\) : HFBase_3_\("Organization", true\)\n) Tj
ET
BT
15 560 Td
(        {\n) Tj
ET
BT
15 549 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 538 Td
(        }\n) Tj
ET
BT
15 527 Td
(    };\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    /* Record-Route: <sip:+1-650-555-2222@iftgw.there.com;\n) Tj
ET
BT
15 494 Td
(     *         maddr=ss1.wcom.com>\n) Tj
ET
BT
15 483 Td
(     * Record-Route: <sip:139.23.1.44;lr>\n) Tj
ET
BT
15 472 Td
(     */\n) Tj
ET
BT
15 461 Td
(    struct HFRecordRoute : public HFBase_1_\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(        HFRecordRoute\(\) : HFBase_1_\("Record-Route", true\)\n) Tj
ET
BT
15 428 Td
(        {\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(    };\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(    struct HFRetryAfter : public HeaderField\n) Tj
ET
BT
15 373 Td
(    {\n) Tj
ET
BT
15 362 Td
(        HFRetryAfter\(\) : HeaderField\("Retry-After"\)\n) Tj
ET
BT
15 351 Td
(        {\n) Tj
ET
BT
15 340 Td
(//            header_params_.append\("duration"\);\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 307 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 296 Td
(    };\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(    struct HFSubject : public HFBase_3_\n) Tj
ET
BT
15 263 Td
(    {\n) Tj
ET
BT
15 252 Td
(        HFSubject\(\) : HFBase_3_\("Subject", "s"\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(    };\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    struct HFSupported : public HFBase_3_\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(        HFSupported\(\) : HFBase_3_\("Supported", "k"\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 131 Td
(        }\n) Tj
ET
BT
15 120 Td
(    };\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(    struct HFTimestamp : public HeaderField\n) Tj
ET
BT
15 87 Td
(    {\n) Tj
ET
BT
15 76 Td
(        HFTimestamp\(\) : HeaderField\("Timestamp"\)\n) Tj
ET
BT
15 65 Td
(        {\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(        void generate_values\(\);\n) Tj
ET

endstream
endobj
54 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [55 0 R ] /Parent 2 0 R >>
endobj
55 0 obj 
<</Length 3439 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(17) Tj
ET
BT
15 780 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 769 Td
(    };\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(    struct HFUserAgent : public HeaderField\n) Tj
ET
BT
15 736 Td
(    {\n) Tj
ET
BT
15 725 Td
(        HFUserAgent\(\) : HeaderField\("User-Agent"\)\n) Tj
ET
BT
15 714 Td
(        {\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 681 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 670 Td
(    };\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(    struct HFAnswerMode : public HeaderField\n) Tj
ET
BT
15 637 Td
(    {\n) Tj
ET
BT
15 626 Td
(        HFAnswerMode\(\) : HeaderField\("Answer-Mode"\)\n) Tj
ET
BT
15 615 Td
(        {\n) Tj
ET
BT
15 604 Td
(//            header_params_.append\("require"\);\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 571 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 560 Td
(    };\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    struct HFPrivAnswerMode : public HeaderField\n) Tj
ET
BT
15 527 Td
(    {\n) Tj
ET
BT
15 516 Td
(        HFPrivAnswerMode\(\) : HeaderField\("Priv-Answer-Mode"\)\n) Tj
ET
BT
15 505 Td
(        {\n) Tj
ET
BT
15 494 Td
(//            header_params_.append\("require"\);\n) Tj
ET
BT
15 483 Td
(        }\n) Tj
ET
BT
15 472 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 461 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 450 Td
(    };\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(    // -------------------- Request header -----------------------------\n) Tj
ET
BT
15 417 Td
(    struct HFAccept : public HFBase_4_\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        HFAccept\(\) : HFBase_4_\("Accept"\) // type/sub-type\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(//            header_params_.append\("q"\);\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        HFAccept& add_value\(std::string val\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            if \(val.find_first_of\("/"\) == std::string::npos\)\n) Tj
ET
BT
15 307 Td
(                return *this;\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(            HFBase_4_::add_value\(val\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(            return *this;\n) Tj
ET
BT
15 252 Td
(        }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(        HFAccept& add_value\(std::string ty, std::string subty\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(            ty += "/";\n) Tj
ET
BT
15 197 Td
(            ty += subty;\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(            HFBase_4_::add_value\(ty\);\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(            return *this;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(    };\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(    struct HFAcceptContact : public HeaderField\n) Tj
ET
BT
15 98 Td
(    {\n) Tj
ET
BT
15 87 Td
(        HFAcceptContact\(\) : HeaderField\("Accept-Contact", "a"\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(        }\n) Tj
ET
BT
15 54 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 43 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET

endstream
endobj
57 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [58 0 R ] /Parent 2 0 R >>
endobj
58 0 obj 
<</Length 3119 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(18) Tj
ET
BT
15 780 Td
(    };\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(    struct HFAcceptEncoding : public HFBase_4_\n) Tj
ET
BT
15 747 Td
(    {\n) Tj
ET
BT
15 736 Td
(        HFAcceptEncoding\(\) : HFBase_4_\("Accept-Encoding"\)\n) Tj
ET
BT
15 725 Td
(        {\n) Tj
ET
BT
15 714 Td
(//            header_params_.append\("q"\);\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(    };\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    struct HFAcceptLanguage : public HFBase_4_\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        HFAcceptLanguage\(\) : HFBase_4_\("Accept-Language"\)\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(//            header_params_.append\("q"\);\n) Tj
ET
BT
15 604 Td
(        }\n) Tj
ET
BT
15 593 Td
(    };\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    struct HFAuthorization : public HFBase_5_\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        HFAuthorization\(\);\n) Tj
ET
BT
15 538 Td
(    };\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    struct HFCallInfo : public HFBase_1_\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        HFCallInfo\(\);\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 450 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 439 Td
(    };\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(    struct HFEvent : public HeaderField\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        HFEvent\(\);\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 362 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 351 Td
(    };\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    struct HFInReplyTo : public HeaderField\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        HFInReplyTo\(\) : HeaderField\("In-Reply-To"\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 263 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 252 Td
(    };\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    struct HFJoin : public HeaderField\n) Tj
ET
BT
15 219 Td
(    {\n) Tj
ET
BT
15 208 Td
(        HFJoin\(\) : HeaderField\("Join"\)\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(        }\n) Tj
ET
BT
15 175 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 164 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 153 Td
(    };\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(    /*\n) Tj
ET
BT
15 120 Td
(     * Priority: non-urgent\n) Tj
ET
BT
15 109 Td
(     * Priority: normal\n) Tj
ET
BT
15 98 Td
(     * Priority: urgent\n) Tj
ET
BT
15 87 Td
(     * ...\n) Tj
ET
BT
15 76 Td
(     */\n) Tj
ET
BT
15 65 Td
(    struct HFPriority : public HFBase_3_\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(        HFPriority\(\) : HFBase_3_\("Priority", true\)\n) Tj
ET

endstream
endobj
60 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [61 0 R ] /Parent 2 0 R >>
endobj
61 0 obj 
<</Length 3234 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(19) Tj
ET
BT
15 780 Td
(        {\n) Tj
ET
BT
15 769 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(    };\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    struct HFPrivacy : public HeaderField\n) Tj
ET
BT
15 714 Td
(    {\n) Tj
ET
BT
15 703 Td
(        HFPrivacy\(\) : HeaderField\("Privacy", true\)\n) Tj
ET
BT
15 692 Td
(        {\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 659 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 648 Td
(    };\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    struct HFProxyAuthorization : public HFBase_5_\n) Tj
ET
BT
15 615 Td
(    {\n) Tj
ET
BT
15 604 Td
(        HFProxyAuthorization\(\);\n) Tj
ET
BT
15 593 Td
(    };\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(    struct HFPOSPAuthToken : public HeaderField\n) Tj
ET
BT
15 549 Td
(    {\n) Tj
ET
BT
15 538 Td
(        HFPOSPAuthToken\(\) : HeaderField\("P-OSP-Auth-Token"\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 494 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 483 Td
(    };\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    struct HFPAssertedIdentity : public HeaderField\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(        HFPAssertedIdentity\(\) : HeaderField\("P-Asserted-Identity"\)\n) Tj
ET
BT
15 428 Td
(        {\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 395 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 384 Td
(    };\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    struct HFPPreferredIdentity : public HeaderField\n) Tj
ET
BT
15 351 Td
(    {\n) Tj
ET
BT
15 340 Td
(        HFPPreferredIdentity\(\) : HeaderField\("P-Preferred-Identity"\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(        }\n) Tj
ET
BT
15 307 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 296 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 285 Td
(    };\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    struct HFMaxForwards : public HFBase_2_\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(        HFMaxForwards\(\) : HFBase_2_\("Max-Forwards", true\)\n) Tj
ET
BT
15 230 Td
(        {\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        bool is_zero_forward\(\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(            return digit_value_ == "0";\n) Tj
ET
BT
15 164 Td
(        }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        std::string max_forwards\(\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(            return digit_value_;\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        HFMaxForwards& max_forwards\(std::string val\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            digit_value_ = val;\n) Tj
ET
BT
15 54 Td
(            return *this;\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
63 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [64 0 R ] /Parent 2 0 R >>
endobj
64 0 obj 
<</Length 3407 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(20) Tj
ET
BT
15 780 Td
(    };\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(    struct HFReason : public HeaderField\n) Tj
ET
BT
15 747 Td
(    {\n) Tj
ET
BT
15 736 Td
(        HFReason\(\) : HeaderField\("Reason", true\)\n) Tj
ET
BT
15 725 Td
(        {\n) Tj
ET
BT
15 714 Td
(//            header_params_.append\("cause"\);\n) Tj
ET
BT
15 703 Td
(//            header_params_.append\("text"\);\n) Tj
ET
BT
15 692 Td
(        }\n) Tj
ET
BT
15 681 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 670 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 659 Td
(    };\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    struct HFReferTo : public HeaderField\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        HFReferTo\(\) : HeaderField\("Refer-To", "r"\)\n) Tj
ET
BT
15 604 Td
(        {\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 571 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 560 Td
(    };\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    /* Referred-By: <sip:user@host.com>\n) Tj
ET
BT
15 527 Td
(     */\n) Tj
ET
BT
15 516 Td
(    struct HFReferredBy : public HeaderField\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(        HFReferredBy\(\) : HeaderField\("Referred-By", "b"\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 450 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 439 Td
(    };\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(    struct HFReplyTo : public HeaderField\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        HFReplyTo\(\) : HeaderField\("Replay-To"\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 351 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 340 Td
(    };\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(    struct HFReplaces : public HeaderField\n) Tj
ET
BT
15 307 Td
(    {\n) Tj
ET
BT
15 296 Td
(        HFReplaces\(\) : HeaderField\("Replaces"\)\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 252 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 241 Td
(    };\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(    struct HFRejectContact : public HeaderField\n) Tj
ET
BT
15 208 Td
(    {\n) Tj
ET
BT
15 197 Td
(        HFRejectContact\(\) : HeaderField\("Reject-Contact", "j"\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 153 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 142 Td
(    };\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(    struct HFRequestDisposition : public HeaderField\n) Tj
ET
BT
15 109 Td
(    {\n) Tj
ET
BT
15 98 Td
(        HFRequestDisposition\(\) : HeaderField\("Request-Disposition"\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 54 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 43 Td
(    };\n) Tj
ET

endstream
endobj
66 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [67 0 R ] /Parent 2 0 R >>
endobj
67 0 obj 
<</Length 3264 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(21) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(    /* Require: 100rel\n) Tj
ET
BT
15 758 Td
(     */\n) Tj
ET
BT
15 747 Td
(    struct HFRequire : public HFBase_3_\n) Tj
ET
BT
15 736 Td
(    {\n) Tj
ET
BT
15 725 Td
(        HFRequire\(\) : HFBase_3_\("Require", true\)\n) Tj
ET
BT
15 714 Td
(        {\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(    };\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(    struct HFProxyRequire : public HFBase_3_\n) Tj
ET
BT
15 659 Td
(    {\n) Tj
ET
BT
15 648 Td
(        HFProxyRequire\(\) : HFBase_3_\("Proxy-Require", true\)\n) Tj
ET
BT
15 637 Td
(        {\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        std::vector<std::string> misunderstand_tags\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            // TODO: check for tags the element unable to understand\n) Tj
ET
BT
15 571 Td
(            return std::vector<std::string>\(\);\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(        \n) Tj
ET
BT
15 538 Td
(    };\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    struct HFRoute : public HFBase_1_\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(        HFRoute\(\) : HFBase_1_\("Route", true\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(    };\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    struct HFRack : public HeaderField\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(        HFRack\(\) : HeaderField\("RACK"\)\n) Tj
ET
BT
15 406 Td
(        {\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 373 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 362 Td
(    };\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(    struct HFSessionExpires : public HeaderField\n) Tj
ET
BT
15 329 Td
(    {\n) Tj
ET
BT
15 318 Td
(        HFSessionExpires\(\) : HeaderField\("Session-Expires", "x"\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 274 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 263 Td
(    };\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(    struct HFSubscriptionState : public HeaderField\n) Tj
ET
BT
15 230 Td
(    {\n) Tj
ET
BT
15 219 Td
(        HFSubscriptionState\(\);\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 186 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 175 Td
(    };\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(    // -------------------- Response header -----------------------------\n) Tj
ET
BT
15 142 Td
(    struct HFAuthenticationInfo : public HeaderField\n) Tj
ET
BT
15 131 Td
(    {\n) Tj
ET
BT
15 120 Td
(        HFAuthenticationInfo\(\);\n) Tj
ET
BT
15 109 Td
(        \n) Tj
ET
BT
15 98 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 87 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 76 Td
(    };\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(    struct HFErrorInfo : public HFBase_1_\n) Tj
ET
BT
15 43 Td
(    {\n) Tj
ET

endstream
endobj
69 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [70 0 R ] /Parent 2 0 R >>
endobj
70 0 obj 
<</Length 3205 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(22) Tj
ET
BT
15 780 Td
(        HFErrorInfo\(\) : HFBase_1_\("Error-Info", true\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(    };\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    struct HFMinSE : public HeaderField\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        HFMinSE\(\) : HeaderField\("Min-SE"\)\n) Tj
ET
BT
15 681 Td
(        {\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 648 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 637 Td
(    };\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    struct HFProxyAuthenticate : public HFBase_4_\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        HFProxyAuthenticate\(\);\n) Tj
ET
BT
15 582 Td
(    };\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(    struct HFServer : public HFBase_3_\n) Tj
ET
BT
15 549 Td
(    {\n) Tj
ET
BT
15 538 Td
(        HFServer\(\) : HFBase_3_\("Server"\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(    };\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(    /* Unsupported: 100rel\n) Tj
ET
BT
15 461 Td
(     */\n) Tj
ET
BT
15 450 Td
(    struct HFUnsupported : public HFBase_3_\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        HFUnsupported\(\) : HFBase_3_\("Unsupported"\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            sym_ = ' ';\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(    };\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    struct HFWarning : public HeaderField\n) Tj
ET
BT
15 351 Td
(    {\n) Tj
ET
BT
15 340 Td
(        struct WarningValue\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            std::string code_;\n) Tj
ET
BT
15 307 Td
(            std::string agent_;\n) Tj
ET
BT
15 296 Td
(            std::string text_;\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(            friend std::ostream& operator<< \(std::ostream &o, WarningValue &w\)\n) Tj
ET
BT
15 263 Td
(            {\n) Tj
ET
BT
15 252 Td
(                if \(w.code_.size\(\)\)\n) Tj
ET
BT
15 241 Td
(                    o << w.code_ << ' ';\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(                if \(w.agent_.size\(\)\)\n) Tj
ET
BT
15 208 Td
(                    o << w.agent_ << ' ';\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(                if \(w.text_.size\(\)\)\n) Tj
ET
BT
15 175 Td
(                    o << " \\"" << w.text_ << '"';\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(                return o;\n) Tj
ET
BT
15 142 Td
(            }\n) Tj
ET
BT
15 131 Td
(        };\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        std::vector<WarningValue> warn_vals_;\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        HFWarning\(\) : HeaderField\("Warning"\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(        }\n) Tj
ET
BT
15 54 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 43 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET

endstream
endobj
72 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [73 0 R ] /Parent 2 0 R >>
endobj
73 0 obj 
<</Length 3106 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(23) Tj
ET
BT
15 780 Td
(    };\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(    struct HFWWWAuthenticate : public HFBase_5_\n) Tj
ET
BT
15 747 Td
(    {\n) Tj
ET
BT
15 736 Td
(        HFWWWAuthenticate\(\);\n) Tj
ET
BT
15 725 Td
(    };\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(    struct HFRSeq : public HeaderField\n) Tj
ET
BT
15 692 Td
(    {\n) Tj
ET
BT
15 681 Td
(        HFRSeq\(\) : HeaderField\("RSeq"\)\n) Tj
ET
BT
15 670 Td
(        {\n) Tj
ET
BT
15 659 Td
(        }\n) Tj
ET
BT
15 648 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 637 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 626 Td
(    };\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(    struct HFAllow : public HFBase_3_\n) Tj
ET
BT
15 593 Td
(    {\n) Tj
ET
BT
15 582 Td
(        HFAllow\(\) : HFBase_3_\("Allow"\)\n) Tj
ET
BT
15 571 Td
(        {\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(    };\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(    struct HFContentEncoding : public HFBase_3_\n) Tj
ET
BT
15 516 Td
(    {\n) Tj
ET
BT
15 505 Td
(        HFContentEncoding\(\) : HFBase_3_\("Content-Encoding", "e"\)\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(        }\n) Tj
ET
BT
15 472 Td
(    };\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    struct HFContentLength : public HFBase_2_\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        HFContentLength\(\) : HFBase_2_\("Content-Length", "l", true\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(        }\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(        std::string length\(\)\n) Tj
ET
BT
15 373 Td
(        {\n) Tj
ET
BT
15 362 Td
(            return digit_value_;\n) Tj
ET
BT
15 351 Td
(        }\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(        void length\(std::string val\)\n) Tj
ET
BT
15 318 Td
(        {\n) Tj
ET
BT
15 307 Td
(            digit_value_ = val;\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        void length\(size_t val\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            std::ostringstream o;\n) Tj
ET
BT
15 241 Td
(            o << val;\n) Tj
ET
BT
15 230 Td
(            digit_value_ = o.str\(\);\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(    };\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    struct HFContentLanguage : public HeaderField\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(        HFContentLanguage\(\) : HeaderField\("Content-Language"\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 120 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 109 Td
(    };\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(    struct HFContentType : public HFBase_3_\n) Tj
ET
BT
15 76 Td
(    {\n) Tj
ET
BT
15 65 Td
(        HFContentType\(\) : HFBase_3_\("Content-Type", "c"\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
75 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [76 0 R ] /Parent 2 0 R >>
endobj
76 0 obj 
<</Length 3198 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(24) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        std::string type\(\)\n) Tj
ET
BT
15 758 Td
(        {\n) Tj
ET
BT
15 747 Td
(            size_t ret;\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(            if \(opts_.empty\(\) || \(ret = opts_.at\(0\).find_first_of\("/"\) == std::string::npos\)\)\n) Tj
ET
BT
15 714 Td
(                return std::string\(\);\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(            return opts_.at\(0\).substr\(0, ret\);\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        std::string subtype\(\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            size_t ret;\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(            if \(opts_.empty\(\)\n) Tj
ET
BT
15 604 Td
(            || \(ret = opts_.at\(0\).find_first_of\("/"\) == std::string::npos\)\n) Tj
ET
BT
15 593 Td
(            || ret >= opts_.at\(0\).size\(\)\)\n) Tj
ET
BT
15 582 Td
(                return std::string\(\);\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(            return opts_.at\(0\).substr\(ret+1\);\n) Tj
ET
BT
15 549 Td
(        }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        HFContentType& type\(std::string val\)\n) Tj
ET
BT
15 516 Td
(        {\n) Tj
ET
BT
15 505 Td
(            opts_.push_back\(val\);\n) Tj
ET
BT
15 494 Td
(            return *this;\n) Tj
ET
BT
15 483 Td
(        }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        HFContentType& subtype\(std::string val\)\n) Tj
ET
BT
15 450 Td
(        {\n) Tj
ET
BT
15 439 Td
(            if \(opts_.empty\(\)\)\n) Tj
ET
BT
15 428 Td
(                return *this;\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(            opts_.at\(0\) += "/";\n) Tj
ET
BT
15 395 Td
(            opts_.at\(0\) += val;\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(            return *this;\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(    };\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    struct HFContentDisposition : public HFBase_3_\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        HFContentDisposition\(\) : HFBase_3_\("Content-Disposition"\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(    };\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(    struct HFMinExpires : public HFBase_2_\n) Tj
ET
BT
15 241 Td
(    {\n) Tj
ET
BT
15 230 Td
(        HFMinExpires\(\) : HFBase_2_\("Min-Expires"\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(    };\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    struct HFExpires : public HFBase_2_\n) Tj
ET
BT
15 164 Td
(    {\n) Tj
ET
BT
15 153 Td
(        HFExpires\(\) : HFBase_2_\("Expires"\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(        }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        std::string expire\(\)\n) Tj
ET
BT
15 98 Td
(        {\n) Tj
ET
BT
15 87 Td
(            return digit_value_;\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(        void expire\(std::string val\)\n) Tj
ET
BT
15 43 Td
(        {\n) Tj
ET

endstream
endobj
78 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [79 0 R ] /Parent 2 0 R >>
endobj
79 0 obj 
<</Length 3387 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(25) Tj
ET
BT
15 780 Td
(            digit_value_ = val;\n) Tj
ET
BT
15 769 Td
(        }\n) Tj
ET
BT
15 758 Td
(    };\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(    struct HFMIMEVersion : public HeaderField\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(        std::string dotted_value_;\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        HFMIMEVersion\(\) : HeaderField\("MIME-Version"\)\n) Tj
ET
BT
15 681 Td
(        {\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(        void generate_values\(\);\n) Tj
ET
BT
15 648 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 637 Td
(    };\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    struct RequestLine\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        MethodMap method_;\n) Tj
ET
BT
15 582 Td
(        std::string request_uri_;\n) Tj
ET
BT
15 571 Td
(        std::string version_;\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        RequestLine\(\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(        //    version_ = SIP_VERSION_2_0;\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        std::string operator\(\) \(\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            std::ostringstream ret;\n) Tj
ET
BT
15 461 Td
(            \n) Tj
ET
BT
15 450 Td
(            ret << method_.name\(\) << " " << request_uri_ << " " << version_ << "\\n";\n) Tj
ET
BT
15 439 Td
(            return ret.str\(\);\n) Tj
ET
BT
15 428 Td
(        }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        friend std::ostream& operator<< \(std::ostream &o, RequestLine req\)\n) Tj
ET
BT
15 395 Td
(        {\n) Tj
ET
BT
15 384 Td
(            return o << req.method_.name\(\) << " " << req.request_uri_ << " " << req.version_ << "\\r\\n";\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 340 Td
(    };\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(    struct ResponseStatus\n) Tj
ET
BT
15 307 Td
(    {\n) Tj
ET
BT
15 296 Td
(        std::string version_;\n) Tj
ET
BT
15 285 Td
(        RespCode resp_code_; // status_code_, reason_parase_\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        ResponseStatus\(\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(//            version_ = SIP_VERSION_2_0;\n) Tj
ET
BT
15 230 Td
(//            resp_code_ = SIP_RESPONSE_SUCCESSFUL;\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        std::string operator\(\) \(\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(            std::ostringstream ret;\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(            ret << version_ << " " << resp_code_ << "\\n";\n) Tj
ET
BT
15 142 Td
(            return ret.str\(\);\n) Tj
ET
BT
15 131 Td
(        }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        friend std::ostream& operator<< \(std::ostream &o, ResponseStatus res\)\n) Tj
ET
BT
15 98 Td
(        {\n) Tj
ET
BT
15 87 Td
(            return o << res.version_ << " " << res.resp_code_ << "\\r\\n";\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(        int parse\(std::string &msg, size_t &pos\);\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
81 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [82 0 R ] /Parent 2 0 R >>
endobj
82 0 obj 
<</Length 4098 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(26) Tj
ET
BT
15 780 Td
(        ResponseStatus& operator=\(ResponseStatus resp\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            version_ = resp.version_;\n) Tj
ET
BT
15 747 Td
(            resp_code_ = resp.resp_code_;\n) Tj
ET
BT
15 736 Td
(            return *this;\n) Tj
ET
BT
15 725 Td
(        }\n) Tj
ET
BT
15 714 Td
(    };\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    #define out_if_not_null\(o, it\)     \\\n) Tj
ET
BT
15 681 Td
(    {                                \\\n) Tj
ET
BT
15 670 Td
(        if \(it\) o << *it;            \\\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    #define out_if_not_empty\(o, hf\)    \\\n) Tj
ET
BT
15 626 Td
(    {                                \\\n) Tj
ET
BT
15 615 Td
(        for \(auto &it : hf\) o << *it;    \\\n) Tj
ET
BT
15 604 Td
(    }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(    typedef std::map<std::string, size_t> T_HF_MAP;\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(    struct HeaderFields\n) Tj
ET
BT
15 549 Td
(    {\n) Tj
ET
BT
15 538 Td
(        std::shared_ptr<RequestLine> req_line_;\n) Tj
ET
BT
15 527 Td
(        std::shared_ptr<ResponseStatus> resp_status_;\n) Tj
ET
BT
15 516 Td
(        // mandatory\n) Tj
ET
BT
15 505 Td
(        PtsOf<HFCallId> call_id_;\n) Tj
ET
BT
15 494 Td
(        PtsOf<HFCSeq> cseq_;\n) Tj
ET
BT
15 483 Td
(        PtsOf<HFFrom> from_;\n) Tj
ET
BT
15 472 Td
(        PtsOf<HFTo> to_;\n) Tj
ET
BT
15 461 Td
(        PtsOf<HFVia> via_;\n) Tj
ET
BT
15 450 Td
(        // Optional\n) Tj
ET
BT
15 439 Td
(        PtsOf<HFAlertInfo> alert_info_;\n) Tj
ET
BT
15 428 Td
(        PtsOf<HFAllowEvents> allow_events_;\n) Tj
ET
BT
15 417 Td
(        PtsOf<HFDate> date_;\n) Tj
ET
BT
15 406 Td
(        PtsOf<HFContact> contact_;\n) Tj
ET
BT
15 395 Td
(        PtsOf<HFOrganization> organization_;\n) Tj
ET
BT
15 384 Td
(        PtsOf<HFRecordRoute> record_route_;\n) Tj
ET
BT
15 373 Td
(        PtsOf<HFRetryAfter> retry_after_; // in second\n) Tj
ET
BT
15 362 Td
(        PtsOf<HFSubject> subject_;\n) Tj
ET
BT
15 351 Td
(        PtsOf<HFSupported> supported_;\n) Tj
ET
BT
15 340 Td
(        PtsOf<HFTimestamp> timestamp_;\n) Tj
ET
BT
15 329 Td
(        PtsOf<HFUserAgent> user_agent_;\n) Tj
ET
BT
15 318 Td
(        PtsOf<HFAnswerMode> answer_mode_;\n) Tj
ET
BT
15 307 Td
(        PtsOf<HFPrivAnswerMode> priv_answer_mode_;\n) Tj
ET
BT
15 296 Td
(        // request header fields\n) Tj
ET
BT
15 285 Td
(        PtsOf<HFAccept> accept_; // type/sub-type\n) Tj
ET
BT
15 274 Td
(        PtsOf<HFAcceptContact> accept_contact_;\n) Tj
ET
BT
15 263 Td
(        PtsOf<HFAcceptEncoding> accept_encoding_;\n) Tj
ET
BT
15 252 Td
(        PtsOf<HFAcceptLanguage> accept_language_;\n) Tj
ET
BT
15 241 Td
(        PtsOf<HFAuthorization> authorization_;\n) Tj
ET
BT
15 230 Td
(        PtsOf<HFCallInfo> call_info_;\n) Tj
ET
BT
15 219 Td
(        PtsOf<HFEvent> event_;\n) Tj
ET
BT
15 208 Td
(        PtsOf<HFInReplyTo> in_replay_to_;\n) Tj
ET
BT
15 197 Td
(        PtsOf<HFJoin> join_;\n) Tj
ET
BT
15 186 Td
(        PtsOf<HFPriority> priority_;\n) Tj
ET
BT
15 175 Td
(        PtsOf<HFPrivacy> privacy_;\n) Tj
ET
BT
15 164 Td
(        PtsOf<HFProxyAuthorization> proxy_authorization_;\n) Tj
ET
BT
15 153 Td
(        PtsOf<HFProxyRequire> proxy_require_;\n) Tj
ET
BT
15 142 Td
(        PtsOf<HFPOSPAuthToken> p_osp_auth_token_;\n) Tj
ET
BT
15 131 Td
(        PtsOf<HFPAssertedIdentity> p_asserted_identity_;\n) Tj
ET
BT
15 120 Td
(        PtsOf<HFPPreferredIdentity> p_preferred_identity_;\n) Tj
ET
BT
15 109 Td
(        PtsOf<HFMaxForwards> max_forwards_;\n) Tj
ET
BT
15 98 Td
(        PtsOf<HFReason> reason_;\n) Tj
ET
BT
15 87 Td
(        PtsOf<HFReferTo> refer_to_;\n) Tj
ET
BT
15 76 Td
(        PtsOf<HFReferredBy> referred_by_;\n) Tj
ET
BT
15 65 Td
(        PtsOf<HFReplyTo> reply_to_;\n) Tj
ET
BT
15 54 Td
(        PtsOf<HFReplaces> replaces_;\n) Tj
ET
BT
15 43 Td
(        PtsOf<HFRejectContact> reject_contact_;\n) Tj
ET

endstream
endobj
84 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [85 0 R ] /Parent 2 0 R >>
endobj
85 0 obj 
<</Length 2355 >>
stream
/F1 10 Tf
BT
122 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/header_field.h) Tj
ET
BT
565 822 Td
(27) Tj
ET
BT
15 780 Td
(        PtsOf<HFRequestDisposition> request_disposition_;\n) Tj
ET
BT
15 769 Td
(        PtsOf<HFRequire> require_;\n) Tj
ET
BT
15 758 Td
(        PtsOf<HFRoute> route_;\n) Tj
ET
BT
15 747 Td
(        PtsOf<HFRack> rack_;\n) Tj
ET
BT
15 736 Td
(        PtsOf<HFSessionExpires> session_expires_; // in second\n) Tj
ET
BT
15 725 Td
(        PtsOf<HFSubscriptionState> subscription_state_;\n) Tj
ET
BT
15 714 Td
(        // response header fields\n) Tj
ET
BT
15 703 Td
(        PtsOf<HFAuthenticationInfo> authentication_info_;\n) Tj
ET
BT
15 692 Td
(        PtsOf<HFErrorInfo> error_info_;\n) Tj
ET
BT
15 681 Td
(        PtsOf<HFMinExpires> min_expires_;\n) Tj
ET
BT
15 670 Td
(        PtsOf<HFMinSE> min_se_;\n) Tj
ET
BT
15 659 Td
(        PtsOf<HFProxyAuthenticate> proxy_authenticate_;\n) Tj
ET
BT
15 648 Td
(        PtsOf<HFServer> server_;\n) Tj
ET
BT
15 637 Td
(        PtsOf<HFUnsupported> unsupported_;\n) Tj
ET
BT
15 626 Td
(        PtsOf<HFWarning> warning_;\n) Tj
ET
BT
15 615 Td
(        PtsOf<HFWWWAuthenticate> www_authenticate_;\n) Tj
ET
BT
15 604 Td
(        PtsOf<HFRSeq> rseq_;\n) Tj
ET
BT
15 593 Td
(        // message header fields\n) Tj
ET
BT
15 582 Td
(        PtsOf<HFAllow> allow_;\n) Tj
ET
BT
15 571 Td
(        PtsOf<HFContentEncoding> content_encoding_;\n) Tj
ET
BT
15 560 Td
(        PtsOf<HFContentLength> content_length_;\n) Tj
ET
BT
15 549 Td
(        PtsOf<HFContentDisposition> content_disposition_;\n) Tj
ET
BT
15 538 Td
(        PtsOf<HFContentLanguage> content_language_;\n) Tj
ET
BT
15 527 Td
(        PtsOf<HFContentType> content_type_;\n) Tj
ET
BT
15 516 Td
(        PtsOf<HFExpires> expires_; // in second\n) Tj
ET
BT
15 505 Td
(        PtsOf<HFMIMEVersion> mime_version_;\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        HeaderFields\(\);\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        ~HeaderFields\(\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    public:\n) Tj
ET
BT
15 428 Td
(        static T_HF_MAP allowed_fields_;\n) Tj
ET
BT
15 417 Td
(        static void init_allowed_fields\(\);\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(    };\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
87 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [88 0 R ] /Parent 2 0 R >>
endobj
88 0 obj 
<</Length 2730 >>
stream
/F1 10 Tf
BT
122.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/parameter.h) Tj
ET
BT
565 822 Td
(28) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/parameter.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "utils.h"\n) Tj
ET
BT
15 692 Td
(#include "except.h"\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(namespace EasySip\n) Tj
ET
BT
15 659 Td
({\n) Tj
ET
BT
15 648 Td
(\tclass Parameter : public std::pair<std::string, std::string>\n) Tj
ET
BT
15 637 Td
(\t{\n) Tj
ET
BT
15 626 Td
(\tpublic:\n) Tj
ET
BT
15 615 Td
(\t\tParameter\(\)\n) Tj
ET
BT
15 604 Td
(\t\t{\n) Tj
ET
BT
15 593 Td
(\t\t}\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(\t\tParameter\(std::string name, std::string value = ""\)\n) Tj
ET
BT
15 560 Td
(\t\t{\n) Tj
ET
BT
15 549 Td
(\t\t\tfirst = name;\n) Tj
ET
BT
15 538 Td
(\t\t\tsecond = value;\n) Tj
ET
BT
15 527 Td
(\t\t}\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(\t\t~Parameter\(\)\n) Tj
ET
BT
15 494 Td
(\t\t{\n) Tj
ET
BT
15 483 Td
(\t\t}\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(\t\tstd::string name\(\) const\n) Tj
ET
BT
15 450 Td
(\t\t{\n) Tj
ET
BT
15 439 Td
(\t\t\treturn first;\n) Tj
ET
BT
15 428 Td
(\t\t}\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(\t\tstd::string value\(\) const\n) Tj
ET
BT
15 395 Td
(\t\t{\n) Tj
ET
BT
15 384 Td
(\t\t\treturn second;\n) Tj
ET
BT
15 373 Td
(\t\t}\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(\t\tvoid name\(const std::string n\)\n) Tj
ET
BT
15 340 Td
(\t\t{\n) Tj
ET
BT
15 329 Td
(\t\t\tfirst = n;\n) Tj
ET
BT
15 318 Td
(\t\t}\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(\t\tvoid value\(const std::string v\)\n) Tj
ET
BT
15 285 Td
(\t\t{\n) Tj
ET
BT
15 274 Td
(\t\t\tsecond = v;\n) Tj
ET
BT
15 263 Td
(\t\t}\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(\t\tfriend bool operator< \(Parameter a, Parameter b\)\n) Tj
ET
BT
15 230 Td
(\t\t{\n) Tj
ET
BT
15 219 Td
(\t\t\treturn a.name\(\) < b.name\(\);\n) Tj
ET
BT
15 208 Td
(\t\t}\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(\t\tfriend std::ostream& operator<< \(std::ostream &o, Parameter p\)\n) Tj
ET
BT
15 175 Td
(\t\t{\n) Tj
ET
BT
15 164 Td
(\t\t\to << p.name\(\);\n) Tj
ET
BT
15 153 Td
(\t\n) Tj
ET
BT
15 142 Td
(\t\t\tif \(p.value\(\).size\(\)\)\n) Tj
ET
BT
15 131 Td
(\t\t\t{\n) Tj
ET
BT
15 120 Td
(\t\t\t\to << "=" << p.value\(\);\n) Tj
ET
BT
15 109 Td
(\t\t\t}\n) Tj
ET
BT
15 98 Td
(\t\n) Tj
ET
BT
15 87 Td
(\t\t\treturn o;\n) Tj
ET
BT
15 76 Td
(\t\t}\n) Tj
ET
BT
15 65 Td
(\t};\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(\tclass Parameters : public std::vector<Parameter>\n) Tj
ET

endstream
endobj
90 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [91 0 R ] /Parent 2 0 R >>
endobj
91 0 obj 
<</Length 2777 >>
stream
/F1 10 Tf
BT
122.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/parameter.h) Tj
ET
BT
565 822 Td
(29) Tj
ET
BT
15 780 Td
(\t{\n) Tj
ET
BT
15 769 Td
(\t\tstd::string sym_;\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(\tpublic:\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(\t\tParameters\(std::string sym\) : sym_\(sym\)\n) Tj
ET
BT
15 714 Td
(\t\t{\n) Tj
ET
BT
15 703 Td
(\t\t}\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(\t\tParameters\(\) : sym_\(";"\)\n) Tj
ET
BT
15 670 Td
(\t\t{\n) Tj
ET
BT
15 659 Td
(\t\t}\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(\t\t~Parameters\(\)\n) Tj
ET
BT
15 626 Td
(\t\t{\n) Tj
ET
BT
15 615 Td
(\t\t}\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\t\tvoid Sym\(std::string sym\)\n) Tj
ET
BT
15 582 Td
(\t\t{\n) Tj
ET
BT
15 571 Td
(\t\t\tsym_ = sym;\n) Tj
ET
BT
15 560 Td
(\t\t}\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(\t\tstd::string Sym\(\) const\n) Tj
ET
BT
15 527 Td
(\t\t{\n) Tj
ET
BT
15 516 Td
(\t\t\treturn sym_;\n) Tj
ET
BT
15 505 Td
(\t\t}\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(\t\tvoid append\(std::string name, std::string value\)\n) Tj
ET
BT
15 472 Td
(\t\t{\n) Tj
ET
BT
15 461 Td
(\t\t\tif \(name.empty\(\)\) return;\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(\t\t\tif \(!has_name\(name\)\)\n) Tj
ET
BT
15 428 Td
(\t\t\t\tpush_back\(Parameter\(name, value\)\);\n) Tj
ET
BT
15 417 Td
(\t\t}\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(\t\tvoid append\(std::string name\)\n) Tj
ET
BT
15 384 Td
(\t\t{\n) Tj
ET
BT
15 373 Td
(\t\t\tappend\(name, ""\);\n) Tj
ET
BT
15 362 Td
(\t\t}\n) Tj
ET
BT
15 351 Td
(\t\n) Tj
ET
BT
15 340 Td
(\t\tbool has_name\(std::string name\)\n) Tj
ET
BT
15 329 Td
(\t\t{\n) Tj
ET
BT
15 318 Td
(\t\t\tfor \(auto &it : *this\)\n) Tj
ET
BT
15 307 Td
(\t\t\t{\n) Tj
ET
BT
15 296 Td
(\t\t\t\tif \(name == it.first\)\n) Tj
ET
BT
15 285 Td
(\t\t\t\t\treturn true;\n) Tj
ET
BT
15 274 Td
(\t\t\t}\n) Tj
ET
BT
15 263 Td
(\t\n) Tj
ET
BT
15 252 Td
(\t\t\treturn false;\n) Tj
ET
BT
15 241 Td
(\t\t}\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(\t\tvoid set_value_by_name\(std::string name, std::string value\)\n) Tj
ET
BT
15 208 Td
(\t\t{\n) Tj
ET
BT
15 197 Td
(\t\t\tfor \(auto &it : *this\)\n) Tj
ET
BT
15 186 Td
(\t\t\t{\n) Tj
ET
BT
15 175 Td
(\t\t\t\tif \(name == it.first\)\n) Tj
ET
BT
15 164 Td
(\t\t\t\t{\n) Tj
ET
BT
15 153 Td
(\t\t\t\t\tit.second = value;\n) Tj
ET
BT
15 142 Td
(\t\t\t\t\treturn;\n) Tj
ET
BT
15 131 Td
(\t\t\t\t}\n) Tj
ET
BT
15 120 Td
(\t\t\t}\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(\t\t\tappend\(name, value\);\n) Tj
ET
BT
15 87 Td
(\t\t}\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(\t\tstd::string get_value_by_name\(std::string name\)\n) Tj
ET
BT
15 54 Td
(\t\t{\n) Tj
ET
BT
15 43 Td
(\t\t\tfor \(auto it : *this\)\n) Tj
ET

endstream
endobj
93 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [94 0 R ] /Parent 2 0 R >>
endobj
94 0 obj 
<</Length 3012 >>
stream
/F1 10 Tf
BT
122.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/parameter.h) Tj
ET
BT
565 822 Td
(30) Tj
ET
BT
15 780 Td
(\t\t\t{\n) Tj
ET
BT
15 769 Td
(\t\t\t\tif \(it.first == name\)\n) Tj
ET
BT
15 758 Td
(\t\t\t\t\treturn it.second;\n) Tj
ET
BT
15 747 Td
(\t\t\t}\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(\t\t\treturn std::string\(\);\n) Tj
ET
BT
15 714 Td
(\t\t}\n) Tj
ET
BT
15 703 Td
(\t\n) Tj
ET
BT
15 692 Td
(\t\tfriend std::ostream& operator<< \(std::ostream &o, Parameters &ps\)\n) Tj
ET
BT
15 681 Td
(\t\t{\n) Tj
ET
BT
15 670 Td
(\t\t\tfor \(Parameters::iterator it = ps.begin\(\); it != ps.end\(\); it++\)\n) Tj
ET
BT
15 659 Td
(\t\t\t{\n) Tj
ET
BT
15 648 Td
(\t\t\t\tif \(std::distance\(ps.begin\(\), it\) > 0 && std::distance\(ps.begin\(\), it\) < \(int\)ps.size\(\)\)\n) Tj
ET
BT
15 637 Td
(\t\t\t\t\to << ps.Sym\(\);\n) Tj
ET
BT
15 626 Td
(\t\n) Tj
ET
BT
15 615 Td
(\t\t\t\to << *it;\n) Tj
ET
BT
15 604 Td
(\t\t\t}\n) Tj
ET
BT
15 593 Td
(\t\n) Tj
ET
BT
15 582 Td
(\t\t\treturn o;\n) Tj
ET
BT
15 571 Td
(\t\t}\n) Tj
ET
BT
15 560 Td
(\t};\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(\tstruct ItemWithParams\n) Tj
ET
BT
15 527 Td
(\t{\n) Tj
ET
BT
15 516 Td
(\t\tstd::vector<std::string> items_;\n) Tj
ET
BT
15 505 Td
(\t\tParameters params_;\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(\t\tItemWithParams\(\)\n) Tj
ET
BT
15 472 Td
(\t\t{\n) Tj
ET
BT
15 461 Td
(\t\t}\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(\t\tItemWithParams\(std::string item\)\n) Tj
ET
BT
15 428 Td
(\t\t{\n) Tj
ET
BT
15 417 Td
(\t\t\titems_.push_back\(item\);\n) Tj
ET
BT
15 406 Td
(\t\t}\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(\t\tParameters& params\(\)\n) Tj
ET
BT
15 373 Td
(\t\t{\n) Tj
ET
BT
15 362 Td
(\t\t\treturn params_;\n) Tj
ET
BT
15 351 Td
(\t\t}\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(\t\tfriend std::ostream& operator<< \(std::ostream &o, ItemWithParams &c\)\n) Tj
ET
BT
15 318 Td
(\t\t{\n) Tj
ET
BT
15 307 Td
(\t\t\tfor \(auto &it : c.items_\)\n) Tj
ET
BT
15 296 Td
(\t\t\t\to << it;\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(\t\t\tif \(c.params_.size\(\)\)\n) Tj
ET
BT
15 263 Td
(\t\t\t\to << ";" << c.params_;\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(\t\t\treturn o;\n) Tj
ET
BT
15 230 Td
(\t\t}\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(\t\tvoid set_param\(std::string name, std::string value\)\n) Tj
ET
BT
15 197 Td
(\t\t{\n) Tj
ET
BT
15 186 Td
(\t\t\tparams_.set_value_by_name\(name, value\);\n) Tj
ET
BT
15 175 Td
(\t\t}\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(\t\tvoid add_param\(std::string name, std::string value = ""\)\n) Tj
ET
BT
15 142 Td
(\t\t{\n) Tj
ET
BT
15 131 Td
(\t\t\tparams_.append\(name, value\);\n) Tj
ET
BT
15 120 Td
(\t\t}\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(\t\tbool has_param\(std::string name\)\n) Tj
ET
BT
15 87 Td
(\t\t{\n) Tj
ET
BT
15 76 Td
(\t\t\treturn params_.has_name\(name\);\n) Tj
ET
BT
15 65 Td
(\t\t}\n) Tj
ET
BT
15 54 Td
(\t};\n) Tj
ET
BT
15 43 Td
(} // namespace EasiSip\n) Tj
ET

endstream
endobj
96 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [97 0 R ] /Parent 2 0 R >>
endobj
97 0 obj 
<</Length 135 >>
stream
/F1 10 Tf
BT
122.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/parameter.h) Tj
ET
BT
565 822 Td
(31) Tj
ET

endstream
endobj
99 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [100 0 R ] /Parent 2 0 R >>
endobj
100 0 obj 
<</Length 3035 >>
stream
/F1 10 Tf
BT
124.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/uri.h) Tj
ET
BT
565 822 Td
(32) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/uri.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include <memory>\n) Tj
ET
BT
15 692 Td
(#include <locale>\n) Tj
ET
BT
15 681 Td
(#include "parameter.h"\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(namespace EasySip\n) Tj
ET
BT
15 648 Td
({\n) Tj
ET
BT
15 637 Td
(    class Contact : public ItemWithParams\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(    public:\n) Tj
ET
BT
15 604 Td
(        Contact\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            items_.resize\(2\);\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        Contact\(std::string name, std::string uri\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            items_.push_back\(name\);\n) Tj
ET
BT
15 516 Td
(            items_.push_back\(uri\);\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        std::string& name\(\)\n) Tj
ET
BT
15 472 Td
(        {\n) Tj
ET
BT
15 461 Td
(            return items_.at\(0\);\n) Tj
ET
BT
15 450 Td
(        }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        std::string& uri\(\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            return items_.at\(1\);\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        void name\(std::string name\)\n) Tj
ET
BT
15 362 Td
(        {\n) Tj
ET
BT
15 351 Td
(            items_.at\(0\) = name;\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        void uri\(std::string uri\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            items_.at\(1\) = uri;\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        friend std::ostream& operator<< \(std::ostream &o, Contact &c\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(            if \(c.name\(\).size\(\)\)// || c.params\(\).size\(\)\)\n) Tj
ET
BT
15 230 Td
(                o << c.name\(\);// << " <";\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(            o << " <" << c.uri\(\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(            if \(c.params\(\).size\(\)\)\n) Tj
ET
BT
15 175 Td
(                o << ";" << c.params\(\);\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(//            if \(c.name\(\).size\(\) || c.params\(\).size\(\)\)\n) Tj
ET
BT
15 142 Td
(                o << ">";\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(            return o;\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        bool empty\(\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            return \(name\(\).empty\(\) && uri\(\).empty\(\)\);\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
102 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [103 0 R ] /Parent 2 0 R >>
endobj
103 0 obj 
<</Length 3864 >>
stream
/F1 10 Tf
BT
124.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/uri.h) Tj
ET
BT
565 822 Td
(33) Tj
ET
BT
15 780 Td
(        bool full\(\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            return \(!uri\(\).empty\(\) && !name\(\).empty\(\)\);\n) Tj
ET
BT
15 747 Td
(        }\n) Tj
ET
BT
15 736 Td
(    };\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    struct ContactList : public PtsOf<Contact>\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        void cleanup_empty_uri\(\)\n) Tj
ET
BT
15 681 Td
(        {\n) Tj
ET
BT
15 670 Td
(            for \(iterator it = begin\(\); it != end\(\);\)\n) Tj
ET
BT
15 659 Td
(            {\n) Tj
ET
BT
15 648 Td
(                if \(\(*it\)->uri\(\).empty\(\)\)\n) Tj
ET
BT
15 637 Td
(                    erase\(it\);\n) Tj
ET
BT
15 626 Td
(                else\n) Tj
ET
BT
15 615 Td
(                    it++;\n) Tj
ET
BT
15 604 Td
(            }\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(        void append\(std::string uri, std::string name = ""\)\n) Tj
ET
BT
15 560 Td
(        {\n) Tj
ET
BT
15 549 Td
(            if \(uri.empty\(\)\) return;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(            append_item\(\);\n) Tj
ET
BT
15 516 Td
(            last\(\)->uri\(uri\);\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(            if \(name.size\(\)\)\n) Tj
ET
BT
15 483 Td
(                last\(\)->name\(name\);\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        void append\(ContactList& c\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(            insert\(end\(\), c.begin\(\), c.end\(\)\);\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        void append\(ContactList::iterator from, ContactList::iterator to\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(            insert\(end\(\), from, to\);\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(    };\n) Tj
ET
BT
15 329 Td
(//            uri_params_.append\("aai"\);\n) Tj
ET
BT
15 318 Td
(//            uri_params_.append\("bnc"\);\n) Tj
ET
BT
15 307 Td
(//            uri_params_.append\("cause"\);\n) Tj
ET
BT
15 296 Td
(//            uri_params_.append\("ccxml"\);\n) Tj
ET
BT
15 285 Td
(//            uri_params_.append\("comp"\);\n) Tj
ET
BT
15 274 Td
(//            uri_params_.append\("gr"\);\n) Tj
ET
BT
15 263 Td
(//            uri_params_.append\("locale"\);\n) Tj
ET
BT
15 252 Td
(//            uri_params_.append\("lr", false\);\n) Tj
ET
BT
15 241 Td
(//            uri_params_.append\("m"\);\n) Tj
ET
BT
15 230 Td
(//            uri_params_.append\("maddr"\);\n) Tj
ET
BT
15 219 Td
(//            uri_params_.append\("maxage"\);\n) Tj
ET
BT
15 208 Td
(//            uri_params_.append\("maxstale"\);\n) Tj
ET
BT
15 197 Td
(//            uri_params_.append\("method"\);\n) Tj
ET
BT
15 186 Td
(//            uri_params_.append\("ob"\);\n) Tj
ET
BT
15 175 Td
(//            uri_params_.append\("postbody"\);\n) Tj
ET
BT
15 164 Td
(//            uri_params_.append\("repeat"\);\n) Tj
ET
BT
15 153 Td
(//            uri_params_.append\("sg"\);\n) Tj
ET
BT
15 142 Td
(//            uri_params_.append\("sigcomp-id"\);\n) Tj
ET
BT
15 131 Td
(//            uri_params_.append\("target"\);\n) Tj
ET
BT
15 120 Td
(//            uri_params_.append\("transport"\);\n) Tj
ET
BT
15 109 Td
(//            uri_params_.append\("ttl"\);\n) Tj
ET
BT
15 98 Td
(//            uri_params_.append\("user"\);\n) Tj
ET
BT
15 87 Td
(//            // RFC-4240\n) Tj
ET
BT
15 76 Td
(//            uri_params_.append\("content-type"\);\n) Tj
ET
BT
15 65 Td
(//            uri_params_.append\("delay"\);\n) Tj
ET
BT
15 54 Td
(//            uri_params_.append\("duration"\);\n) Tj
ET
BT
15 43 Td
(//            uri_params_.append\("extension"\);\n) Tj
ET

endstream
endobj
105 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [106 0 R ] /Parent 2 0 R >>
endobj
106 0 obj 
<</Length 429 >>
stream
/F1 10 Tf
BT
124.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/uri.h) Tj
ET
BT
565 822 Td
(34) Tj
ET
BT
15 780 Td
(//            uri_params_.append\("param"\);\n) Tj
ET
BT
15 769 Td
(//            uri_params_.append\("play"\);\n) Tj
ET
BT
15 758 Td
(//            uri_params_.append\("voicexml"\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
108 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [109 0 R ] /Parent 2 0 R >>
endobj
109 0 obj 
<</Length 3072 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/thread.h) Tj
ET
BT
565 822 Td
(35) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/thread.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include <pthread.h>\n) Tj
ET
BT
15 692 Td
(#include "except.h"\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(namespace EasySip\n) Tj
ET
BT
15 659 Td
({\n) Tj
ET
BT
15 648 Td
(//#ifndef _GNU_SOURCE\n) Tj
ET
BT
15 637 Td
(//#define _GNU_SOURCE\n) Tj
ET
BT
15 626 Td
(//#endif\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(    class ThrAttr\n) Tj
ET
BT
15 593 Td
(    {\n) Tj
ET
BT
15 582 Td
(    public:\n) Tj
ET
BT
15 571 Td
(        struct Stack\n) Tj
ET
BT
15 560 Td
(        {\n) Tj
ET
BT
15 549 Td
(            void *stackaddr_;\n) Tj
ET
BT
15 538 Td
(            size_t stacksize_;\n) Tj
ET
BT
15 527 Td
(        };\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        struct SchedParam\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            int policy_;\n) Tj
ET
BT
15 472 Td
(            struct sched_param param_;\n) Tj
ET
BT
15 461 Td
(        };\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    private:\n) Tj
ET
BT
15 428 Td
(        pthread_attr_t attr_;\n) Tj
ET
BT
15 417 Td
(        cpu_set_t cpuset_;\n) Tj
ET
BT
15 406 Td
(        Stack stack_;\n) Tj
ET
BT
15 395 Td
(        SchedParam schedparam_;\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    public:\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        ThrAttr\(\)\n) Tj
ET
BT
15 340 Td
(        {\n) Tj
ET
BT
15 329 Td
(            if \(0 > pthread_attr_init\(&attr_\)\)\n) Tj
ET
BT
15 318 Td
(                std::cerr << "pthread_attr_init: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 307 Td
(        }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        ~ThrAttr\(\)\n) Tj
ET
BT
15 274 Td
(        {\n) Tj
ET
BT
15 263 Td
(            if \(0 > pthread_attr_destroy\(&attr_\)\)\n) Tj
ET
BT
15 252 Td
(                std::cerr << "pthread_attr_destroy: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 241 Td
(        }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        pthread_attr_t& Attr\(\)\n) Tj
ET
BT
15 208 Td
(        {\n) Tj
ET
BT
15 197 Td
(            return attr_;\n) Tj
ET
BT
15 186 Td
(        }\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(        cpu_set_t& affinity_np\(\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(            if \(0 > pthread_attr_getaffinity_np\(&attr_, sizeof\(cpu_set_t\), &cpuset_\)\)\n) Tj
ET
BT
15 131 Td
(                std::cerr << "pthread_attr_getaffinity_np: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(            return cpuset_;\n) Tj
ET
BT
15 98 Td
(        }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        ThrAttr& affinity_np\(cpu_set_t cpuset\)\n) Tj
ET
BT
15 65 Td
(        {\n) Tj
ET
BT
15 54 Td
(            cpuset_ = cpuset;\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
111 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [112 0 R ] /Parent 2 0 R >>
endobj
112 0 obj 
<</Length 3793 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/thread.h) Tj
ET
BT
565 822 Td
(36) Tj
ET
BT
15 780 Td
(            if \(0 > pthread_attr_setaffinity_np\(&attr_, sizeof\(cpu_set_t\), &cpuset_\)\)\n) Tj
ET
BT
15 769 Td
(                std::cerr << "pthread_attr_setaffinity_np: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(            return *this;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        int detachstate\(\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            int detachstate;\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(            if \(0 > pthread_attr_getdetachstate\(&attr_, &detachstate\)\)\n) Tj
ET
BT
15 659 Td
(                std::cerr << "pthread_attr_getdetachstate: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(            return detachstate;\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        ThrAttr& detachstate\(int detachstate\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            if \(0 > pthread_attr_setdetachstate\(&attr_, detachstate\)\)\n) Tj
ET
BT
15 571 Td
(                std::cerr << "pthread_attr_setdetachstate: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(            return *this;\n) Tj
ET
BT
15 538 Td
(        }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        size_t guardsize\(\)\n) Tj
ET
BT
15 505 Td
(        {\n) Tj
ET
BT
15 494 Td
(            size_t guardsize;\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(            if \(0 > pthread_attr_getguardsize\(&attr_, &guardsize\)\)\n) Tj
ET
BT
15 461 Td
(                std::cerr << "pthread_attr_getguardsize: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(            return guardsize;\n) Tj
ET
BT
15 428 Td
(        }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        ThrAttr& guardsize\(size_t guardsize\)\n) Tj
ET
BT
15 395 Td
(        {\n) Tj
ET
BT
15 384 Td
(            if \(0 > pthread_attr_setguardsize\(&attr_, guardsize\)\)\n) Tj
ET
BT
15 373 Td
(                std::cerr << "pthread_attr_setguardsize: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(            return *this;\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        int inheritsched\(\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            int inheritsched;\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(            if \(0 > pthread_attr_getinheritsched\(&attr_, &inheritsched\)\)\n) Tj
ET
BT
15 263 Td
(                std::cerr << "pthread_attr_getinheritsched: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(            return inheritsched;\n) Tj
ET
BT
15 230 Td
(        }\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        ThrAttr& inheritsched\(int inheritsched\)\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(            if \(0 > pthread_attr_setinheritsched\(&attr_, inheritsched\)\)\n) Tj
ET
BT
15 175 Td
(                std::cerr << "pthread_attr_setinheritsched: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(            return *this;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        SchedParam& schedparam\(\)\n) Tj
ET
BT
15 109 Td
(        {\n) Tj
ET
BT
15 98 Td
(            if \(0 > pthread_attr_getschedparam\(&attr_, &schedparam_.param_\)\)\n) Tj
ET
BT
15 87 Td
(                std::cerr << "pthread_attr_getschedparam: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(            return schedparam_;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
114 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [115 0 R ] /Parent 2 0 R >>
endobj
115 0 obj 
<</Length 3835 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/thread.h) Tj
ET
BT
565 822 Td
(37) Tj
ET
BT
15 780 Td
(        ThrAttr& schedparam\(int priority\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(//            schedparam_.policy_ = policy;\n) Tj
ET
BT
15 747 Td
(            schedparam_.param_.sched_priority = priority;\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(            if \(0 > pthread_attr_setschedparam\(&attr_, &schedparam_.param_\)\)\n) Tj
ET
BT
15 714 Td
(                std::cerr << "pthread_attr_setschedparam: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(            return *this;\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        int schedpolicy\(\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            int schedpolicy;\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(            if \(0 > pthread_attr_getschedpolicy\(&attr_, &schedpolicy\)\)\n) Tj
ET
BT
15 604 Td
(                std::cerr << "pthread_attr_getschedpolicy: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(            return schedpolicy;\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        ThrAttr& schedpolicy\(int schedpolicy\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            if \(0 > pthread_attr_setschedpolicy\(&attr_, schedpolicy\)\)\n) Tj
ET
BT
15 516 Td
(                std::cerr << "pthread_attr_setschedpolicy: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(            return *this;\n) Tj
ET
BT
15 483 Td
(        }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        int scope\(\)\n) Tj
ET
BT
15 450 Td
(        {\n) Tj
ET
BT
15 439 Td
(            int scope;\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(            if \(0 > pthread_attr_getscope\(&attr_, &scope\)\)\n) Tj
ET
BT
15 406 Td
(                std::cerr << "pthread_attr_getscope: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(            return scope;\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        ThrAttr& scope\(int scope\)\n) Tj
ET
BT
15 340 Td
(        {\n) Tj
ET
BT
15 329 Td
(            if \(0 > pthread_attr_setscope\(&attr_, scope\)\)\n) Tj
ET
BT
15 318 Td
(                std::cerr << "pthread_attr_setscope: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(            return *this;\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        Stack& stack\(\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(            if \(0 > pthread_attr_getstack\(&attr_, &stack_.stackaddr_, &stack_.stacksize_\)\)\n) Tj
ET
BT
15 230 Td
(                std::cerr << "pthread_attr_getstack: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(            return stack_;\n) Tj
ET
BT
15 197 Td
(        }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        ThrAttr& stack\(void *stackaddr, size_t stacksize\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            stack_.stackaddr_ = &stackaddr;\n) Tj
ET
BT
15 142 Td
(            stack_.stacksize_ = stacksize;\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(            if \(0 > pthread_attr_setstack\(&attr_, stack_.stackaddr_, stack_.stacksize_\)\)\n) Tj
ET
BT
15 109 Td
(                std::cerr << "pthread_attr_setstack: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(            return *this;\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(// ------------------------------------deprecated !----------------------------------------\n) Tj
ET
BT
15 54 Td
(//        void* stackaddr\(\)\n) Tj
ET
BT
15 43 Td
(//        {\n) Tj
ET

endstream
endobj
117 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [118 0 R ] /Parent 2 0 R >>
endobj
118 0 obj 
<</Length 4658 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/thread.h) Tj
ET
BT
565 822 Td
(38) Tj
ET
BT
15 780 Td
(//            if \(0 > pthread_attr_getstackaddr\(&attr_, &stack_.stackaddr_\)\)\n) Tj
ET
BT
15 769 Td
(//                std::cerr << "pthread_attr_getstackaddr: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 758 Td
(//\n) Tj
ET
BT
15 747 Td
(//            return stack_.stackaddr_;\n) Tj
ET
BT
15 736 Td
(//        }\n) Tj
ET
BT
15 725 Td
(//\n) Tj
ET
BT
15 714 Td
(//        ThrAttr& stackaddr\(void *stackaddr\)\n) Tj
ET
BT
15 703 Td
(//        {\n) Tj
ET
BT
15 692 Td
(//            stack_.stackaddr_ = &stackaddr;\n) Tj
ET
BT
15 681 Td
(//\n) Tj
ET
BT
15 670 Td
(//            if \(0 > pthread_attr_setstackaddr\(&attr_, stack_.stackaddr_\)\)\n) Tj
ET
BT
15 659 Td
(//                std::cerr << "pthread_attr_setstackaddr: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 648 Td
(//\n) Tj
ET
BT
15 637 Td
(//            return *this;\n) Tj
ET
BT
15 626 Td
(//        }\n) Tj
ET
BT
15 615 Td
(// ++++++++++++++++++++++++++++++++++++deprecated !++++++++++++++++++++++++++++++++++++++++\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        size_t stacksize\(\)\n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(            if \(0 > pthread_attr_getstacksize\(&attr_, &stack_.stacksize_\)\)\n) Tj
ET
BT
15 560 Td
(                std::cerr << "pthread_attr_getstacksize: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(            return stack_.stacksize_;\n) Tj
ET
BT
15 527 Td
(        }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        ThrAttr& stacksize\(size_t stacksize\)\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            stack_.stacksize_ = stacksize;\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(            if \(0 > pthread_attr_setstacksize\(&attr_, stack_.stacksize_\)\)\n) Tj
ET
BT
15 450 Td
(                std::cerr << "pthread_attr_setstacksize: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(            return *this;\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(    };\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(// Xdestroy            Xsetdetachstate     pthread_cleanup_push_defer_np   pthread_self\n) Tj
ET
BT
15 373 Td
(// Xgetaffinity_np     Xsetguardsize       pthread_create                  pthread_setaffinity_np\n) Tj
ET
BT
15 362 Td
(// Xgetdetachstate     Xsetinheritsched    pthread_detach                  pthread_setcancelstate\n) Tj
ET
BT
15 351 Td
(// Xgetguardsize       Xsetschedparam      pthread_equal                   pthread_setcanceltype\n) Tj
ET
BT
15 340 Td
(// Xgetinheritsched    Xsetschedpolicy     pthread_exit                    pthread_setconcurrency\n) Tj
ET
BT
15 329 Td
(// Xgetschedparam      Xsetscope           pthread_getaffinity_np          pthread_setschedparam\n) Tj
ET
BT
15 318 Td
(// Xgetschedpolicy     Xsetstack           pthread_getattr_np              pthread_setschedprio\n) Tj
ET
BT
15 307 Td
(// Xgetscope           Xsetstackaddr       pthread_getconcurrency          pthread_sigmask\n) Tj
ET
BT
15 296 Td
(// Xgetstack           Xsetstacksize       pthread_getcpuclockid           pthread_sigqueue\n) Tj
ET
BT
15 285 Td
(// Xgetstackaddr       pthread_cancel                  pthread_getschedparam           pthread_testcancel\n) Tj
ET
BT
15 274 Td
(// Xgetstacksize       pthread_cleanup_pop             pthread_join                    pthread_timedjoin_np\n) Tj
ET
BT
15 263 Td
(// Xinit               pthread_cleanup_pop_restore_np  pthread_kill                    pthread_tryjoin_np\n) Tj
ET
BT
15 252 Td
(// Xsetaffinity_np     pthread_cleanup_push            pthread_kill_other_threads_np   pthread_yield\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    class ThrCondAttr\n) Tj
ET
BT
15 219 Td
(    {\n) Tj
ET
BT
15 208 Td
(    protected:\n) Tj
ET
BT
15 197 Td
(        pthread_condattr_t cattr_;\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    public:\n) Tj
ET
BT
15 164 Td
(        ThrCondAttr\(\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(            if \(0 > pthread_condattr_init\(&cattr_\)\)\n) Tj
ET
BT
15 131 Td
(                std::cerr << "pthread_condattr_init: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        ~ThrCondAttr\(\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            if \(0 > pthread_condattr_destroy\(&cattr_\)\)\n) Tj
ET
BT
15 65 Td
(                std::cerr << "pthread_condattr_destroy: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
120 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [121 0 R ] /Parent 2 0 R >>
endobj
121 0 obj 
<</Length 2917 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/thread.h) Tj
ET
BT
565 822 Td
(39) Tj
ET
BT
15 780 Td
(        pthread_condattr_t& Attr\(\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            return cattr_;\n) Tj
ET
BT
15 747 Td
(        }\n) Tj
ET
BT
15 736 Td
(    };\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    class Mutex\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        pthread_mutex_t mutex_;\n) Tj
ET
BT
15 681 Td
(    };\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    class ThrCond\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        ThrCondAttr attr_;\n) Tj
ET
BT
15 626 Td
(        pthread_cond_t cond_;\n) Tj
ET
BT
15 615 Td
(        Mutex mutex_;\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        ThrCond\(\)\n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(            \n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        ~ThrCond\(\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(    };\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(    class Thread\n) Tj
ET
BT
15 461 Td
(    {\n) Tj
ET
BT
15 450 Td
(    protected:\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        pthread_t id_;\n) Tj
ET
BT
15 417 Td
(        ThrAttr attr_;\n) Tj
ET
BT
15 406 Td
(        void* \(*loop_\) \(void*\);\n) Tj
ET
BT
15 395 Td
(        void *arg_;\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    public:\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(\t\tThread\(\) : loop_\(0\), arg_\(0\)\n) Tj
ET
BT
15 340 Td
(\t\t{\n) Tj
ET
BT
15 329 Td
(\t\t}\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        Thread\(void* \(*loop\) \(void*\), void* arg = 0\)\n) Tj
ET
BT
15 296 Td
(        : loop_\(loop\), arg_\(arg\)\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(            if \(0 > pthread_create\(&id_, &attr_.Attr\(\), loop_, arg_\)\)\n) Tj
ET
BT
15 263 Td
(              std::cerr << "pthread_create: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 252 Td
(        }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(        ~Thread\(\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        pthread_t id\(\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            return id_;\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(//        Thread& add_cleanup\(void \(*routine\)\(void *\), void *arg, int n\)\n) Tj
ET
BT
15 120 Td
(//        {\n) Tj
ET
BT
15 109 Td
(//            pthread_cleanup_push\(routine, arg\)\n) Tj
ET
BT
15 98 Td
(//            pthread_cleanup_pop\(n\)\n) Tj
ET
BT
15 87 Td
(//            return *this;\n) Tj
ET
BT
15 76 Td
(//        }\n) Tj
ET
BT
15 65 Td
(        \n) Tj
ET
BT
15 54 Td
(        Thread& schedprio\(int prio\)\n) Tj
ET
BT
15 43 Td
(        {\n) Tj
ET

endstream
endobj
123 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [124 0 R ] /Parent 2 0 R >>
endobj
124 0 obj 
<</Length 2245 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/thread.h) Tj
ET
BT
565 822 Td
(40) Tj
ET
BT
15 780 Td
(            pthread_setschedprio\(id_, prio\);\n) Tj
ET
BT
15 769 Td
(            return *this;\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        Thread& concurrency\(int c\)\n) Tj
ET
BT
15 725 Td
(        {\n) Tj
ET
BT
15 714 Td
(            if \(0 > pthread_setconcurrency\(c\)\)\n) Tj
ET
BT
15 703 Td
(                std::cerr << "pthread_setconcurrency: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 692 Td
(            return *this;\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        int concurrency\(\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            return pthread_getconcurrency\(\);\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        friend bool operator== \(Thread &a, Thread &b\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            return pthread_equal\(a.id\(\), b.id\(\)\);\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        Thread& cancel\(\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            if \(0 > pthread_cancel\(id_\)\)\n) Tj
ET
BT
15 516 Td
(                std::cerr << "pthread_cancel: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 505 Td
(            return *this;\n) Tj
ET
BT
15 494 Td
(        }\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(        int join\(\)\n) Tj
ET
BT
15 461 Td
(        {\n) Tj
ET
BT
15 450 Td
(            void *ret;\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(            if \(0 > pthread_join\(id_, &ret\)\)\n) Tj
ET
BT
15 417 Td
(                std::cerr << "pthread_join: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 406 Td
(            std::cout << \(char*\)ret << '\\n';    \n) Tj
ET
BT
15 395 Td
(            return 0;\n) Tj
ET
BT
15 384 Td
(        }\n) Tj
ET
BT
15 373 Td
(    };\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    #define Thread\(f, a\) Thread\(reinterpret_cast<void* \(*\) \(void*\)>\(f\), \(void*\)a\)\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(} // namespace EasySip\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET

endstream
endobj
126 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [127 0 R ] /Parent 2 0 R >>
endobj
127 0 obj 
<</Length 3152 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/dialog.h) Tj
ET
BT
565 822 Td
(41) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/dialog.h\n) Tj
ET
BT
15 758 Td
( */\n) Tj
ET
BT
15 747 Td
(#include "message.h"\n) Tj
ET
BT
15 736 Td
(#include <algorithm>\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(namespace EasySip\n) Tj
ET
BT
15 703 Td
({\n) Tj
ET
BT
15 692 Td
(    class DialogId\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(        HFCallId call_id_;\n) Tj
ET
BT
15 659 Td
(        std::string local_tag_;\n) Tj
ET
BT
15 648 Td
(        std::string remote_tag_;\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    public:\n) Tj
ET
BT
15 615 Td
(        DialogId\(HFCallId& id, std::string ltag, std::string rtag\)\n) Tj
ET
BT
15 604 Td
(        : call_id_\(id\), local_tag_\(ltag\), remote_tag_\(rtag\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        DialogId\(\)\n) Tj
ET
BT
15 549 Td
(        {\n) Tj
ET
BT
15 538 Td
(        }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        HFCallId& call_id\(\)\n) Tj
ET
BT
15 505 Td
(        {\n) Tj
ET
BT
15 494 Td
(            return call_id_;\n) Tj
ET
BT
15 483 Td
(        }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        std::string& local_tag\(\)\n) Tj
ET
BT
15 450 Td
(        {\n) Tj
ET
BT
15 439 Td
(            return local_tag_;\n) Tj
ET
BT
15 428 Td
(        }\n) Tj
ET
BT
15 417 Td
(    \n) Tj
ET
BT
15 406 Td
(        std::string& remote_tag\(\)\n) Tj
ET
BT
15 395 Td
(        {\n) Tj
ET
BT
15 384 Td
(            return remote_tag_;\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(    \n) Tj
ET
BT
15 351 Td
(        void call_id\(HFCallId val\)\n) Tj
ET
BT
15 340 Td
(        {\n) Tj
ET
BT
15 329 Td
(            call_id_ = val;\n) Tj
ET
BT
15 318 Td
(        }\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        void local_tag\(std::string val\)\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(            local_tag_ = val;\n) Tj
ET
BT
15 263 Td
(        }\n) Tj
ET
BT
15 252 Td
(    \n) Tj
ET
BT
15 241 Td
(        void remote_tag\(std::string val\)\n) Tj
ET
BT
15 230 Td
(        {\n) Tj
ET
BT
15 219 Td
(            remote_tag_ = val;\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(    \n) Tj
ET
BT
15 186 Td
(        friend bool operator== \(DialogId a, DialogId b\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            if \(a.call_id\(\) == b.call_id\(\)\)\n) Tj
ET
BT
15 153 Td
(                if \(a.local_tag\(\) == b.local_tag\(\)\)\n) Tj
ET
BT
15 142 Td
(                    if \(a.remote_tag\(\) == b.remote_tag\(\)\)\n) Tj
ET
BT
15 131 Td
(                        return true;\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(            return false;\n) Tj
ET
BT
15 98 Td
(        }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        friend std::ostream& operator<< \(std::ostream &o, DialogId id\)\n) Tj
ET
BT
15 65 Td
(        {\n) Tj
ET
BT
15 54 Td
(            return o << id.call_id\(\)\n) Tj
ET
BT
15 43 Td
(                << "local_tag: " << id.local_tag\(\) << '\\n'\n) Tj
ET

endstream
endobj
129 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [130 0 R ] /Parent 2 0 R >>
endobj
130 0 obj 
<</Length 3021 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/dialog.h) Tj
ET
BT
565 822 Td
(42) Tj
ET
BT
15 780 Td
(                << "remote_tag: " << id.remote_tag\(\) << '\\n';\n) Tj
ET
BT
15 769 Td
(        }\n) Tj
ET
BT
15 758 Td
(    };\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(    class Dialog\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(        DialogId id_;\n) Tj
ET
BT
15 703 Td
(        HFCSeq local_seq_;\n) Tj
ET
BT
15 692 Td
(        HFCSeq remote_seq_;\n) Tj
ET
BT
15 681 Td
(        std::string local_uri_;\n) Tj
ET
BT
15 670 Td
(        std::string remote_uri_;\n) Tj
ET
BT
15 659 Td
(        ContactList remote_target_;\n) Tj
ET
BT
15 648 Td
(        bool secure_flag_;\n) Tj
ET
BT
15 637 Td
(        PtsOf<HFRecordRoute> routes_;\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(        bool confirmed_;\n) Tj
ET
BT
15 604 Td
(        bool still_ringing_;\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(    public:\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        Dialog\(\)\n) Tj
ET
BT
15 549 Td
(        : secure_flag_\(false\), confirmed_\(false\),\n) Tj
ET
BT
15 538 Td
(         still_ringing_\(false\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        Dialog\(Dialog &dia\);\n) Tj
ET
BT
15 483 Td
(        Dialog\(ResponseMessage &in_msg\);\n) Tj
ET
BT
15 472 Td
(        Dialog\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        DialogId& id\(\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(            return id_;\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        HFCSeq& local_seq\(\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(            return local_seq_;\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        HFCSeq& remote_seq\(\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            return remote_seq_;\n) Tj
ET
BT
15 307 Td
(        }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        std::string& local_uri\(\)\n) Tj
ET
BT
15 274 Td
(        {\n) Tj
ET
BT
15 263 Td
(            return local_uri_;\n) Tj
ET
BT
15 252 Td
(        }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(        std::string& remote_uri\(\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(            return remote_uri_;\n) Tj
ET
BT
15 197 Td
(        }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        ContactList& remote_target\(\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            return remote_target_;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        bool& secure_flag\(\)\n) Tj
ET
BT
15 109 Td
(        {\n) Tj
ET
BT
15 98 Td
(            return secure_flag_;\n) Tj
ET
BT
15 87 Td
(        }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        PtsOf<HFRecordRoute>& routes\(\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(            return routes_;\n) Tj
ET

endstream
endobj
132 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [133 0 R ] /Parent 2 0 R >>
endobj
133 0 obj 
<</Length 2940 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/dialog.h) Tj
ET
BT
565 822 Td
(43) Tj
ET
BT
15 780 Td
(        }\n) Tj
ET
BT
15 769 Td
(        \n) Tj
ET
BT
15 758 Td
(        void id\(DialogId val\)\n) Tj
ET
BT
15 747 Td
(        {\n) Tj
ET
BT
15 736 Td
(            id_ = val;\n) Tj
ET
BT
15 725 Td
(        }\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(        void local_seq\(HFCSeq val\)  \n) Tj
ET
BT
15 692 Td
(        {\n) Tj
ET
BT
15 681 Td
(            local_seq_ = val;\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        void remote_seq\(HFCSeq val\)  \n) Tj
ET
BT
15 637 Td
(        {\n) Tj
ET
BT
15 626 Td
(            remote_seq_ = val;\n) Tj
ET
BT
15 615 Td
(        }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        void local_uri\(std::string val\) \n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(            local_uri_ = val;\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        void remote_uri\(std::string val\) \n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(            remote_uri_ = val;\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        void remote_target\(ContactList val\) \n) Tj
ET
BT
15 472 Td
(        {\n) Tj
ET
BT
15 461 Td
(            remote_target_ = val;\n) Tj
ET
BT
15 450 Td
(        }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        void secure_flag\(bool val\)    \n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            secure_flag_ = val;\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        void routes\(PtsOf<HFRecordRoute> val\) \n) Tj
ET
BT
15 362 Td
(        {\n) Tj
ET
BT
15 351 Td
(            routes_ = val;\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        void is_confirmed\(bool c\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            confirmed_ = c;\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        bool is_confirmed\(\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(            return confirmed_;\n) Tj
ET
BT
15 230 Td
(        }\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        bool still_ringing\(\)\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(            return still_ringing_;\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        void still_ringing\(bool ring\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            still_ringing_ = ring;\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        friend std::ostream& operator<< \(std::ostream &o, Dialog &dia\);\n) Tj
ET
BT
15 87 Td
(    };\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    class Dialogs : public PtsOf<Dialog>\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(    public:\n) Tj
ET

endstream
endobj
135 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [136 0 R ] /Parent 2 0 R >>
endobj
136 0 obj 
<</Length 938 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/dialog.h) Tj
ET
BT
565 822 Td
(44) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        Dialog* create_dialog\(\);\n) Tj
ET
BT
15 758 Td
(        Dialog* create_dialog\(Dialog &dialog\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        void cancel_dialog\(DialogId val\);\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        Dialog* get_dialog_by_id\(DialogId &val\);\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        Dialog* operator[] \(DialogId val\);\n) Tj
ET
BT
15 681 Td
(    };\n) Tj
ET
BT
15 670 Td
(} // namespace EasySip\n) Tj
ET
BT
15 659 Td
(        \n) Tj
ET
BT
15 648 Td
(          \n) Tj
ET
BT
15 637 Td
(          \n) Tj
ET
BT
15 626 Td
(          \n) Tj
ET
BT
15 615 Td
(          \n) Tj
ET
BT
15 604 Td
(          \n) Tj
ET
BT
15 593 Td
(          \n) Tj
ET
BT
15 582 Td
(          \n) Tj
ET
BT
15 571 Td
(  \n) Tj
ET

endstream
endobj
138 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [139 0 R ] /Parent 2 0 R >>
endobj
139 0 obj 
<</Length 2715 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/transaction.h) Tj
ET
BT
565 822 Td
(45) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/transaction.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "utils.h"\n) Tj
ET
BT
15 692 Td
(#include "except.h"\n) Tj
ET
BT
15 681 Td
(#include "timer.h"\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(namespace EasySip\n) Tj
ET
BT
15 648 Td
({\n) Tj
ET
BT
15 637 Td
(    enum\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        T_FSM_CALLING,\n) Tj
ET
BT
15 604 Td
(        T_FSM_TRYING,\n) Tj
ET
BT
15 593 Td
(        T_FSM_PROCEEDING,\n) Tj
ET
BT
15 582 Td
(        T_FSM_COMPLETED,\n) Tj
ET
BT
15 571 Td
(        T_FSM_CONFIRMED,\n) Tj
ET
BT
15 560 Td
(        T_FSM_TERMINATED,\n) Tj
ET
BT
15 549 Td
(    };\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(    class Fsm// : public Thread\n) Tj
ET
BT
15 516 Td
(    {\n) Tj
ET
BT
15 505 Td
(    protected:\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        int state_;\n) Tj
ET
BT
15 472 Td
(        bool run_;\n) Tj
ET
BT
15 461 Td
(\t\tThread t_;\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    public:\n) Tj
ET
BT
15 428 Td
(        Fsm\(int s, bool r = true\) : state_\(s\), run_\(r\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            setup\(\);\n) Tj
ET
BT
15 395 Td
(            t_ = Thread\(&Fsm::main_loop, this\);\n) Tj
ET
BT
15 384 Td
(        }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        ~Fsm\(\)\n) Tj
ET
BT
15 351 Td
(        {\n) Tj
ET
BT
15 340 Td
(\t\t\tt_.join\(\);\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        void run\(bool r\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(            run_ = r;\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        bool run\(\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            return run_;\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        int state\(\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(            return state_;\n) Tj
ET
BT
15 164 Td
(        }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        void state\(int s\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(            state_ = s;\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        Fsm& setup\(\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            return *this;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
141 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [142 0 R ] /Parent 2 0 R >>
endobj
142 0 obj 
<</Length 1391 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/transaction.h) Tj
ET
BT
565 822 Td
(46) Tj
ET
BT
15 780 Td
(        int loop\(\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            return \(run_ = false\);\n) Tj
ET
BT
15 747 Td
(        }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(        int main_loop\(\)\n) Tj
ET
BT
15 714 Td
(        {\n) Tj
ET
BT
15 703 Td
(            while \(run_\)\n) Tj
ET
BT
15 692 Td
(            {\n) Tj
ET
BT
15 681 Td
(                if \(loop\(\) == PROCEDURE_ERROR\)\n) Tj
ET
BT
15 670 Td
(                    return PROCEDURE_ERROR;\n) Tj
ET
BT
15 659 Td
(            }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(            return PROCEDURE_OK;\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(    };\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    class Transaction : public Fsm\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(    public:\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        Transaction\(\) : Fsm\(T_FSM_CALLING\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(        }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    protected:\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        virtual int loop\(\);\n) Tj
ET
BT
15 472 Td
(    };\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(}; // namespace EasySip\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET

endstream
endobj
144 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [145 0 R ] /Parent 2 0 R >>
endobj
145 0 obj 
<</Length 3284 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/socket.h) Tj
ET
BT
565 822 Td
(47) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/socket.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(#include <memory>\n) Tj
ET
BT
15 681 Td
(#include <unistd.h>\n) Tj
ET
BT
15 670 Td
(#include <sys/types.h>\n) Tj
ET
BT
15 659 Td
(#include <sys/socket.h>\n) Tj
ET
BT
15 648 Td
(#include <netinet/in.h>\n) Tj
ET
BT
15 637 Td
(#include <arpa/inet.h>\n) Tj
ET
BT
15 626 Td
(#include <ifaddrs.h>\n) Tj
ET
BT
15 615 Td
(#include <error.h>\n) Tj
ET
BT
15 604 Td
(#include <string.h>\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(#include "except.h"\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(namespace EasySip\n) Tj
ET
BT
15 549 Td
({\n) Tj
ET
BT
15 538 Td
(    /*\n) Tj
ET
BT
15 527 Td
(     * domain:\n) Tj
ET
BT
15 516 Td
(     * AF_UNIX, AF_LOCAL    Local communication              unix\(7\)\n) Tj
ET
BT
15 505 Td
(     * AF_INET             IPv4 Internet protocols          ip\(7\)\n) Tj
ET
BT
15 494 Td
(     * AF_INET6            IPv6 Internet protocols          ipv6\(7\)\n) Tj
ET
BT
15 483 Td
(     * AF_IPX              IPX - Novell protocols\n) Tj
ET
BT
15 472 Td
(     * AF_NETLINK          Kernel user interface device     netlink\(7\)\n) Tj
ET
BT
15 461 Td
(     * AF_X25              ITU-T X.25 / ISO-8208 protocol    x25\(7\)\n) Tj
ET
BT
15 450 Td
(     * AF_AX25             Amateur radio AX.25 protocol\n) Tj
ET
BT
15 439 Td
(     * AF_ATMPVC            Access to raw ATM PVCs\n) Tj
ET
BT
15 428 Td
(     * AF_APPLETALK        Appletalk                        ddp\(7\)\n) Tj
ET
BT
15 417 Td
(     * AF_PACKET            Low level packet interface        packet\(7\)\n) Tj
ET
BT
15 406 Td
(     *\n) Tj
ET
BT
15 395 Td
(     * type:\n) Tj
ET
BT
15 384 Td
(     * SOCK_STREAM\n) Tj
ET
BT
15 373 Td
(     * SOCK_DGRAM\n) Tj
ET
BT
15 362 Td
(     * SOCK_SEQPACKET\n) Tj
ET
BT
15 351 Td
(     * SOCK_RAW\n) Tj
ET
BT
15 340 Td
(     * SOCK_RDM\n) Tj
ET
BT
15 329 Td
(     * SOCK_PACKET\n) Tj
ET
BT
15 318 Td
(     * SOCK_NONBLOCK\n) Tj
ET
BT
15 307 Td
(     * SOCK_CLOEXEC\n) Tj
ET
BT
15 296 Td
(    */\n) Tj
ET
BT
15 285 Td
(    class Socket\n) Tj
ET
BT
15 274 Td
(    {\n) Tj
ET
BT
15 263 Td
(    protected:\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(        int sk_;\n) Tj
ET
BT
15 230 Td
(        int domain_;\n) Tj
ET
BT
15 219 Td
(        int type_;\n) Tj
ET
BT
15 208 Td
(        int proto_;\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    public:\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(        static std::string get_ip_addr\(\);\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        Socket\(\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        Socket\(int domain, int type, int proto\)\n) Tj
ET
BT
15 87 Td
(        : domain_\(domain\), type_\(type\), proto_\(proto\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            sk_ = socket\(domain_, type_, proto_\);\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(            // TODO: throw exception\n) Tj
ET

endstream
endobj
147 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [148 0 R ] /Parent 2 0 R >>
endobj
148 0 obj 
<</Length 3206 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/socket.h) Tj
ET
BT
565 822 Td
(48) Tj
ET
BT
15 780 Td
(            if \(0 > sk_\)\n) Tj
ET
BT
15 769 Td
(                std::cerr << "socket: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 758 Td
(        }    \n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        ~Socket\(\)\n) Tj
ET
BT
15 725 Td
(        {\n) Tj
ET
BT
15 714 Td
(            if \(0 < sk_\)\n) Tj
ET
BT
15 703 Td
(                close\(sk_\);\n) Tj
ET
BT
15 692 Td
(        }\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(        int set_timeout\(int sec\);\n) Tj
ET
BT
15 659 Td
(    };\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    class SocketIp4 : public Socket\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(    protected:\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        struct sockaddr_in sk_addr_;\n) Tj
ET
BT
15 582 Td
(        std::string addr_;\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        struct sockaddr_in self_sk_addr_;\n) Tj
ET
BT
15 549 Td
(        std::string self_addr_;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        std::string msg_;\n) Tj
ET
BT
15 516 Td
(        int max_rx_;\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(    public:\n) Tj
ET
BT
15 483 Td
(        SocketIp4\(int type, int proto = 0\)\n) Tj
ET
BT
15 472 Td
(        : Socket\(PF_INET, type, proto\)\n) Tj
ET
BT
15 461 Td
(        {\n) Tj
ET
BT
15 450 Td
(            sk_addr_.sin_family = AF_INET;\n) Tj
ET
BT
15 439 Td
(            sk_addr_.sin_port = htons\(0\);\n) Tj
ET
BT
15 428 Td
(            sk_addr_.sin_addr.s_addr = htonl\(INADDR_ANY\);\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(            self_sk_addr_.sin_family = AF_INET;\n) Tj
ET
BT
15 395 Td
(            self_sk_addr_.sin_port = htons\(0\);\n) Tj
ET
BT
15 384 Td
(            self_sk_addr_.sin_addr.s_addr = htonl\(INADDR_ANY\);\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(            max_rx_ = 1024;\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(            set_timeout\(3\);\n) Tj
ET
BT
15 329 Td
(        }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        int Port\(\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(            return ntohs\(sk_addr_.sin_port\);\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        void Port\(int port\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            sk_addr_.sin_port = htons\(port\);\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        std::string& Addr\(\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(            return addr_;\n) Tj
ET
BT
15 164 Td
(        }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        void Addr\(std::string addr\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(            addr_ = addr;\n) Tj
ET
BT
15 109 Td
(            inet_aton\(addr_.c_str\(\), \(in_addr*\)&sk_addr_.sin_addr.s_addr\);\n) Tj
ET
BT
15 98 Td
(        }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        int SelfPort\(\)\n) Tj
ET
BT
15 65 Td
(        {\n) Tj
ET
BT
15 54 Td
(            return ntohs\(self_sk_addr_.sin_port\);\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
150 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [151 0 R ] /Parent 2 0 R >>
endobj
151 0 obj 
<</Length 3073 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/socket.h) Tj
ET
BT
565 822 Td
(49) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        void SelfPort\(int port\)\n) Tj
ET
BT
15 758 Td
(        {\n) Tj
ET
BT
15 747 Td
(            self_sk_addr_.sin_port = htons\(port\);\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        std::string SelfAddr\(\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            return self_addr_;\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        void SelfAddr\(std::string addr\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            self_addr_ = addr;\n) Tj
ET
BT
15 626 Td
(            inet_aton\(self_addr_.c_str\(\), \(in_addr*\)&self_sk_addr_.sin_addr.s_addr\);\n) Tj
ET
BT
15 615 Td
(        }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        std::string& Message\(\)\n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(            return msg_;\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        void Message\(std::string msg\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(            msg_ = msg;\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        void clear_msg\(\)\n) Tj
ET
BT
15 472 Td
(        {\n) Tj
ET
BT
15 461 Td
(            msg_.clear\(\);\n) Tj
ET
BT
15 450 Td
(        }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        int MaxRx\(\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            return max_rx_;\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        void MaxRx\(int max\)\n) Tj
ET
BT
15 362 Td
(        {\n) Tj
ET
BT
15 351 Td
(            max_rx_ = max;\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        ~SocketIp4\(\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        friend std::ostream& operator<< \(std::ostream &o, SocketIp4 sk\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            return o << sk.SelfAddr\(\) << ":" << sk.SelfPort\(\) << '\\n'\n) Tj
ET
BT
15 241 Td
(                << sk.Addr\(\) << ":" << sk.Port\(\);\n) Tj
ET
BT
15 230 Td
(        }\n) Tj
ET
BT
15 219 Td
(    };\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(    class SocketIp4UDP : public SocketIp4\n) Tj
ET
BT
15 186 Td
(    {\n) Tj
ET
BT
15 175 Td
(        bool binded_;\n) Tj
ET
BT
15 164 Td
(        bool need_bind_;\n) Tj
ET
BT
15 153 Td
(    public:\n) Tj
ET
BT
15 142 Td
(        SocketIp4UDP\(\);\n) Tj
ET
BT
15 131 Td
(        SocketIp4UDP\(std::string addr, int port\);\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        ~SocketIp4UDP\(\);\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        int setup_server\(\);\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        void send_buffer\(const std::string msg\);\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        int recv_buffer\(int selfloop = 1\);\n) Tj
ET

endstream
endobj
153 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [154 0 R ] /Parent 2 0 R >>
endobj
154 0 obj 
<</Length 971 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/socket.h) Tj
ET
BT
565 822 Td
(50) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        void Bind\(bool b\)\n) Tj
ET
BT
15 758 Td
(        {\n) Tj
ET
BT
15 747 Td
(            binded_ = b;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        void NeedBind\(bool b\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            need_bind_ = b;\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        bool Bind\(\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            return binded_;\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        bool NeedBind\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            return need_bind_;\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(    };\n) Tj
ET
BT
15 549 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
156 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [157 0 R ] /Parent 2 0 R >>
endobj
157 0 obj 
<</Length 3419 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/utils.h) Tj
ET
BT
565 822 Td
(51) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/utils.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include <sstream>\n) Tj
ET
BT
15 692 Td
(#include <set>\n) Tj
ET
BT
15 681 Td
(#include <map>\n) Tj
ET
BT
15 670 Td
(#include <vector>\n) Tj
ET
BT
15 659 Td
(#include <iostream>\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(namespace EasySip\n) Tj
ET
BT
15 626 Td
({\n) Tj
ET
BT
15 615 Td
(    #define CASE_UPPER_ALPHA \\\n) Tj
ET
BT
15 604 Td
(                case 'A': \\\n) Tj
ET
BT
15 593 Td
(                case 'B': \\\n) Tj
ET
BT
15 582 Td
(                case 'C': \\\n) Tj
ET
BT
15 571 Td
(                case 'D': \\\n) Tj
ET
BT
15 560 Td
(                case 'E': \\\n) Tj
ET
BT
15 549 Td
(                case 'F': \\\n) Tj
ET
BT
15 538 Td
(                case 'G': \\\n) Tj
ET
BT
15 527 Td
(                case 'H': \\\n) Tj
ET
BT
15 516 Td
(                case 'I': \\\n) Tj
ET
BT
15 505 Td
(                case 'J': \\\n) Tj
ET
BT
15 494 Td
(                case 'K': \\\n) Tj
ET
BT
15 483 Td
(                case 'L': \\\n) Tj
ET
BT
15 472 Td
(                case 'M': \\\n) Tj
ET
BT
15 461 Td
(                case 'N': \\\n) Tj
ET
BT
15 450 Td
(                case 'O': \\\n) Tj
ET
BT
15 439 Td
(                case 'P': \\\n) Tj
ET
BT
15 428 Td
(                case 'Q': \\\n) Tj
ET
BT
15 417 Td
(                case 'R': \\\n) Tj
ET
BT
15 406 Td
(                case 'S': \\\n) Tj
ET
BT
15 395 Td
(                case 'T': \\\n) Tj
ET
BT
15 384 Td
(                case 'U': \\\n) Tj
ET
BT
15 373 Td
(                case 'V': \\\n) Tj
ET
BT
15 362 Td
(                case 'W': \\\n) Tj
ET
BT
15 351 Td
(                case 'X': \\\n) Tj
ET
BT
15 340 Td
(                case 'Y': \\\n) Tj
ET
BT
15 329 Td
(                case 'Z':\n) Tj
ET
BT
15 318 Td
(    #define CASE_LOWER_ALPHA \\\n) Tj
ET
BT
15 307 Td
(                case 'a': \\\n) Tj
ET
BT
15 296 Td
(                case 'b': \\\n) Tj
ET
BT
15 285 Td
(                case 'c': \\\n) Tj
ET
BT
15 274 Td
(                case 'd': \\\n) Tj
ET
BT
15 263 Td
(                case 'e': \\\n) Tj
ET
BT
15 252 Td
(                case 'f': \\\n) Tj
ET
BT
15 241 Td
(                case 'g': \\\n) Tj
ET
BT
15 230 Td
(                case 'h': \\\n) Tj
ET
BT
15 219 Td
(                case 'i': \\\n) Tj
ET
BT
15 208 Td
(                case 'j': \\\n) Tj
ET
BT
15 197 Td
(                case 'k': \\\n) Tj
ET
BT
15 186 Td
(                case 'l': \\\n) Tj
ET
BT
15 175 Td
(                case 'm': \\\n) Tj
ET
BT
15 164 Td
(                case 'n': \\\n) Tj
ET
BT
15 153 Td
(                case 'o': \\\n) Tj
ET
BT
15 142 Td
(                case 'p': \\\n) Tj
ET
BT
15 131 Td
(                case 'q': \\\n) Tj
ET
BT
15 120 Td
(                case 'r': \\\n) Tj
ET
BT
15 109 Td
(                case 's': \\\n) Tj
ET
BT
15 98 Td
(                case 't': \\\n) Tj
ET
BT
15 87 Td
(                case 'u': \\\n) Tj
ET
BT
15 76 Td
(                case 'v': \\\n) Tj
ET
BT
15 65 Td
(                case 'w': \\\n) Tj
ET
BT
15 54 Td
(                case 'x': \\\n) Tj
ET
BT
15 43 Td
(                case 'y': \\\n) Tj
ET

endstream
endobj
159 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [160 0 R ] /Parent 2 0 R >>
endobj
160 0 obj 
<</Length 3552 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/utils.h) Tj
ET
BT
565 822 Td
(52) Tj
ET
BT
15 780 Td
(                case 'z':\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(    #define CASE_ALPHA \\\n) Tj
ET
BT
15 747 Td
(            CASE_UPPER_ALPHA \\\n) Tj
ET
BT
15 736 Td
(            CASE_LOWER_ALPHA \n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    #define CASE_DIGIT \\\n) Tj
ET
BT
15 703 Td
(                case '1': \\\n) Tj
ET
BT
15 692 Td
(                case '2': \\\n) Tj
ET
BT
15 681 Td
(                case '3': \\\n) Tj
ET
BT
15 670 Td
(                case '4': \\\n) Tj
ET
BT
15 659 Td
(                case '5': \\\n) Tj
ET
BT
15 648 Td
(                case '6': \\\n) Tj
ET
BT
15 637 Td
(                case '7': \\\n) Tj
ET
BT
15 626 Td
(                case '8': \\\n) Tj
ET
BT
15 615 Td
(                case '9': \\\n) Tj
ET
BT
15 604 Td
(                case '0': \n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(    #define CASE_ALPHA_NUM \\\n) Tj
ET
BT
15 571 Td
(            CASE_ALPHA \\\n) Tj
ET
BT
15 560 Td
(            CASE_DIGIT \n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    #define CASE_TOKEN \\\n) Tj
ET
BT
15 527 Td
(                CASE_ALPHA_NUM \\\n) Tj
ET
BT
15 516 Td
(                case '-': \\\n) Tj
ET
BT
15 505 Td
(                case '.': \\\n) Tj
ET
BT
15 494 Td
(                case '!': \\\n) Tj
ET
BT
15 483 Td
(                case '%': \\\n) Tj
ET
BT
15 472 Td
(                case '*': \\\n) Tj
ET
BT
15 461 Td
(                case '_': \\\n) Tj
ET
BT
15 450 Td
(                case '+': \\\n) Tj
ET
BT
15 439 Td
(                case 39: \\\n) Tj
ET
BT
15 428 Td
(                case '~':\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(    #define CASE_WORD \\\n) Tj
ET
BT
15 395 Td
(                CASE_TOKEN \\\n) Tj
ET
BT
15 384 Td
(                case '\(': \\\n) Tj
ET
BT
15 373 Td
(                case '\)': \\\n) Tj
ET
BT
15 362 Td
(                case '<': \\\n) Tj
ET
BT
15 351 Td
(                case '>': \\\n) Tj
ET
BT
15 340 Td
(                case ':': \\\n) Tj
ET
BT
15 329 Td
(                case 92: \\\n) Tj
ET
BT
15 318 Td
(                case 34: \\\n) Tj
ET
BT
15 307 Td
(                case '/': \\\n) Tj
ET
BT
15 296 Td
(                case '[': \\\n) Tj
ET
BT
15 285 Td
(                case ']': \\\n) Tj
ET
BT
15 274 Td
(                case '?': \\\n) Tj
ET
BT
15 263 Td
(                case '{': \\\n) Tj
ET
BT
15 252 Td
(                case '}': \n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    #define do_if_is_alpha\(c, f\)     \\\n) Tj
ET
BT
15 219 Td
(    {                                \\\n) Tj
ET
BT
15 208 Td
(        std::locale loc;            \\\n) Tj
ET
BT
15 197 Td
(        if \(std::isalpha\(c, loc\)\) { f; }    \\\n) Tj
ET
BT
15 186 Td
(    }\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(    enum\n) Tj
ET
BT
15 153 Td
(    {\n) Tj
ET
BT
15 142 Td
(        PROCEDURE_OK,        // everything's normal\n) Tj
ET
BT
15 131 Td
(        MESSAGE_PROCESSED,    // message issue, but handled\n) Tj
ET
BT
15 120 Td
(        PROCEDURE_ERROR,    // something wrong, unhandled\n) Tj
ET
BT
15 109 Td
(    };\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(    #define PROGRESS_WITH_FEEDBACK\(opr, cond, p\)\\\n) Tj
ET
BT
15 76 Td
(    {                                    \\\n) Tj
ET
BT
15 65 Td
(        std::cout << opr;                \\\n) Tj
ET
BT
15 54 Td
(        while \(cond\)                    \\\n) Tj
ET
BT
15 43 Td
(        {                                \\\n) Tj
ET

endstream
endobj
162 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [163 0 R ] /Parent 2 0 R >>
endobj
163 0 obj 
<</Length 2896 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/utils.h) Tj
ET
BT
565 822 Td
(53) Tj
ET
BT
15 780 Td
(            std::cout << " ..."; p;        \\\n) Tj
ET
BT
15 769 Td
(        }                                \\\n) Tj
ET
BT
15 758 Td
(        std::cout << "\\n";                \\\n) Tj
ET
BT
15 747 Td
(    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    template<typename T>\n) Tj
ET
BT
15 714 Td
(    T& RefOf\(T& t\) { return t; }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    template<typename T>\n) Tj
ET
BT
15 681 Td
(    class PtsOf : public std::vector<T*>\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(    public:\n) Tj
ET
BT
15 648 Td
(        PtsOf\(\)\n) Tj
ET
BT
15 637 Td
(        {\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        void append_item\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            this->push_back\(new T\);\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        void append_item\(T &it\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            this->push_back\(new T\(it\)\);\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        T* first\(\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            return this->at\(0\);\n) Tj
ET
BT
15 461 Td
(        }\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        T* last\(\)\n) Tj
ET
BT
15 428 Td
(        {\n) Tj
ET
BT
15 417 Td
(            return this->at\(this->size\(\)-1\);\n) Tj
ET
BT
15 406 Td
(        }\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(        friend std::ostream& operator<< \(std::ostream &o, PtsOf<T> &pts\)\n) Tj
ET
BT
15 373 Td
(        {\n) Tj
ET
BT
15 362 Td
(            for \(auto &it : pts\)\n) Tj
ET
BT
15 351 Td
(            {\n) Tj
ET
BT
15 340 Td
(                o << *it;\n) Tj
ET
BT
15 329 Td
(            }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(            return o;\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(    };\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    class CodeMap : public std::pair<int, std::string>\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(    public:\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        void Code\(int c\)\n) Tj
ET
BT
15 208 Td
(        {\n) Tj
ET
BT
15 197 Td
(            first = c;\n) Tj
ET
BT
15 186 Td
(        }\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(        void name\(std::string n\)\n) Tj
ET
BT
15 153 Td
(        {\n) Tj
ET
BT
15 142 Td
(            second = n;\n) Tj
ET
BT
15 131 Td
(        }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(    public:\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        int code\(\) const\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            return first;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
165 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [166 0 R ] /Parent 2 0 R >>
endobj
166 0 obj 
<</Length 2784 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/utils.h) Tj
ET
BT
565 822 Td
(54) Tj
ET
BT
15 780 Td
(        std::string name\(\) const\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            return second;\n) Tj
ET
BT
15 747 Td
(        }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(        CodeMap\(\)\n) Tj
ET
BT
15 714 Td
(        {\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        CodeMap\(int c\)\n) Tj
ET
BT
15 670 Td
(        {\n) Tj
ET
BT
15 659 Td
(            first = c;\n) Tj
ET
BT
15 648 Td
(        }\n) Tj
ET
BT
15 637 Td
(    \n) Tj
ET
BT
15 626 Td
(        CodeMap\(std::string n\)\n) Tj
ET
BT
15 615 Td
(        {\n) Tj
ET
BT
15 604 Td
(            second = n;\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(        CodeMap\(int c, std::string n\)\n) Tj
ET
BT
15 560 Td
(        {\n) Tj
ET
BT
15 549 Td
(            first = c;\n) Tj
ET
BT
15 538 Td
(            second = n;\n) Tj
ET
BT
15 527 Td
(        }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        std::string CodeStr\(\) const\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            std::ostringstream o;\n) Tj
ET
BT
15 472 Td
(            o << first;\n) Tj
ET
BT
15 461 Td
(            return o.str\(\);\n) Tj
ET
BT
15 450 Td
(        }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        bool operator< \(CodeMap cm\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            return \(first < cm.first\);\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(    \n) Tj
ET
BT
15 373 Td
(        bool operator== \(const CodeMap &cm\)\n) Tj
ET
BT
15 362 Td
(        {\n) Tj
ET
BT
15 351 Td
(            return \(\(first == cm.first \) && \(second == cm.second\)\);\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        friend std::ostream& operator<< \(std::ostream &o, CodeMap cm\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            o << cm.first << " " << cm.second;\n) Tj
ET
BT
15 285 Td
(            return o;\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        std::string operator\(\) \(\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            std::ostringstream o;\n) Tj
ET
BT
15 219 Td
(            o << first << " " << second << '\\n';\n) Tj
ET
BT
15 208 Td
(            return o.str\(\);\n) Tj
ET
BT
15 197 Td
(        }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        void operator\(\) \(CodeMap &cm\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            *this = cm;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(    };\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(} // namespace EasiSip\n) Tj
ET

endstream
endobj
168 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [169 0 R ] /Parent 2 0 R >>
endobj
169 0 obj 
<</Length 2983 >>
stream
/F1 10 Tf
BT
121.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/request_message.h) Tj
ET
BT
565 822 Td
(55) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/request_message.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "parameter.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\n) Tj
ET
BT
15 659 Td
(    typedef CodeMap MethodMap;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    enum\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        METHOD_ID_INVITE,\n) Tj
ET
BT
15 604 Td
(        METHOD_ID_CANCEL,\n) Tj
ET
BT
15 593 Td
(        METHOD_ID_ACK,\n) Tj
ET
BT
15 582 Td
(        METHOD_ID_BYE,\n) Tj
ET
BT
15 571 Td
(        METHOD_ID_REGISTER,\n) Tj
ET
BT
15 560 Td
(        METHOD_ID_OPTIONS,\n) Tj
ET
BT
15 549 Td
(        METHOD_ID_SUBSCRIBE,\n) Tj
ET
BT
15 538 Td
(        METHOD_ID_NOTIFY,\n) Tj
ET
BT
15 527 Td
(        METHOD_ID_MESSAGE,\n) Tj
ET
BT
15 516 Td
(        METHOD_ID_INFO,\n) Tj
ET
BT
15 505 Td
(        METHOD_ID_UPDATE,\n) Tj
ET
BT
15 494 Td
(        METHOD_ID_REFER,\n) Tj
ET
BT
15 483 Td
(        METHOD_ID_PRACK,\n) Tj
ET
BT
15 472 Td
(    };\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    // Requests since SIP 1.0\n) Tj
ET
BT
15 439 Td
(    // RFC-3261\n) Tj
ET
BT
15 428 Td
(    const MethodMap METHOD_INVITE\(METHOD_ID_INVITE, "INVITE"\);\n) Tj
ET
BT
15 417 Td
(    const MethodMap METHOD_CANCEL\(METHOD_ID_CANCEL, "CANCEL"\);\n) Tj
ET
BT
15 406 Td
(    const MethodMap METHOD_ACK\(METHOD_ID_ACK, "ACK"\);\n) Tj
ET
BT
15 395 Td
(    const MethodMap METHOD_BYE\(METHOD_ID_BYE, "BYE"\);\n) Tj
ET
BT
15 384 Td
(    const MethodMap METHOD_REGISTER\(METHOD_ID_REGISTER, "REGISTER"\);\n) Tj
ET
BT
15 373 Td
(    const MethodMap METHOD_OPTIONS\(METHOD_ID_OPTIONS, "OPTIONS"\);\n) Tj
ET
BT
15 362 Td
(    // Additional requests since SIP 2.0\n) Tj
ET
BT
15 351 Td
(    // RFC-6665\n) Tj
ET
BT
15 340 Td
(    const MethodMap METHOD_SUBSCRIBE\(METHOD_ID_SUBSCRIBE, "SUBSCRIBE"\);\n) Tj
ET
BT
15 329 Td
(    const MethodMap METHOD_NOTIFY\(METHOD_ID_NOTIFY, "NOTIFY"\);\n) Tj
ET
BT
15 318 Td
(    const MethodMap METHOD_MESSAGE\(METHOD_ID_MESSAGE, "MESSAGE"\);\n) Tj
ET
BT
15 307 Td
(    // RFC-6086\n) Tj
ET
BT
15 296 Td
(    const MethodMap METHOD_INFO\(METHOD_ID_INFO, "INFO"\);\n) Tj
ET
BT
15 285 Td
(    // RFC-3311\n) Tj
ET
BT
15 274 Td
(    const MethodMap METHOD_UPDATE\(METHOD_ID_UPDATE, "UPDATE"\);\n) Tj
ET
BT
15 263 Td
(    // RFC-3515\n) Tj
ET
BT
15 252 Td
(    const MethodMap METHOD_REFER\(METHOD_ID_REFER, "REFER"\);\n) Tj
ET
BT
15 241 Td
(    // RFC-3262\n) Tj
ET
BT
15 230 Td
(    const MethodMap METHOD_PRACK\(METHOD_ID_PRACK, "PRACK"\);\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(    typedef std::set<MethodMap> MethodMapList;\n) Tj
ET
BT
15 197 Td
(} // namespace EasiSip\n) Tj
ET

endstream
endobj
171 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [172 0 R ] /Parent 2 0 R >>
endobj
172 0 obj 
<</Length 1336 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/except.h) Tj
ET
BT
565 822 Td
(56) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/except.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include <string.h>\n) Tj
ET
BT
15 692 Td
(#include <stdexcept>\n) Tj
ET
BT
15 681 Td
(#include <iostream>\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(namespace EasySip\n) Tj
ET
BT
15 648 Td
({\n) Tj
ET
BT
15 637 Td
(    class Except : std::exception\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(    protected:\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        std::string msg_;\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    public:\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        Except\(\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(        }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        Except\(std::string msg\)\n) Tj
ET
BT
15 494 Td
(        : msg_\(msg\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        virtual const char* what\(\);\n) Tj
ET
BT
15 439 Td
(    };\n) Tj
ET
BT
15 428 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
174 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [175 0 R ] /Parent 2 0 R >>
endobj
175 0 obj 
<</Length 962 >>
stream
/F1 10 Tf
BT
121 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/Element/uaserver.h) Tj
ET
BT
565 822 Td
(57) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/Element/uaserver.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "Element/element.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\n) Tj
ET
BT
15 659 Td
(\tclass UAServer : public Element\n) Tj
ET
BT
15 648 Td
(\t{\n) Tj
ET
BT
15 637 Td
(\tpublic:\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(\t\tUAServer\(\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\t\t~UAServer\(\)\n) Tj
ET
BT
15 582 Td
(\t\t{\n) Tj
ET
BT
15 571 Td
(\t\t}\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\t};\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
177 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [178 0 R ] /Parent 2 0 R >>
endobj
178 0 obj 
<</Length 2954 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/Element/proxy.h) Tj
ET
BT
565 822 Td
(58) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/Element/proxy.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "Element/element.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\n) Tj
ET
BT
15 659 Td
(\tclass Proxy : public Element\n) Tj
ET
BT
15 648 Td
(\t{\n) Tj
ET
BT
15 637 Td
(\tpublic:\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(\t\tProxy\(\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\t\t~Proxy\(\)\n) Tj
ET
BT
15 582 Td
(\t\t{\n) Tj
ET
BT
15 571 Td
(\t\t}\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(//\t\tvirtual int invite_request\(\);\n) Tj
ET
BT
15 538 Td
(//\t\tvirtual int register_request\(\);\n) Tj
ET
BT
15 527 Td
(//\t\tvirtual int bye_request\(\);\n) Tj
ET
BT
15 516 Td
(//\t\tvirtual int cancel_request\(\);\n) Tj
ET
BT
15 505 Td
(//\t\tvirtual int update_request\(\);\n) Tj
ET
BT
15 494 Td
(//\t\tvirtual int info_request\(\);\n) Tj
ET
BT
15 483 Td
(//\t\tvirtual int ack_request\(\);\n) Tj
ET
BT
15 472 Td
(//\t\tvirtual int message_request\(\);\n) Tj
ET
BT
15 461 Td
(//\t\tvirtual int subscribe_request\(\);\n) Tj
ET
BT
15 450 Td
(//\t\tvirtual int notify_request\(\);\n) Tj
ET
BT
15 439 Td
(//\t\tvirtual int refer_request\(\);\n) Tj
ET
BT
15 428 Td
(//\t\tvirtual int options_request\(\);\n) Tj
ET
BT
15 417 Td
(//\t\tvirtual int prack_request\(\);\n) Tj
ET
BT
15 406 Td
(//\n) Tj
ET
BT
15 395 Td
(//\t\tvirtual int on_invite_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 384 Td
(//\t\tvirtual int on_register_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 373 Td
(//\t\tvirtual int on_bye_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 362 Td
(//\t\tvirtual int on_ack_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 351 Td
(//\t\tvirtual int on_cancel_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 340 Td
(//\t\tvirtual int on_options_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 329 Td
(//\t\tvirtual int on_refer_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 318 Td
(//\t\tvirtual int on_subscribe_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 307 Td
(//\t\tvirtual int on_notify_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 296 Td
(//\t\tvirtual int on_message_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 285 Td
(//\t\tvirtual int on_info_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 274 Td
(//\t\tvirtual int on_prack_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 263 Td
(//\t\tvirtual int on_update_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 252 Td
(//\t\tvirtual int on_response\(Message &in_msg\);\n) Tj
ET
BT
15 241 Td
(\t};\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
180 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [181 0 R ] /Parent 2 0 R >>
endobj
181 0 obj 
<</Length 2920 >>
stream
/F1 10 Tf
BT
121.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/Element/element.h) Tj
ET
BT
565 822 Td
(59) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/Element/element.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "message.h"\n) Tj
ET
BT
15 692 Td
(#include "socket.h"\n) Tj
ET
BT
15 681 Td
(#include "dialog.h"\n) Tj
ET
BT
15 670 Td
(#include "transaction.h"\n) Tj
ET
BT
15 659 Td
(#include <queue>\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(namespace EasySip\n) Tj
ET
BT
15 626 Td
({\n) Tj
ET
BT
15 615 Td
(    class Element\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(    protected:\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(        MethodMapList allowed_methods_;\n) Tj
ET
BT
15 560 Td
(        RespCodeList allowed_responses_;\n) Tj
ET
BT
15 549 Td
(        SocketIp4UDP udp_;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        bool run_;\n) Tj
ET
BT
15 516 Td
(        Dialogs dialogs_;\n) Tj
ET
BT
15 505 Td
(        std::queue<std::string> msgq_;\n) Tj
ET
BT
15 494 Td
(    \n) Tj
ET
BT
15 483 Td
(        bool stateful_;\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(\t\tTransaction ivt_;\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    private:\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        void init_allowed_methods\(\);\n) Tj
ET
BT
15 406 Td
(        void init_allowed_responses\(\);\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(    public:\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        Element\(\);\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        ~Element\(\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        void run\(bool r\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            run_ = r;\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        bool run\(\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(            return run_;\n) Tj
ET
BT
15 230 Td
(        }\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        bool stateful\(\)\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(            return stateful_;\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        void stateful\(bool s\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            stateful_ = s;\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        virtual int fetch_msg\(\);\n) Tj
ET
BT
15 87 Td
(        virtual int start\(\);\n) Tj
ET
BT
15 76 Td
(        virtual int on_receive_message\(std::string &msg\);\n) Tj
ET
BT
15 65 Td
(        virtual int on_receive_req\(std::string &msg, const int code\);\n) Tj
ET
BT
15 54 Td
(        virtual int on_receive_resp\(std::string &msg, const int code\);\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
183 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [184 0 R ] /Parent 2 0 R >>
endobj
184 0 obj 
<</Length 3638 >>
stream
/F1 10 Tf
BT
121.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/Element/element.h) Tj
ET
BT
565 822 Td
(60) Tj
ET
BT
15 780 Td
(        virtual int invite_request\(\);\n) Tj
ET
BT
15 769 Td
(        virtual int register_request\(\);\n) Tj
ET
BT
15 758 Td
(        virtual int bye_request\(\);\n) Tj
ET
BT
15 747 Td
(        virtual int cancel_request\(\);\n) Tj
ET
BT
15 736 Td
(        virtual int update_request\(\);\n) Tj
ET
BT
15 725 Td
(        virtual int info_request\(\);\n) Tj
ET
BT
15 714 Td
(        virtual int ack_request\(\);\n) Tj
ET
BT
15 703 Td
(        virtual int message_request\(\);\n) Tj
ET
BT
15 692 Td
(        virtual int subscribe_request\(\);\n) Tj
ET
BT
15 681 Td
(        virtual int notify_request\(\);\n) Tj
ET
BT
15 670 Td
(        virtual int refer_request\(\);\n) Tj
ET
BT
15 659 Td
(        virtual int options_request\(\);\n) Tj
ET
BT
15 648 Td
(        virtual int prack_request\(\);\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(        virtual int on_invite_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 615 Td
(        virtual int on_register_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 604 Td
(        virtual int on_bye_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 593 Td
(        virtual int on_ack_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 582 Td
(        virtual int on_cancel_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 571 Td
(        virtual int on_options_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 560 Td
(        virtual int on_refer_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 549 Td
(        virtual int on_subscribe_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 538 Td
(        virtual int on_notify_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 527 Td
(        virtual int on_message_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 516 Td
(        virtual int on_info_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 505 Td
(        virtual int on_prack_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 494 Td
(        virtual int on_update_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(        virtual void send_msg\(RequestMessage &msg\);\n) Tj
ET
BT
15 461 Td
(        virtual void send_msg\(ResponseMessage &msg\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        virtual void echo\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 428 Td
(        virtual void simple_response\(const RespCode &rc, RequestMessage &in_msg\);\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        template<typename T>\n) Tj
ET
BT
15 395 Td
(        int dialog_preprocess\(Dialog &dialog, T &in_msg\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(            if \(!dialogs_[dialog.id\(\)]\)\n) Tj
ET
BT
15 362 Td
(            {\n) Tj
ET
BT
15 351 Td
(                // TODO: configurable reject/accept\n) Tj
ET
BT
15 340 Td
(                if \(true\)\n) Tj
ET
BT
15 329 Td
(                {\n) Tj
ET
BT
15 318 Td
(                    simple_response\(SIP_RESPONSE_CALL_OR_TRANSACTION_NOT_EXIST, in_msg\);\n) Tj
ET
BT
15 307 Td
(                    return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 296 Td
(                }\n) Tj
ET
BT
15 285 Td
(                else\n) Tj
ET
BT
15 274 Td
(                {\n) Tj
ET
BT
15 263 Td
(                    // TODO: restruct dialog\n) Tj
ET
BT
15 252 Td
(                }\n) Tj
ET
BT
15 241 Td
(            }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(            return PROCEDURE_OK;\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(    };\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
186 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [187 0 R ] /Parent 2 0 R >>
endobj
187 0 obj 
<</Length 3105 >>
stream
/F1 10 Tf
BT
121 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/Element/registar.h) Tj
ET
BT
565 822 Td
(61) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/Element/registar.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "Element/element.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\n) Tj
ET
BT
15 659 Td
(\tclass Registar : public Element\n) Tj
ET
BT
15 648 Td
(\t{\n) Tj
ET
BT
15 637 Td
(\tprotected:\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(\t\tstd::set<Contact> uri_binds_;\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\tpublic:\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(\t\tRegistar\(\);\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\t\t~Registar\(\)\n) Tj
ET
BT
15 538 Td
(\t\t{\n) Tj
ET
BT
15 527 Td
(\t\t}\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(//\t\tvirtual int invite_request\(\);\n) Tj
ET
BT
15 494 Td
(//\t\tvirtual int register_request\(\);\n) Tj
ET
BT
15 483 Td
(//\t\tvirtual int bye_request\(\);\n) Tj
ET
BT
15 472 Td
(//\t\tvirtual int cancel_request\(\);\n) Tj
ET
BT
15 461 Td
(//\t\tvirtual int update_request\(\);\n) Tj
ET
BT
15 450 Td
(//\t\tvirtual int info_request\(\);\n) Tj
ET
BT
15 439 Td
(//\t\tvirtual int ack_request\(\);\n) Tj
ET
BT
15 428 Td
(//\t\tvirtual int message_request\(\);\n) Tj
ET
BT
15 417 Td
(//\t\tvirtual int subscribe_request\(\);\n) Tj
ET
BT
15 406 Td
(//\t\tvirtual int notify_request\(\);\n) Tj
ET
BT
15 395 Td
(//\t\tvirtual int refer_request\(\);\n) Tj
ET
BT
15 384 Td
(//\t\tvirtual int options_request\(\);\n) Tj
ET
BT
15 373 Td
(//\t\tvirtual int prack_request\(\);\n) Tj
ET
BT
15 362 Td
(//\n) Tj
ET
BT
15 351 Td
(//\t\tvirtual int on_invite_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 340 Td
(\t\tvirtual int on_register_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 329 Td
(//\t\tvirtual int on_bye_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 318 Td
(//\t\tvirtual int on_ack_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 307 Td
(//\t\tvirtual int on_cancel_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 296 Td
(//\t\tvirtual int on_options_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 285 Td
(//\t\tvirtual int on_refer_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 274 Td
(//\t\tvirtual int on_subscribe_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 263 Td
(//\t\tvirtual int on_notify_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 252 Td
(//\t\tvirtual int on_message_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 241 Td
(//\t\tvirtual int on_info_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 230 Td
(//\t\tvirtual int on_prack_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 219 Td
(//\t\tvirtual int on_update_request\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 208 Td
(//\t\tvirtual int on_response\(Message &in_msg\);\n) Tj
ET
BT
15 197 Td
(\t};\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
189 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [190 0 R ] /Parent 2 0 R >>
endobj
190 0 obj 
<</Length 940 >>
stream
/F1 10 Tf
BT
121 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/Element/uaclient.h) Tj
ET
BT
565 822 Td
(62) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/Element/uaclient.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "Element/element.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\t\n) Tj
ET
BT
15 659 Td
(\tclass UAClient : public Element\n) Tj
ET
BT
15 648 Td
(\t{\n) Tj
ET
BT
15 637 Td
(\tpublic:\n) Tj
ET
BT
15 626 Td
(\t\tUAClient\(\);\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(\t\t~UAClient\(\)\n) Tj
ET
BT
15 593 Td
(\t\t{\n) Tj
ET
BT
15 582 Td
(\t\t}\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(\t};\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
192 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [193 0 R ] /Parent 2 0 R >>
endobj
193 0 obj 
<</Length 5620 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/response_code.h) Tj
ET
BT
565 822 Td
(63) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/response_code.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "parameter.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\n) Tj
ET
BT
15 659 Td
(    typedef CodeMap RespCode;\n) Tj
ET
BT
15 648 Td
(    typedef CodeMap WarnCode;\n) Tj
ET
BT
15 637 Td
(    typedef std::set<RespCode> RespCodeList;\n) Tj
ET
BT
15 626 Td
(    \n) Tj
ET
BT
15 615 Td
(    // RFC-3261\n) Tj
ET
BT
15 604 Td
(    // 1xx provisional\n) Tj
ET
BT
15 593 Td
(    const RespCode SIP_RESPONSE_TRYING\(100, "Trying"\);\n) Tj
ET
BT
15 582 Td
(    const RespCode SIP_RESPONSE_RINGING\(180, "Ringing"\);\n) Tj
ET
BT
15 571 Td
(    const RespCode SIP_RESPONSE_FORWARDING\(181, "Call is Being Forwared"\);\n) Tj
ET
BT
15 560 Td
(    const RespCode SIP_RESPONSE_QUEUED\(182, "Queued"\);\n) Tj
ET
BT
15 549 Td
(    const RespCode SIP_RESPONSE_SESSION_PROGRESS\(183, "Session Progress"\);\n) Tj
ET
BT
15 538 Td
(    // 2xx successful\n) Tj
ET
BT
15 527 Td
(    const RespCode SIP_RESPONSE_SUCCESSFUL\(200, "OK"\);\n) Tj
ET
BT
15 516 Td
(    const RespCode SIP_RESPONSE_ACCEPTED\(202, "Accepted"\);\n) Tj
ET
BT
15 505 Td
(    // 3xx redirection\n) Tj
ET
BT
15 494 Td
(    const RespCode SIP_RESPONSE_MULTI_CHOICES\(300, "Multiple Choices"\);\n) Tj
ET
BT
15 483 Td
(    const RespCode SIP_RESPONSE_MOVE_PERM\(301, "Moved Permanently"\);\n) Tj
ET
BT
15 472 Td
(    const RespCode SIP_RESPONSE_MOVE_TEMP\(302, "Moved Temporarily"\);\n) Tj
ET
BT
15 461 Td
(    const RespCode SIP_RESPONSE_USE_PROXY\(305, "Use Proxy"\);\n) Tj
ET
BT
15 450 Td
(    const RespCode SIP_RESPONSE_ALTER_SERVICE\(380, "Alternative Service"\);\n) Tj
ET
BT
15 439 Td
(    // 4xx request failure\n) Tj
ET
BT
15 428 Td
(    const RespCode SIP_RESPONSE_BAD_REQUEST\(400, "Bad Request"\);\n) Tj
ET
BT
15 417 Td
(    const RespCode SIP_RESPONSE_UNAUTHORIZED\(401, "Unauthorized"\);\n) Tj
ET
BT
15 406 Td
(    const RespCode SIP_RESPONSE_REQUIRE_PAYMENT\(402, "Payment Required"\);\n) Tj
ET
BT
15 395 Td
(    const RespCode SIP_RESPONSE_FORBIDDEN\(403, "Forbidden"\);\n) Tj
ET
BT
15 384 Td
(    const RespCode SIP_RESPONSE_NOT_FOUND\(404, "Not Found"\);\n) Tj
ET
BT
15 373 Td
(    const RespCode SIP_RESPONSE_METHOD_NOT_ALLOWED\(405, "Method Not Allowed"\);\n) Tj
ET
BT
15 362 Td
(    const RespCode SIP_RESPONSE_NOT_ACCEPTABLE\(406, "Not Acceptable"\);\n) Tj
ET
BT
15 351 Td
(    const RespCode SIP_RESPONSE_REQUIRE_PROXY_AUTHENTICATION\(407, "Proxy Authentication Required"\);\n) Tj
ET
BT
15 340 Td
(    const RespCode SIP_RESPONSE_REQUIRE_REQUEST_TIMEOUT\(408, "Request Timeout"\);\n) Tj
ET
BT
15 329 Td
(    const RespCode SIP_RESPONSE_RESOURCE_NOT_AVAIL\(410, "Gone"\);\n) Tj
ET
BT
15 318 Td
(    const RespCode SIP_RESPONSE_REQUEST_ENTITY_TOO_LARGE\(413, "Request Entity Too Large"\);\n) Tj
ET
BT
15 307 Td
(    const RespCode SIP_RESPONSE_REQUEST_URI_TOO_LONG\(414, "Request-URI Too Large"\);\n) Tj
ET
BT
15 296 Td
(    const RespCode SIP_RESPONSE_UNSUPPORTED_MEDIA_TYPE\(415, "Unsupported Media Type"\);\n) Tj
ET
BT
15 285 Td
(    const RespCode SIP_RESPONSE_UNSUPPORTED_URI_SCHEME\(416, "Unsupported URI Scheme"\);\n) Tj
ET
BT
15 274 Td
(    const RespCode SIP_RESPONSE_BAD_EXTENSION\(420, "Bad Extension"\);\n) Tj
ET
BT
15 263 Td
(    const RespCode SIP_RESPONSE_REQUIRE_EXTENSION\(421, "Extension Required"\);\n) Tj
ET
BT
15 252 Td
(    const RespCode SIP_RESPONSE_INTERVAL_TOO_BRIEF\(423, "Interval Too Brief"\);\n) Tj
ET
BT
15 241 Td
(    const RespCode SIP_RESPONSE_UNAVAIL_TEMP\(480, "Temporarily not available"\);\n) Tj
ET
BT
15 230 Td
(    const RespCode SIP_RESPONSE_CALL_OR_TRANSACTION_NOT_EXIST\(481, "Call Leg/Transaction Does Not Exist"\);\n) Tj
ET
BT
15 219 Td
(    const RespCode SIP_RESPONSE_LOOP_DETECTED\(482, "Loop Detected"\);\n) Tj
ET
BT
15 208 Td
(    const RespCode SIP_RESPONSE_TOO_MANY_HOPS\(483, "Too Many Hops"\);\n) Tj
ET
BT
15 197 Td
(    const RespCode SIP_RESPONSE_ADDRESS_INCOMPLETE\(484, "Address Incomplete"\);\n) Tj
ET
BT
15 186 Td
(    const RespCode SIP_RESPONSE_AMBIGUOUS_URI\(485, "Ambiguous"\);\n) Tj
ET
BT
15 175 Td
(    const RespCode SIP_RESPONSE_BUSY\(486, "Busy Here"\);\n) Tj
ET
BT
15 164 Td
(    const RespCode SIP_RESPONSE_REQUEST_TERMINATED\(487, "Request Terminated"\);\n) Tj
ET
BT
15 153 Td
(    const RespCode SIP_RESPONSE_NOT_ACCEPTABLE_HERE\(488, "Not Acceptable Here"\);\n) Tj
ET
BT
15 142 Td
(    const RespCode SIP_RESPONSE_REQUEST_PENDING\(491, "Request Pending"\);\n) Tj
ET
BT
15 131 Td
(    const RespCode SIP_RESPONSE_UNDECIPHERABLE\(493, "Undecipherable"\);\n) Tj
ET
BT
15 120 Td
(    // 5xx server failure\n) Tj
ET
BT
15 109 Td
(    const RespCode SIP_RESPONSE_SERVER_INTERNAL_ERROR\(500, "Internal Server Error"\);\n) Tj
ET
BT
15 98 Td
(    const RespCode SIP_RESPONSE_FUNC_NOT_IMPLEMENTED\(501, "Not Implemented"\);\n) Tj
ET
BT
15 87 Td
(    const RespCode SIP_RESPONSE_BAD_GATEWAY\(502, "Bad Gateway"\);\n) Tj
ET
BT
15 76 Td
(    const RespCode SIP_RESPONSE_SERVICE_UNAVAIL\(503, "Service Unavailable"\);\n) Tj
ET
BT
15 65 Td
(    const RespCode SIP_RESPONSE_SERVICE_TIMEOUT\(504, "Service Time-out"\);\n) Tj
ET
BT
15 54 Td
(    const RespCode SIP_RESPONSE_UNSUPPORTED_VERSION\(505, "SIP Version not supported"\);\n) Tj
ET
BT
15 43 Td
(    const RespCode SIP_RESPONSE_MESSAGE_TOO_LARGE\(513, "Message Too Large"\);\n) Tj
ET

endstream
endobj
195 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [196 0 R ] /Parent 2 0 R >>
endobj
196 0 obj 
<</Length 2211 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/response_code.h) Tj
ET
BT
565 822 Td
(64) Tj
ET
BT
15 780 Td
(    // 6xx global failures\n) Tj
ET
BT
15 769 Td
(    const RespCode SIP_RESPONSE_GLOBAL_BUSY\(600, "Busy Everywhere"\);\n) Tj
ET
BT
15 758 Td
(    const RespCode SIP_RESPONSE_CALLEE_DECLINE\(603, "Decline"\);\n) Tj
ET
BT
15 747 Td
(    const RespCode SIP_RESPONSE_GLOBAL_NOT_EXIST\(604, "Does not exist anywhere"\);\n) Tj
ET
BT
15 736 Td
(    const RespCode SIP_RESPONSE_GLOBAL_NOT_ACCEPTABLE\(606, "Not Acceptable"\);\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    // Warning codes in response \(Warning hearder field\)\n) Tj
ET
BT
15 703 Td
(    // RFC-3261\n) Tj
ET
BT
15 692 Td
(    const WarnCode SIP_WARNING_300\(300, "Incompatible network protocol"\);\n) Tj
ET
BT
15 681 Td
(    const WarnCode SIP_WARNING_301\(301, "Incompatible network address formats"\);\n) Tj
ET
BT
15 670 Td
(    const WarnCode SIP_WARNING_302\(302, "Incompatible transport protocol"\);\n) Tj
ET
BT
15 659 Td
(    const WarnCode SIP_WARNING_303\(303, "Incompatible bandwidth units"\);\n) Tj
ET
BT
15 648 Td
(    const WarnCode SIP_WARNING_304\(304, "Media type not available"\);\n) Tj
ET
BT
15 637 Td
(    const WarnCode SIP_WARNING_305\(305, "Incompatible media format"\);\n) Tj
ET
BT
15 626 Td
(    const WarnCode SIP_WARNING_306\(306, "Attribute not understood"\);\n) Tj
ET
BT
15 615 Td
(    const WarnCode SIP_WARNING_307\(307, "Session description parmeter not understood"\);\n) Tj
ET
BT
15 604 Td
(    const WarnCode SIP_WARNING_330\(330, "Multicast not available"\);\n) Tj
ET
BT
15 593 Td
(    const WarnCode SIP_WARNING_331\(331, "Unicast not available"\);\n) Tj
ET
BT
15 582 Td
(    const WarnCode SIP_WARNING_370\(370, "Insufficient bandwidth"\);\n) Tj
ET
BT
15 571 Td
(    // RFC-5630\n) Tj
ET
BT
15 560 Td
(    const WarnCode SIP_WARNING_380\(380, "SIPS Not Allowed"\);\n) Tj
ET
BT
15 549 Td
(    const WarnCode SIP_WARNING_381\(381, "SIPS Required"\);\n) Tj
ET
BT
15 538 Td
(    // RFC-3261\n) Tj
ET
BT
15 527 Td
(    const WarnCode SIP_WARNING_399\(399, "Miscellaneous warning"\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
198 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [199 0 R ] /Parent 2 0 R >>
endobj
199 0 obj 
<</Length 2876 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(65) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * include/message.h\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#pragma once\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(#include "header_field.h"\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(namespace EasySip\n) Tj
ET
BT
15 670 Td
({\n) Tj
ET
BT
15 659 Td
(    /*\n) Tj
ET
BT
15 648 Td
(     * Mandatory fields:\n) Tj
ET
BT
15 637 Td
(     * Call-ID\n) Tj
ET
BT
15 626 Td
(     * CSeq\n) Tj
ET
BT
15 615 Td
(     * From\n) Tj
ET
BT
15 604 Td
(     * To\n) Tj
ET
BT
15 593 Td
(     * Via\n) Tj
ET
BT
15 582 Td
(     * Max-Forwards\n) Tj
ET
BT
15 571 Td
(    */\n) Tj
ET
BT
15 560 Td
(    class Message : public HeaderFields\n) Tj
ET
BT
15 549 Td
(    {\n) Tj
ET
BT
15 538 Td
(    protected:\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        typedef Message Ancestor;\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        std::string user_data_;\n) Tj
ET
BT
15 483 Td
(        std::string msg_; // message to send or received, which contains header fields and user data\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    public:\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        Message\(\)\n) Tj
ET
BT
15 428 Td
(        {\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        Message\(std::string msg\)\n) Tj
ET
BT
15 384 Td
(        : msg_\(msg\)\n) Tj
ET
BT
15 373 Td
(        {\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        std::string Msg\(\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            return msg_;\n) Tj
ET
BT
15 307 Td
(        }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        ~Message\(\)\n) Tj
ET
BT
15 274 Td
(        {\n) Tj
ET
BT
15 263 Td
(        }\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(        MethodMap method\(\)\n) Tj
ET
BT
15 230 Td
(        {\n) Tj
ET
BT
15 219 Td
(            return req_line_->method_;\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        std::string& append_userdata\(std::string buf\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            user_data_.append\(buf\);\n) Tj
ET
BT
15 153 Td
(            return user_data_;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        virtual Message& create\(\);\n) Tj
ET
BT
15 109 Td
(        virtual bool is_valid\(\);\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        virtual int parse\(size_t &pos\);\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        #define parse_field\(f, msg, pos\) \\\n) Tj
ET
BT
15 54 Td
(        { \\\n) Tj
ET
BT
15 43 Td
(            f.last\(\)->parse\(msg, pos\); \\\n) Tj
ET

endstream
endobj
201 0 obj 
<</Type /Page /LastModified (D:20141028101815-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [202 0 R ] /Parent 2 0 R >>
endobj
202 0 obj 
<</Length 4500 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(66) Tj
ET
BT
15 780 Td
(        }\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(        virtual void parse_dispatch\(std::string field, size_t &pos\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        static int get_method_from_buffer\(\n) Tj
ET
BT
15 725 Td
(            MethodMapList &allowed_methods, std::string msg, std::string sym = " "\);\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(        static int get_response_code_from_buffer\(\n) Tj
ET
BT
15 692 Td
(            RespCodeList &allowed_responses, std::string msg, std::string sym = " "\);\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(        static std::vector<std::string> split_by\(std::string msg, std::string sym = " "\);\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        friend std::ostream& operator<< \(std::ostream& o, Message& hf\);\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(        // shotcut for each header field\n) Tj
ET
BT
15 604 Td
(         HFCallId* add_call_id\(\);\n) Tj
ET
BT
15 593 Td
(         HFCSeq* add_cseq\(\);\n) Tj
ET
BT
15 582 Td
(         HFFrom* add_from\(\);\n) Tj
ET
BT
15 571 Td
(         HFTo* add_to\(\);\n) Tj
ET
BT
15 560 Td
(         HFVia* add_via\(\);\n) Tj
ET
BT
15 549 Td
(         HFAlertInfo* add_alert_info\(\);\n) Tj
ET
BT
15 538 Td
(         HFAllowEvents* add_allow_events\(\);\n) Tj
ET
BT
15 527 Td
(         HFDate* add_date\(\);\n) Tj
ET
BT
15 516 Td
(         HFContact* add_contact\(\);\n) Tj
ET
BT
15 505 Td
(         HFOrganization* add_organization\(\);\n) Tj
ET
BT
15 494 Td
(         HFRecordRoute* add_record_route\(\);\n) Tj
ET
BT
15 483 Td
(         HFRetryAfter* add_retry_after\(\);\n) Tj
ET
BT
15 472 Td
(         HFSubject* add_subject\(\);\n) Tj
ET
BT
15 461 Td
(         HFSupported* add_supported\(\);\n) Tj
ET
BT
15 450 Td
(         HFTimestamp* add_timestamp\(\);\n) Tj
ET
BT
15 439 Td
(         HFUserAgent* add_user_agent\(\);\n) Tj
ET
BT
15 428 Td
(         HFAnswerMode* add_answer_mode\(\);\n) Tj
ET
BT
15 417 Td
(         HFPrivAnswerMode* add_priv_answer_mode\(\);\n) Tj
ET
BT
15 406 Td
(         HFAccept* add_accept\(\);\n) Tj
ET
BT
15 395 Td
(         HFAcceptContact* add_accept_contact\(\);\n) Tj
ET
BT
15 384 Td
(         HFAcceptEncoding* add_accept_encoding\(\);\n) Tj
ET
BT
15 373 Td
(         HFAcceptLanguage* add_accept_language\(\);\n) Tj
ET
BT
15 362 Td
(         HFAuthorization* add_authorization\(\);\n) Tj
ET
BT
15 351 Td
(         HFCallInfo* add_call_info\(\);\n) Tj
ET
BT
15 340 Td
(         HFEvent* add_event\(\);\n) Tj
ET
BT
15 329 Td
(         HFInReplyTo* add_in_replay_to\(\);\n) Tj
ET
BT
15 318 Td
(         HFJoin* add_join\(\);\n) Tj
ET
BT
15 307 Td
(         HFPriority* add_priority\(\);\n) Tj
ET
BT
15 296 Td
(         HFPrivacy* add_privacy\(\);\n) Tj
ET
BT
15 285 Td
(         HFProxyAuthorization* add_proxy_authorization\(\);\n) Tj
ET
BT
15 274 Td
(         HFProxyRequire* add_proxy_require\(\);\n) Tj
ET
BT
15 263 Td
(         HFPOSPAuthToken* add_p_osp_auth_token\(\);\n) Tj
ET
BT
15 252 Td
(         HFPAssertedIdentity* add_p_asserted_identity\(\);\n) Tj
ET
BT
15 241 Td
(         HFPPreferredIdentity* add_p_preferred_identity\(\);\n) Tj
ET
BT
15 230 Td
(         HFMaxForwards* add_max_forwards\(\);\n) Tj
ET
BT
15 219 Td
(         HFReason* add_reason\(\);\n) Tj
ET
BT
15 208 Td
(         HFReferTo* add_refer_to\(\);\n) Tj
ET
BT
15 197 Td
(         HFReferredBy* add_referred_by\(\);\n) Tj
ET
BT
15 186 Td
(         HFReplyTo* add_reply_to\(\);\n) Tj
ET
BT
15 175 Td
(         HFReplaces* add_replaces\(\);\n) Tj
ET
BT
15 164 Td
(         HFRejectContact* add_reject_contact\(\);\n) Tj
ET
BT
15 153 Td
(         HFRequestDisposition* add_request_disposition\(\);\n) Tj
ET
BT
15 142 Td
(         HFRequire* add_require\(\);\n) Tj
ET
BT
15 131 Td
(         HFRoute* add_route\(\);\n) Tj
ET
BT
15 120 Td
(         HFRack* add_rack\(\);\n) Tj
ET
BT
15 109 Td
(         HFSessionExpires* add_session_expires\(\);\n) Tj
ET
BT
15 98 Td
(         HFSubscriptionState* add_subscription_state\(\);\n) Tj
ET
BT
15 87 Td
(         HFAuthenticationInfo* add_authentication_info\(\);\n) Tj
ET
BT
15 76 Td
(         HFErrorInfo* add_error_info\(\);\n) Tj
ET
BT
15 65 Td
(         HFMinExpires* add_min_expires\(\);\n) Tj
ET
BT
15 54 Td
(         HFMinSE* add_min_se\(\);\n) Tj
ET
BT
15 43 Td
(         HFProxyAuthenticate* add_proxy_authenticate\(\);\n) Tj
ET

endstream
endobj
204 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [205 0 R ] /Parent 2 0 R >>
endobj
205 0 obj 
<</Length 3496 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(67) Tj
ET
BT
15 780 Td
(         HFServer* add_server\(\);\n) Tj
ET
BT
15 769 Td
(         HFUnsupported* add_unsupported\(\);\n) Tj
ET
BT
15 758 Td
(         HFWarning* add_warning\(\);\n) Tj
ET
BT
15 747 Td
(         HFWWWAuthenticate* add_www_authenticate\(\);\n) Tj
ET
BT
15 736 Td
(         HFRSeq* add_rseq\(\);\n) Tj
ET
BT
15 725 Td
(         HFAllow* add_allow\(\);\n) Tj
ET
BT
15 714 Td
(         HFContentEncoding* add_content_encoding\(\);\n) Tj
ET
BT
15 703 Td
(         HFContentLength* add_content_length\(\);\n) Tj
ET
BT
15 692 Td
(        HFContentDisposition* add_content_disposition\(\);\n) Tj
ET
BT
15 681 Td
(         HFContentLanguage* add_content_language\(\);\n) Tj
ET
BT
15 670 Td
(         HFContentType* add_content_type\(\);\n) Tj
ET
BT
15 659 Td
(         HFExpires* add_expires\(\);\n) Tj
ET
BT
15 648 Td
(         HFMIMEVersion* add_mime_version\(\);\n) Tj
ET
BT
15 637 Td
(    };\n) Tj
ET
BT
15 626 Td
(    \n) Tj
ET
BT
15 615 Td
(    // ---------------- Request messages --------------------------\n) Tj
ET
BT
15 604 Td
(    class ResponseMessage;\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(    class RequestMessage : public Message\n) Tj
ET
BT
15 571 Td
(    {\n) Tj
ET
BT
15 560 Td
(    public:\n) Tj
ET
BT
15 549 Td
(        RequestMessage\(\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            req_line_ = std::make_shared<RequestLine>\(\);\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        RequestMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            req_line_ = std::make_shared<RequestLine>\(\);\n) Tj
ET
BT
15 461 Td
(            msg_ = in_msg;\n) Tj
ET
BT
15 450 Td
(        }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        RequestMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            req_line_ = std::make_shared<RequestLine>\(\);\n) Tj
ET
BT
15 395 Td
(            *this = in_msg;\n) Tj
ET
BT
15 384 Td
(        }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        RequestMessage\(ResponseMessage &in_msg\);\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        RequestMessage& create\(\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        virtual int parse\(size_t &pos\);\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        virtual int parse\(\)\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(            size_t pos = 0;\n) Tj
ET
BT
15 263 Td
(            return parse\(pos\);\n) Tj
ET
BT
15 252 Td
(        }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(        void SipVersion\(std::string ver\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(            req_line_->version_ = ver;\n) Tj
ET
BT
15 197 Td
(        }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        std::string SipVersion\(\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            return req_line_->version_;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        void RequestURI\(std::string ver\)\n) Tj
ET
BT
15 109 Td
(        {\n) Tj
ET
BT
15 98 Td
(            req_line_->request_uri_ = ver;\n) Tj
ET
BT
15 87 Td
(        }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        std::string RequestURI\(\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(            return req_line_->request_uri_;\n) Tj
ET

endstream
endobj
207 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [208 0 R ] /Parent 2 0 R >>
endobj
208 0 obj 
<</Length 3056 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(68) Tj
ET
BT
15 780 Td
(        }\n) Tj
ET
BT
15 769 Td
(    \n) Tj
ET
BT
15 758 Td
(        std::string Method\(\)\n) Tj
ET
BT
15 747 Td
(        {\n) Tj
ET
BT
15 736 Td
(            return req_line_->method_.name\(\);\n) Tj
ET
BT
15 725 Td
(        }\n) Tj
ET
BT
15 714 Td
(    };\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    class InviteMessage : public RequestMessage\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(    public:\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        InviteMessage\(\)\n) Tj
ET
BT
15 637 Td
(        : RequestMessage\(\)\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(            req_line_->method_ = METHOD_INVITE;\n) Tj
ET
BT
15 604 Td
(        }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(        InviteMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 571 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 560 Td
(        {\n) Tj
ET
BT
15 549 Td
(            req_line_->method_ = METHOD_INVITE;\n) Tj
ET
BT
15 538 Td
(        }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        InviteMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 505 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            req_line_->method_ = METHOD_INVITE;\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        ~InviteMessage\(\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(        }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 395 Td
(    };\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    class RegisterMessage : public RequestMessage\n) Tj
ET
BT
15 362 Td
(    {\n) Tj
ET
BT
15 351 Td
(    public:\n) Tj
ET
BT
15 340 Td
(        RegisterMessage\(\)\n) Tj
ET
BT
15 329 Td
(        : RequestMessage\(\)\n) Tj
ET
BT
15 318 Td
(        {\n) Tj
ET
BT
15 307 Td
(            req_line_->method_ = METHOD_REGISTER;\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        RegisterMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 263 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(            req_line_->method_ = METHOD_REGISTER;\n) Tj
ET
BT
15 230 Td
(            msg_ = in_msg;\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        RegisterMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 186 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            req_line_->method_ = METHOD_REGISTER;\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        ~RegisterMessage\(\)\n) Tj
ET
BT
15 120 Td
(        {\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 76 Td
(    };\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(    class ByeMessage : public RequestMessage\n) Tj
ET
BT
15 43 Td
(    {\n) Tj
ET

endstream
endobj
210 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [211 0 R ] /Parent 2 0 R >>
endobj
211 0 obj 
<</Length 3103 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(69) Tj
ET
BT
15 780 Td
(    public:\n) Tj
ET
BT
15 769 Td
(        ByeMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 758 Td
(        {\n) Tj
ET
BT
15 747 Td
(            req_line_->method_ = METHOD_BYE;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        ByeMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 703 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 692 Td
(        {\n) Tj
ET
BT
15 681 Td
(            req_line_->method_ = METHOD_BYE;\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        ByeMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 637 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(            req_line_->method_ = METHOD_BYE;\n) Tj
ET
BT
15 604 Td
(        }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(        ~ByeMessage\(\)\n) Tj
ET
BT
15 571 Td
(        {\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 527 Td
(    };\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    class AckMessage : public RequestMessage\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(    public:\n) Tj
ET
BT
15 472 Td
(        AckMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 461 Td
(        {\n) Tj
ET
BT
15 450 Td
(            req_line_->method_ = METHOD_ACK;\n) Tj
ET
BT
15 439 Td
(        }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        AckMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 406 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 395 Td
(        {\n) Tj
ET
BT
15 384 Td
(            req_line_->method_ = METHOD_ACK;\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        AckMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 340 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            req_line_->method_ = METHOD_ACK;\n) Tj
ET
BT
15 307 Td
(        }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        AckMessage\(ResponseMessage &in_msg\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        ~AckMessage\(\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(        }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 208 Td
(    };\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    class CancelMessage : public RequestMessage\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(    public:\n) Tj
ET
BT
15 153 Td
(        CancelMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            req_line_->method_ = METHOD_CANCEL;\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        CancelMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 87 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 76 Td
(        {\n) Tj
ET
BT
15 65 Td
(            req_line_->method_ = METHOD_CANCEL;\n) Tj
ET
BT
15 54 Td
(        }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
213 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [214 0 R ] /Parent 2 0 R >>
endobj
214 0 obj 
<</Length 3111 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(70) Tj
ET
BT
15 780 Td
(        CancelMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 769 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 758 Td
(        {\n) Tj
ET
BT
15 747 Td
(            req_line_->method_ = METHOD_CANCEL;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        ~CancelMessage\(\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(        }\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 659 Td
(    };\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    class OptionsMessage : public RequestMessage\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(    public:\n) Tj
ET
BT
15 604 Td
(        OptionsMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            req_line_->method_ = METHOD_OPTIONS;\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        OptionsMessage\(std::string &in_msg\)\n) Tj
ET
BT
15 538 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(            req_line_->method_ = METHOD_OPTIONS;\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        OptionsMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 472 Td
(        : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 461 Td
(        {\n) Tj
ET
BT
15 450 Td
(            req_line_->method_ = METHOD_OPTIONS;\n) Tj
ET
BT
15 439 Td
(        }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        ~OptionsMessage\(\)\n) Tj
ET
BT
15 406 Td
(        {\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 362 Td
(    };\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(    class ReferMessage : public RequestMessage\n) Tj
ET
BT
15 329 Td
(    {\n) Tj
ET
BT
15 318 Td
(    public:\n) Tj
ET
BT
15 307 Td
(        ReferMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(            req_line_->method_ = METHOD_REFER;\n) Tj
ET
BT
15 274 Td
(        }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        ReferMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            req_line_->method_ = METHOD_REFER;\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        ReferMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 186 Td
(        {\n) Tj
ET
BT
15 175 Td
(            req_line_->method_ = METHOD_REFER;\n) Tj
ET
BT
15 164 Td
(        }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        ~ReferMessage\(\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 87 Td
(    };\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    class SubscribeMessage : public RequestMessage\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(    public:\n) Tj
ET

endstream
endobj
216 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [217 0 R ] /Parent 2 0 R >>
endobj
217 0 obj 
<</Length 3268 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(71) Tj
ET
BT
15 780 Td
(        SubscribeMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 769 Td
(        {\n) Tj
ET
BT
15 758 Td
(            req_line_->method_ = METHOD_SUBSCRIBE;\n) Tj
ET
BT
15 747 Td
(        }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(        SubscribeMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 714 Td
(        {\n) Tj
ET
BT
15 703 Td
(            req_line_->method_ = METHOD_SUBSCRIBE;\n) Tj
ET
BT
15 692 Td
(        }\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(        SubscribeMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 659 Td
(        {\n) Tj
ET
BT
15 648 Td
(            req_line_->method_ = METHOD_SUBSCRIBE;\n) Tj
ET
BT
15 637 Td
(        }\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(        ~SubscribeMessage\(\)\n) Tj
ET
BT
15 604 Td
(        {\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 560 Td
(    };\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    class NotifyMessage : public RequestMessage\n) Tj
ET
BT
15 527 Td
(    {\n) Tj
ET
BT
15 516 Td
(    public:\n) Tj
ET
BT
15 505 Td
(        NotifyMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            req_line_->method_ = METHOD_NOTIFY;\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        NotifyMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(            req_line_->method_ = METHOD_NOTIFY;\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        NotifyMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(            req_line_->method_ = METHOD_NOTIFY;\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        ~NotifyMessage\(\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(        }\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 285 Td
(    };\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    class MessageMessage : public RequestMessage\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(    public:\n) Tj
ET
BT
15 230 Td
(        MessageMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 219 Td
(        {\n) Tj
ET
BT
15 208 Td
(            req_line_->method_ = METHOD_MESSAGE;\n) Tj
ET
BT
15 197 Td
(        }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        MessageMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            req_line_->method_ = METHOD_MESSAGE;\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        MessageMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 109 Td
(        {\n) Tj
ET
BT
15 98 Td
(            req_line_->method_ = METHOD_MESSAGE;\n) Tj
ET
BT
15 87 Td
(        }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        ~MessageMessage\(\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
219 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [220 0 R ] /Parent 2 0 R >>
endobj
220 0 obj 
<</Length 3201 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(72) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 758 Td
(    };\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(    class InfoMessage : public RequestMessage\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(    public:\n) Tj
ET
BT
15 703 Td
(        InfoMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 692 Td
(        {\n) Tj
ET
BT
15 681 Td
(            req_line_->method_ = METHOD_INFO;\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        InfoMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 637 Td
(        {\n) Tj
ET
BT
15 626 Td
(            req_line_->method_ = METHOD_INFO;\n) Tj
ET
BT
15 615 Td
(        }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        InfoMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(            req_line_->method_ = METHOD_INFO;\n) Tj
ET
BT
15 560 Td
(        }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        ~InfoMessage\(\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 483 Td
(    };\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    class PrackMessage : public RequestMessage\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(    public:\n) Tj
ET
BT
15 428 Td
(        PrackMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            req_line_->method_ = METHOD_PRACK;\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        PrackMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 362 Td
(        {\n) Tj
ET
BT
15 351 Td
(            req_line_->method_ = METHOD_PRACK;\n) Tj
ET
BT
15 340 Td
(        }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        PrackMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 307 Td
(        {\n) Tj
ET
BT
15 296 Td
(            req_line_->method_ = METHOD_PRACK;\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        ~PrackMessage\(\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(        }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 208 Td
(    };\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    class UpdateMessage : public RequestMessage\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(    public:\n) Tj
ET
BT
15 153 Td
(        UpdateMessage\(\) : RequestMessage\(\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            req_line_->method_ = METHOD_UPDATE;\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        UpdateMessage\(std::string &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            req_line_->method_ = METHOD_UPDATE;\n) Tj
ET
BT
15 65 Td
(        }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        UpdateMessage\(RequestMessage &in_msg\) : RequestMessage\(in_msg\)\n) Tj
ET

endstream
endobj
222 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [223 0 R ] /Parent 2 0 R >>
endobj
223 0 obj 
<</Length 3203 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(73) Tj
ET
BT
15 780 Td
(        {\n) Tj
ET
BT
15 769 Td
(            req_line_->method_ = METHOD_UPDATE;\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        ~UpdateMessage\(\)\n) Tj
ET
BT
15 725 Td
(        {\n) Tj
ET
BT
15 714 Td
(        }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        bool is_valid\(\);\n) Tj
ET
BT
15 681 Td
(    };\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    // ---------------- Response messages --------------------------\n) Tj
ET
BT
15 648 Td
(    class ResponseMessage : public Message\n) Tj
ET
BT
15 637 Td
(    {\n) Tj
ET
BT
15 626 Td
(        \n) Tj
ET
BT
15 615 Td
(    public:\n) Tj
ET
BT
15 604 Td
(        ResponseMessage\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            resp_status_ = std::make_shared<ResponseStatus>\(\);\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        ResponseMessage\(std::string &msg\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            resp_status_ = std::make_shared<ResponseStatus>\(\);\n) Tj
ET
BT
15 516 Td
(            msg_ = msg;\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        ResponseMessage\(const RespCode &resp\)\n) Tj
ET
BT
15 472 Td
(        {\n) Tj
ET
BT
15 461 Td
(            resp_status_ = std::make_shared<ResponseStatus>\(\);\n) Tj
ET
BT
15 450 Td
(            resp_status_->resp_code_ = resp;\n) Tj
ET
BT
15 439 Td
(        }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        ResponseMessage\(RequestMessage &in_msg\);\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        ~ResponseMessage\(\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        ResponseStatus& RespStatus\(\)\n) Tj
ET
BT
15 340 Td
(        {\n) Tj
ET
BT
15 329 Td
(            return *resp_status_;\n) Tj
ET
BT
15 318 Td
(        }\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        void ResponseCode\(const RespCode& resp\)\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(            resp_status_->resp_code_ = resp;\n) Tj
ET
BT
15 263 Td
(        }\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(        RespCode& ResponseCode\(\)\n) Tj
ET
BT
15 230 Td
(        {\n) Tj
ET
BT
15 219 Td
(            return resp_status_->resp_code_;\n) Tj
ET
BT
15 208 Td
(        }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        void SipVersion\(std::string ver\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            resp_status_->version_ = ver;\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        std::string& SipVersion\(\)\n) Tj
ET
BT
15 120 Td
(        {\n) Tj
ET
BT
15 109 Td
(            return resp_status_->version_;\n) Tj
ET
BT
15 98 Td
(        }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        bool is_1xx_resp\(\)\n) Tj
ET
BT
15 65 Td
(        {\n) Tj
ET
BT
15 54 Td
(            return \(99 < resp_status_->resp_code_.code\(\) && 200 > resp_status_->resp_code_.code\(\)\);\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
225 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [226 0 R ] /Parent 2 0 R >>
endobj
226 0 obj 
<</Length 3214 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/include/message.h) Tj
ET
BT
565 822 Td
(74) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        bool is_2xx_resp\(\)\n) Tj
ET
BT
15 758 Td
(        {\n) Tj
ET
BT
15 747 Td
(            return \(199 < resp_status_->resp_code_.code\(\) && 300 > resp_status_->resp_code_.code\(\)\);\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        bool is_3xx_resp\(\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            return \(299 < resp_status_->resp_code_.code\(\) && 400 > resp_status_->resp_code_.code\(\)\);\n) Tj
ET
BT
15 681 Td
(        }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        bool is_4xx_resp\(\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            return \(399 < resp_status_->resp_code_.code\(\) && 500 > resp_status_->resp_code_.code\(\)\);\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        bool is_5xx_resp\(\)\n) Tj
ET
BT
15 593 Td
(        {\n) Tj
ET
BT
15 582 Td
(            return \(499 < resp_status_->resp_code_.code\(\) && 600 > resp_status_->resp_code_.code\(\)\);\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        bool is_6xx_resp\(\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            return \(599 < resp_status_->resp_code_.code\(\) && 700 > resp_status_->resp_code_.code\(\)\);\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        bool is_resp2invite\(\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            return \(METHOD_INVITE.name\(\) == cseq_.first\(\)->method\(\)\);\n) Tj
ET
BT
15 461 Td
(        }    \n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        bool is_resp2register\(\)\n) Tj
ET
BT
15 428 Td
(        {\n) Tj
ET
BT
15 417 Td
(            return \(METHOD_REGISTER.name\(\) == cseq_.first\(\)->method\(\)\);\n) Tj
ET
BT
15 406 Td
(        }    \n) Tj
ET
BT
15 395 Td
(    \n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        virtual ResponseMessage& create\(\);\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        virtual int parse\(size_t &pos\);\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(        virtual int parse\(\)\n) Tj
ET
BT
15 318 Td
(        {\n) Tj
ET
BT
15 307 Td
(            size_t pos = 0;\n) Tj
ET
BT
15 296 Td
(            return parse\(pos\);\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    };\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(//    class MessageQueue : public std::queue<Message>\n) Tj
ET
BT
15 230 Td
(//    {\n) Tj
ET
BT
15 219 Td
(//    public:\n) Tj
ET
BT
15 208 Td
(//        void append\(Message &msg\)\n) Tj
ET
BT
15 197 Td
(//        {\n) Tj
ET
BT
15 186 Td
(//        }\n) Tj
ET
BT
15 175 Td
(//\n) Tj
ET
BT
15 164 Td
(//        void append\(RequestMessage &msg\)\n) Tj
ET
BT
15 153 Td
(//        {\n) Tj
ET
BT
15 142 Td
(//        }\n) Tj
ET
BT
15 131 Td
(//\n) Tj
ET
BT
15 120 Td
(//        void append\(ResponseMessage &msg\)\n) Tj
ET
BT
15 109 Td
(//        {\n) Tj
ET
BT
15 98 Td
(//        }\n) Tj
ET
BT
15 87 Td
(//    };\n) Tj
ET
BT
15 76 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
228 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [229 0 R ] /Parent 2 0 R >>
endobj
229 0 obj 
<</Length 2167 >>
stream
/F1 10 Tf
BT
122.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/transaction.cpp) Tj
ET
BT
565 822 Td
(75) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/transaction.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "transaction.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(    int Transaction::loop\(\)\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(        switch \(state_\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            case T_FSM_CALLING:\n) Tj
ET
BT
15 626 Td
(            {\n) Tj
ET
BT
15 615 Td
(                T1 t1;\n) Tj
ET
BT
15 604 Td
(                //element_.invite_request\(\);\n) Tj
ET
BT
15 593 Td
(                break;\n) Tj
ET
BT
15 582 Td
(            }\n) Tj
ET
BT
15 571 Td
(            case T_FSM_TRYING:\n) Tj
ET
BT
15 560 Td
(            {\n) Tj
ET
BT
15 549 Td
(                break;\n) Tj
ET
BT
15 538 Td
(            }\n) Tj
ET
BT
15 527 Td
(            case T_FSM_PROCEEDING:\n) Tj
ET
BT
15 516 Td
(            {\n) Tj
ET
BT
15 505 Td
(                break;\n) Tj
ET
BT
15 494 Td
(            }\n) Tj
ET
BT
15 483 Td
(            case T_FSM_COMPLETED:\n) Tj
ET
BT
15 472 Td
(            {\n) Tj
ET
BT
15 461 Td
(                break;\n) Tj
ET
BT
15 450 Td
(            }\n) Tj
ET
BT
15 439 Td
(            case T_FSM_CONFIRMED:\n) Tj
ET
BT
15 428 Td
(            {\n) Tj
ET
BT
15 417 Td
(                break;\n) Tj
ET
BT
15 406 Td
(            }\n) Tj
ET
BT
15 395 Td
(            case T_FSM_TERMINATED:\n) Tj
ET
BT
15 384 Td
(            {\n) Tj
ET
BT
15 373 Td
(                break;\n) Tj
ET
BT
15 362 Td
(            }\n) Tj
ET
BT
15 351 Td
(            default:\n) Tj
ET
BT
15 340 Td
(            {\n) Tj
ET
BT
15 329 Td
(            //    return PROCEDURE_ERROR;\n) Tj
ET
BT
15 318 Td
(            }\n) Tj
ET
BT
15 307 Td
(        }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 274 Td
(    }\n) Tj
ET
BT
15 263 Td
(}; // namespace EasySip\n) Tj
ET

endstream
endobj
231 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [232 0 R ] /Parent 2 0 R >>
endobj
232 0 obj 
<</Length 656 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/except.cpp) Tj
ET
BT
565 822 Td
(76) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/except.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "except.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(    const char* Except::what\(\)\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(        return msg_.c_str\(\);\n) Tj
ET
BT
15 648 Td
(    }\n) Tj
ET
BT
15 637 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
234 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [235 0 R ] /Parent 2 0 R >>
endobj
235 0 obj 
<</Length 2985 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(77) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/message.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "message.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(    HFCallId* Message::add_call_id\(\)\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(        call_id_.append_item\(\);\n) Tj
ET
BT
15 648 Td
(        return call_id_.last\(\);\n) Tj
ET
BT
15 637 Td
(    }\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    HFCSeq* Message::add_cseq\(\)\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        cseq_.append_item\(\);\n) Tj
ET
BT
15 582 Td
(        return cseq_.last\(\);\n) Tj
ET
BT
15 571 Td
(    }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(    HFFrom* Message::add_from\(\)\n) Tj
ET
BT
15 538 Td
(    {\n) Tj
ET
BT
15 527 Td
(        from_.append_item\(\);\n) Tj
ET
BT
15 516 Td
(        return from_.last\(\);\n) Tj
ET
BT
15 505 Td
(    }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(    HFTo* Message::add_to\(\)\n) Tj
ET
BT
15 472 Td
(    {\n) Tj
ET
BT
15 461 Td
(        to_.append_item\(\);\n) Tj
ET
BT
15 450 Td
(        return to_.last\(\);\n) Tj
ET
BT
15 439 Td
(    }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(    HFVia* Message::add_via\(\)\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        via_.append_item\(\);\n) Tj
ET
BT
15 384 Td
(        return via_.last\(\);\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    HFAlertInfo* Message::add_alert_info\(\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        alert_info_.append_item\(\);\n) Tj
ET
BT
15 318 Td
(        return alert_info_.last\(\);\n) Tj
ET
BT
15 307 Td
(    }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(    HFAllowEvents* Message::add_allow_events\(\)\n) Tj
ET
BT
15 274 Td
(    {\n) Tj
ET
BT
15 263 Td
(        allow_events_.append_item\(\);\n) Tj
ET
BT
15 252 Td
(        return allow_events_.last\(\);\n) Tj
ET
BT
15 241 Td
(    }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(    HFDate* Message::add_date\(\)\n) Tj
ET
BT
15 208 Td
(    {\n) Tj
ET
BT
15 197 Td
(        date_.append_item\(\);\n) Tj
ET
BT
15 186 Td
(        return date_.last\(\);\n) Tj
ET
BT
15 175 Td
(    }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(    HFContact* Message::add_contact\(\)\n) Tj
ET
BT
15 142 Td
(    {\n) Tj
ET
BT
15 131 Td
(        contact_.append_item\(\);\n) Tj
ET
BT
15 120 Td
(        return contact_.last\(\);\n) Tj
ET
BT
15 109 Td
(    }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(    HFOrganization* Message::add_organization\(\)\n) Tj
ET
BT
15 76 Td
(    {\n) Tj
ET
BT
15 65 Td
(        organization_.append_item\(\);\n) Tj
ET
BT
15 54 Td
(        return organization_.last\(\);\n) Tj
ET
BT
15 43 Td
(    }\n) Tj
ET

endstream
endobj
237 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [238 0 R ] /Parent 2 0 R >>
endobj
238 0 obj 
<</Length 3240 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(78) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(    HFRecordRoute* Message::add_record_route\(\)\n) Tj
ET
BT
15 758 Td
(    {\n) Tj
ET
BT
15 747 Td
(        record_route_.append_item\(\);\n) Tj
ET
BT
15 736 Td
(        return record_route_.last\(\);\n) Tj
ET
BT
15 725 Td
(    }\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(    HFRetryAfter* Message::add_retry_after\(\)\n) Tj
ET
BT
15 692 Td
(    {\n) Tj
ET
BT
15 681 Td
(        retry_after_.append_item\(\);\n) Tj
ET
BT
15 670 Td
(        return retry_after_.last\(\);\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    HFSubject* Message::add_subject\(\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        subject_.append_item\(\);\n) Tj
ET
BT
15 604 Td
(        return subject_.last\(\);\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    HFSupported* Message::add_supported\(\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        supported_.append_item\(\);\n) Tj
ET
BT
15 538 Td
(        return supported_.last\(\);\n) Tj
ET
BT
15 527 Td
(    }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    HFTimestamp* Message::add_timestamp\(\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        timestamp_.append_item\(\);\n) Tj
ET
BT
15 472 Td
(        return timestamp_.last\(\);\n) Tj
ET
BT
15 461 Td
(    }\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    HFUserAgent* Message::add_user_agent\(\)\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(        user_agent_.append_item\(\);\n) Tj
ET
BT
15 406 Td
(        return user_agent_.last\(\);\n) Tj
ET
BT
15 395 Td
(    }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    HFAnswerMode* Message::add_answer_mode\(\)\n) Tj
ET
BT
15 362 Td
(    {\n) Tj
ET
BT
15 351 Td
(        answer_mode_.append_item\(\);\n) Tj
ET
BT
15 340 Td
(        return answer_mode_.last\(\);\n) Tj
ET
BT
15 329 Td
(    }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(    HFPrivAnswerMode* Message::add_priv_answer_mode\(\)\n) Tj
ET
BT
15 296 Td
(    {\n) Tj
ET
BT
15 285 Td
(        priv_answer_mode_.append_item\(\);\n) Tj
ET
BT
15 274 Td
(        return priv_answer_mode_.last\(\);\n) Tj
ET
BT
15 263 Td
(    }\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(    HFAccept* Message::add_accept\(\)\n) Tj
ET
BT
15 230 Td
(    {\n) Tj
ET
BT
15 219 Td
(        accept_.append_item\(\);\n) Tj
ET
BT
15 208 Td
(        return accept_.last\(\);\n) Tj
ET
BT
15 197 Td
(    }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    HFAcceptContact* Message::add_accept_contact\(\)\n) Tj
ET
BT
15 164 Td
(    {\n) Tj
ET
BT
15 153 Td
(        accept_contact_.append_item\(\);\n) Tj
ET
BT
15 142 Td
(        return accept_contact_.last\(\);\n) Tj
ET
BT
15 131 Td
(    }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(    HFAcceptEncoding* Message::add_accept_encoding\(\)\n) Tj
ET
BT
15 98 Td
(    {\n) Tj
ET
BT
15 87 Td
(        accept_encoding_.append_item\(\);\n) Tj
ET
BT
15 76 Td
(        return accept_encoding_.last\(\);\n) Tj
ET
BT
15 65 Td
(    }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(    HFAcceptLanguage* Message::add_accept_language\(\)\n) Tj
ET

endstream
endobj
240 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [241 0 R ] /Parent 2 0 R >>
endobj
241 0 obj 
<</Length 3245 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(79) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(        accept_language_.append_item\(\);\n) Tj
ET
BT
15 758 Td
(        return accept_language_.last\(\);\n) Tj
ET
BT
15 747 Td
(    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    HFAuthorization* Message::add_authorization\(\)\n) Tj
ET
BT
15 714 Td
(    {\n) Tj
ET
BT
15 703 Td
(        authorization_.append_item\(\);\n) Tj
ET
BT
15 692 Td
(        return authorization_.last\(\);\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    HFCallInfo* Message::add_call_info\(\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        call_info_.append_item\(\);\n) Tj
ET
BT
15 626 Td
(        return call_info_.last\(\);\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    HFEvent* Message::add_event\(\)\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        event_.append_item\(\);\n) Tj
ET
BT
15 560 Td
(        return event_.last\(\);\n) Tj
ET
BT
15 549 Td
(    }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(    HFInReplyTo* Message::add_in_replay_to\(\)\n) Tj
ET
BT
15 516 Td
(    {\n) Tj
ET
BT
15 505 Td
(        in_replay_to_.append_item\(\);\n) Tj
ET
BT
15 494 Td
(        return in_replay_to_.last\(\);\n) Tj
ET
BT
15 483 Td
(    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    HFJoin* Message::add_join\(\)\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(        join_.append_item\(\);\n) Tj
ET
BT
15 428 Td
(        return join_.last\(\);\n) Tj
ET
BT
15 417 Td
(    }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(    HFPriority* Message::add_priority\(\)\n) Tj
ET
BT
15 384 Td
(    {\n) Tj
ET
BT
15 373 Td
(        priority_.append_item\(\);\n) Tj
ET
BT
15 362 Td
(        return priority_.last\(\);\n) Tj
ET
BT
15 351 Td
(    }\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    HFPrivacy* Message::add_privacy\(\)\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        privacy_.append_item\(\);\n) Tj
ET
BT
15 296 Td
(        return privacy_.last\(\);\n) Tj
ET
BT
15 285 Td
(    }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    HFProxyAuthorization* Message::add_proxy_authorization\(\)\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(        proxy_authorization_.append_item\(\);\n) Tj
ET
BT
15 230 Td
(        return proxy_authorization_.last\(\);\n) Tj
ET
BT
15 219 Td
(    }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(    HFProxyRequire* Message::add_proxy_require\(\)\n) Tj
ET
BT
15 186 Td
(    {\n) Tj
ET
BT
15 175 Td
(        proxy_require_.append_item\(\);\n) Tj
ET
BT
15 164 Td
(        return proxy_require_.last\(\);\n) Tj
ET
BT
15 153 Td
(    }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(    HFPOSPAuthToken* Message::add_p_osp_auth_token\(\)\n) Tj
ET
BT
15 120 Td
(    {\n) Tj
ET
BT
15 109 Td
(        p_osp_auth_token_.append_item\(\);\n) Tj
ET
BT
15 98 Td
(        return p_osp_auth_token_.last\(\);\n) Tj
ET
BT
15 87 Td
(    }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    HFPAssertedIdentity* Message::add_p_asserted_identity\(\)\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(        p_asserted_identity_.append_item\(\);\n) Tj
ET

endstream
endobj
243 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [244 0 R ] /Parent 2 0 R >>
endobj
244 0 obj 
<</Length 3228 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(80) Tj
ET
BT
15 780 Td
(        return p_asserted_identity_.last\(\);\n) Tj
ET
BT
15 769 Td
(    }\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(    HFPPreferredIdentity* Message::add_p_preferred_identity\(\)\n) Tj
ET
BT
15 736 Td
(    {\n) Tj
ET
BT
15 725 Td
(        p_preferred_identity_.append_item\(\);\n) Tj
ET
BT
15 714 Td
(        return p_preferred_identity_.last\(\);\n) Tj
ET
BT
15 703 Td
(    }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(    HFMaxForwards* Message::add_max_forwards\(\)\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(        max_forwards_.append_item\(\);\n) Tj
ET
BT
15 648 Td
(        return max_forwards_.last\(\);\n) Tj
ET
BT
15 637 Td
(    }\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    HFReason* Message::add_reason\(\)\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        reason_.append_item\(\);\n) Tj
ET
BT
15 582 Td
(        return reason_.last\(\);\n) Tj
ET
BT
15 571 Td
(    }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(    HFReferTo* Message::add_refer_to\(\)\n) Tj
ET
BT
15 538 Td
(    {\n) Tj
ET
BT
15 527 Td
(        refer_to_.append_item\(\);\n) Tj
ET
BT
15 516 Td
(        return refer_to_.last\(\);\n) Tj
ET
BT
15 505 Td
(    }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(    HFReferredBy* Message::add_referred_by\(\)\n) Tj
ET
BT
15 472 Td
(    {\n) Tj
ET
BT
15 461 Td
(        referred_by_.append_item\(\);\n) Tj
ET
BT
15 450 Td
(        return referred_by_.last\(\);\n) Tj
ET
BT
15 439 Td
(    }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(    HFReplyTo* Message::add_reply_to\(\)\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        reply_to_.append_item\(\);\n) Tj
ET
BT
15 384 Td
(        return reply_to_.last\(\);\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    HFReplaces* Message::add_replaces\(\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        replaces_.append_item\(\);\n) Tj
ET
BT
15 318 Td
(        return replaces_.last\(\);\n) Tj
ET
BT
15 307 Td
(    }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(    HFRejectContact* Message::add_reject_contact\(\)\n) Tj
ET
BT
15 274 Td
(    {\n) Tj
ET
BT
15 263 Td
(        reject_contact_.append_item\(\);\n) Tj
ET
BT
15 252 Td
(        return reject_contact_.last\(\);\n) Tj
ET
BT
15 241 Td
(    }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(    HFRequestDisposition* Message::add_request_disposition\(\)\n) Tj
ET
BT
15 208 Td
(    {\n) Tj
ET
BT
15 197 Td
(        request_disposition_.append_item\(\);\n) Tj
ET
BT
15 186 Td
(        return request_disposition_.last\(\);\n) Tj
ET
BT
15 175 Td
(    }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(    HFRequire* Message::add_require\(\)\n) Tj
ET
BT
15 142 Td
(    {\n) Tj
ET
BT
15 131 Td
(        require_.append_item\(\);\n) Tj
ET
BT
15 120 Td
(        return require_.last\(\);\n) Tj
ET
BT
15 109 Td
(    }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(    HFRoute* Message::add_route\(\)\n) Tj
ET
BT
15 76 Td
(    {\n) Tj
ET
BT
15 65 Td
(        route_.append_item\(\);\n) Tj
ET
BT
15 54 Td
(        return route_.last\(\);\n) Tj
ET
BT
15 43 Td
(    }\n) Tj
ET

endstream
endobj
246 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [247 0 R ] /Parent 2 0 R >>
endobj
247 0 obj 
<</Length 3263 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(81) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(    HFRack* Message::add_rack\(\)\n) Tj
ET
BT
15 758 Td
(    {\n) Tj
ET
BT
15 747 Td
(        rack_.append_item\(\);\n) Tj
ET
BT
15 736 Td
(        return rack_.last\(\);\n) Tj
ET
BT
15 725 Td
(    }\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(    HFSessionExpires* Message::add_session_expires\(\)\n) Tj
ET
BT
15 692 Td
(    {\n) Tj
ET
BT
15 681 Td
(        session_expires_.append_item\(\);\n) Tj
ET
BT
15 670 Td
(        return session_expires_.last\(\);\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    HFSubscriptionState* Message::add_subscription_state\(\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        subscription_state_.append_item\(\);\n) Tj
ET
BT
15 604 Td
(        return subscription_state_.last\(\);\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    HFAuthenticationInfo* Message::add_authentication_info\(\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        authentication_info_.append_item\(\);\n) Tj
ET
BT
15 538 Td
(        return authentication_info_.last\(\);\n) Tj
ET
BT
15 527 Td
(    }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    HFErrorInfo* Message::add_error_info\(\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        error_info_.append_item\(\);\n) Tj
ET
BT
15 472 Td
(        return error_info_.last\(\);\n) Tj
ET
BT
15 461 Td
(    }\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    HFMinExpires* Message::add_min_expires\(\)\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(        min_expires_.append_item\(\);\n) Tj
ET
BT
15 406 Td
(        return min_expires_.last\(\);\n) Tj
ET
BT
15 395 Td
(    }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    HFMinSE* Message::add_min_se\(\)\n) Tj
ET
BT
15 362 Td
(    {\n) Tj
ET
BT
15 351 Td
(        min_se_.append_item\(\);\n) Tj
ET
BT
15 340 Td
(        return min_se_.last\(\);\n) Tj
ET
BT
15 329 Td
(    }\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(    HFProxyAuthenticate* Message::add_proxy_authenticate\(\)\n) Tj
ET
BT
15 296 Td
(    {\n) Tj
ET
BT
15 285 Td
(        proxy_authenticate_.append_item\(\);\n) Tj
ET
BT
15 274 Td
(        return proxy_authenticate_.last\(\);\n) Tj
ET
BT
15 263 Td
(    }\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(    HFServer* Message::add_server\(\)\n) Tj
ET
BT
15 230 Td
(    {\n) Tj
ET
BT
15 219 Td
(        server_.append_item\(\);\n) Tj
ET
BT
15 208 Td
(        return server_.last\(\);\n) Tj
ET
BT
15 197 Td
(    }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    HFUnsupported* Message::add_unsupported\(\)\n) Tj
ET
BT
15 164 Td
(    {\n) Tj
ET
BT
15 153 Td
(        unsupported_.append_item\(\);\n) Tj
ET
BT
15 142 Td
(        return unsupported_.last\(\);\n) Tj
ET
BT
15 131 Td
(    }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(    HFWarning* Message::add_warning\(\)\n) Tj
ET
BT
15 98 Td
(    {\n) Tj
ET
BT
15 87 Td
(        warning_.append_item\(\);\n) Tj
ET
BT
15 76 Td
(        return warning_.last\(\);\n) Tj
ET
BT
15 65 Td
(    }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(    HFWWWAuthenticate* Message::add_www_authenticate\(\)\n) Tj
ET

endstream
endobj
249 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [250 0 R ] /Parent 2 0 R >>
endobj
250 0 obj 
<</Length 3435 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(82) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(        www_authenticate_.append_item\(\);\n) Tj
ET
BT
15 758 Td
(        return www_authenticate_.last\(\);\n) Tj
ET
BT
15 747 Td
(    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    HFRSeq* Message::add_rseq\(\)\n) Tj
ET
BT
15 714 Td
(    {\n) Tj
ET
BT
15 703 Td
(        rseq_.append_item\(\);\n) Tj
ET
BT
15 692 Td
(        return rseq_.last\(\);\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    HFAllow* Message::add_allow\(\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        allow_.append_item\(\);\n) Tj
ET
BT
15 626 Td
(        return allow_.last\(\);\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    HFContentEncoding* Message::add_content_encoding\(\)\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        content_encoding_.append_item\(\);\n) Tj
ET
BT
15 560 Td
(        return content_encoding_.last\(\);\n) Tj
ET
BT
15 549 Td
(    }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(    HFContentLength* Message::add_content_length\(\)\n) Tj
ET
BT
15 516 Td
(    {\n) Tj
ET
BT
15 505 Td
(        content_length_.append_item\(\);\n) Tj
ET
BT
15 494 Td
(        content_length_.last\(\)->length\(user_data_.size\(\)\);\n) Tj
ET
BT
15 483 Td
(        return content_length_.last\(\);\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    HFContentDisposition* Message::add_content_disposition\(\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        content_disposition_.append_item\(\);\n) Tj
ET
BT
15 417 Td
(        return content_disposition_.last\(\);\n) Tj
ET
BT
15 406 Td
(    }\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(    HFContentLanguage* Message::add_content_language\(\)\n) Tj
ET
BT
15 373 Td
(    {\n) Tj
ET
BT
15 362 Td
(        content_language_.append_item\(\);\n) Tj
ET
BT
15 351 Td
(        return content_language_.last\(\);\n) Tj
ET
BT
15 340 Td
(    }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(    HFContentType* Message::add_content_type\(\)\n) Tj
ET
BT
15 307 Td
(    {\n) Tj
ET
BT
15 296 Td
(        content_type_.append_item\(\);\n) Tj
ET
BT
15 285 Td
(        return content_type_.last\(\);\n) Tj
ET
BT
15 274 Td
(    }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(    HFExpires* Message::add_expires\(\)\n) Tj
ET
BT
15 241 Td
(    {\n) Tj
ET
BT
15 230 Td
(        expires_.append_item\(\);\n) Tj
ET
BT
15 219 Td
(        return expires_.last\(\);\n) Tj
ET
BT
15 208 Td
(    }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    HFMIMEVersion* Message::add_mime_version\(\)\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(        mime_version_.append_item\(\);\n) Tj
ET
BT
15 153 Td
(        return mime_version_.last\(\);\n) Tj
ET
BT
15 142 Td
(    }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(    std::ostream& operator<< \(std::ostream& o, Message& msg\)\n) Tj
ET
BT
15 109 Td
(    {\n) Tj
ET
BT
15 98 Td
(        out_if_not_null\(o, msg.req_line_\);\n) Tj
ET
BT
15 87 Td
(        out_if_not_null\(o, msg.resp_status_\);\n) Tj
ET
BT
15 76 Td
(        out_if_not_empty\(o, msg.call_id_\);\n) Tj
ET
BT
15 65 Td
(        out_if_not_empty\(o, msg.cseq_\);\n) Tj
ET
BT
15 54 Td
(        out_if_not_empty\(o, msg.from_\);\n) Tj
ET
BT
15 43 Td
(        out_if_not_empty\(o, msg.to_\);\n) Tj
ET

endstream
endobj
252 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [253 0 R ] /Parent 2 0 R >>
endobj
253 0 obj 
<</Length 4801 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(83) Tj
ET
BT
15 780 Td
(        out_if_not_empty\(o, msg.via_\);\n) Tj
ET
BT
15 769 Td
(        out_if_not_empty\(o, msg.alert_info_\);\n) Tj
ET
BT
15 758 Td
(        out_if_not_empty\(o, msg.allow_events_\);\n) Tj
ET
BT
15 747 Td
(        out_if_not_empty\(o, msg.date_\);\n) Tj
ET
BT
15 736 Td
(        out_if_not_empty\(o, msg.contact_\);\n) Tj
ET
BT
15 725 Td
(        out_if_not_empty\(o, msg.organization_\);\n) Tj
ET
BT
15 714 Td
(        out_if_not_empty\(o, msg.record_route_\);\n) Tj
ET
BT
15 703 Td
(        out_if_not_empty\(o, msg.retry_after_\);\n) Tj
ET
BT
15 692 Td
(        out_if_not_empty\(o, msg.subject_\);\n) Tj
ET
BT
15 681 Td
(        out_if_not_empty\(o, msg.supported_\);\n) Tj
ET
BT
15 670 Td
(        out_if_not_empty\(o, msg.timestamp_\);\n) Tj
ET
BT
15 659 Td
(        out_if_not_empty\(o, msg.user_agent_\);\n) Tj
ET
BT
15 648 Td
(        out_if_not_empty\(o, msg.answer_mode_\);\n) Tj
ET
BT
15 637 Td
(        out_if_not_empty\(o, msg.priv_answer_mode_\);\n) Tj
ET
BT
15 626 Td
(        out_if_not_empty\(o, msg.accept_\);\n) Tj
ET
BT
15 615 Td
(        out_if_not_empty\(o, msg.accept_contact_\);\n) Tj
ET
BT
15 604 Td
(        out_if_not_empty\(o, msg.accept_encoding_\);\n) Tj
ET
BT
15 593 Td
(        out_if_not_empty\(o, msg.accept_language_\);\n) Tj
ET
BT
15 582 Td
(        out_if_not_empty\(o, msg.authorization_\);\n) Tj
ET
BT
15 571 Td
(        out_if_not_empty\(o, msg.call_info_\);\n) Tj
ET
BT
15 560 Td
(        out_if_not_empty\(o, msg.event_\);\n) Tj
ET
BT
15 549 Td
(        out_if_not_empty\(o, msg.in_replay_to_\);\n) Tj
ET
BT
15 538 Td
(        out_if_not_empty\(o, msg.join_\);\n) Tj
ET
BT
15 527 Td
(        out_if_not_empty\(o, msg.priority_\);\n) Tj
ET
BT
15 516 Td
(        out_if_not_empty\(o, msg.privacy_\);\n) Tj
ET
BT
15 505 Td
(        out_if_not_empty\(o, msg.proxy_authorization_\);\n) Tj
ET
BT
15 494 Td
(        out_if_not_empty\(o, msg.proxy_require_\);\n) Tj
ET
BT
15 483 Td
(        out_if_not_empty\(o, msg.p_osp_auth_token_\);\n) Tj
ET
BT
15 472 Td
(        out_if_not_empty\(o, msg.p_asserted_identity_\);\n) Tj
ET
BT
15 461 Td
(        out_if_not_empty\(o, msg.p_preferred_identity_\);\n) Tj
ET
BT
15 450 Td
(        out_if_not_empty\(o, msg.max_forwards_\);\n) Tj
ET
BT
15 439 Td
(        out_if_not_empty\(o, msg.reason_\);\n) Tj
ET
BT
15 428 Td
(        out_if_not_empty\(o, msg.refer_to_\);\n) Tj
ET
BT
15 417 Td
(        out_if_not_empty\(o, msg.referred_by_\);\n) Tj
ET
BT
15 406 Td
(        out_if_not_empty\(o, msg.reply_to_\);\n) Tj
ET
BT
15 395 Td
(        out_if_not_empty\(o, msg.replaces_\);\n) Tj
ET
BT
15 384 Td
(        out_if_not_empty\(o, msg.reject_contact_\);\n) Tj
ET
BT
15 373 Td
(        out_if_not_empty\(o, msg.request_disposition_\);\n) Tj
ET
BT
15 362 Td
(        out_if_not_empty\(o, msg.require_\);\n) Tj
ET
BT
15 351 Td
(        out_if_not_empty\(o, msg.route_\);\n) Tj
ET
BT
15 340 Td
(        out_if_not_empty\(o, msg.rack_\);\n) Tj
ET
BT
15 329 Td
(        out_if_not_empty\(o, msg.session_expires_\);\n) Tj
ET
BT
15 318 Td
(        out_if_not_empty\(o, msg.subscription_state_\);\n) Tj
ET
BT
15 307 Td
(        out_if_not_empty\(o, msg.authentication_info_\);\n) Tj
ET
BT
15 296 Td
(        out_if_not_empty\(o, msg.error_info_\);\n) Tj
ET
BT
15 285 Td
(        out_if_not_empty\(o, msg.min_expires_\);\n) Tj
ET
BT
15 274 Td
(        out_if_not_empty\(o, msg.min_se_\);\n) Tj
ET
BT
15 263 Td
(        out_if_not_empty\(o, msg.proxy_authenticate_\);\n) Tj
ET
BT
15 252 Td
(        out_if_not_empty\(o, msg.server_\);\n) Tj
ET
BT
15 241 Td
(        out_if_not_empty\(o, msg.unsupported_\);\n) Tj
ET
BT
15 230 Td
(        out_if_not_empty\(o, msg.warning_\);\n) Tj
ET
BT
15 219 Td
(        out_if_not_empty\(o, msg.www_authenticate_\);\n) Tj
ET
BT
15 208 Td
(        out_if_not_empty\(o, msg.rseq_\);\n) Tj
ET
BT
15 197 Td
(        out_if_not_empty\(o, msg.allow_\);\n) Tj
ET
BT
15 186 Td
(        out_if_not_empty\(o, msg.content_encoding_\);\n) Tj
ET
BT
15 175 Td
(//        out_if_not_empty\(o, msg.content_length_\);\n) Tj
ET
BT
15 164 Td
(        out_if_not_empty\(o, msg.content_disposition_\);\n) Tj
ET
BT
15 153 Td
(        out_if_not_empty\(o, msg.content_language_\);\n) Tj
ET
BT
15 142 Td
(        out_if_not_empty\(o, msg.content_type_\);\n) Tj
ET
BT
15 131 Td
(        out_if_not_empty\(o, msg.expires_\);\n) Tj
ET
BT
15 120 Td
(        out_if_not_empty\(o, msg.mime_version_\);\n) Tj
ET
BT
15 109 Td
(        out_if_not_empty\(o, msg.content_length_\);\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        o << msg.user_data_ << "\\r\\n";\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        return o;\n) Tj
ET
BT
15 54 Td
(    }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
255 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [256 0 R ] /Parent 2 0 R >>
endobj
256 0 obj 
<</Length 3581 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(84) Tj
ET
BT
15 780 Td
(    Message& Message::create\(\)\n) Tj
ET
BT
15 769 Td
(    {\n) Tj
ET
BT
15 758 Td
(        if \(!is_valid\(\)\)\n) Tj
ET
BT
15 747 Td
(        {\n) Tj
ET
BT
15 736 Td
(            // TODO: thown exception and log this\n) Tj
ET
BT
15 725 Td
(            std::cerr << __PRETTY_FUNCTION__ << ": message invalid!\\n";\n) Tj
ET
BT
15 714 Td
(            return *this;\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        return *this;\n) Tj
ET
BT
15 670 Td
(    }\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(    bool Message::is_valid\(\)\n) Tj
ET
BT
15 637 Td
(    {\n) Tj
ET
BT
15 626 Td
(        return_false_if_true\(call_id_.empty\(\)\) \n) Tj
ET
BT
15 615 Td
(        return_false_if_true\(cseq_.empty\(\)\) \n) Tj
ET
BT
15 604 Td
(        return_false_if_true\(from_.empty\(\)\) \n) Tj
ET
BT
15 593 Td
(        return_false_if_true\(to_.empty\(\)\) \n) Tj
ET
BT
15 582 Td
(        return_false_if_true\(via_.empty\(\)\) \n) Tj
ET
BT
15 571 Td
(//        return_false_if_true\(max_forwards_.empty\(\) && resp_status_.empty\(\)\) \n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        return true;\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    int Message::get_method_from_buffer\(\n) Tj
ET
BT
15 505 Td
(        MethodMapList &allowed_methods, std::string msg, std::string sym\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        std::string ret = msg.substr\(0, msg.find_first_of\(sym\)\);\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        for \(auto &it : allowed_methods\)\n) Tj
ET
BT
15 450 Td
(        {\n) Tj
ET
BT
15 439 Td
(            if \(ret == it.second\)\n) Tj
ET
BT
15 428 Td
(                return it.code\(\);\n) Tj
ET
BT
15 417 Td
(        }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        return -1;\n) Tj
ET
BT
15 384 Td
(    }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    int Message::get_response_code_from_buffer\(\n) Tj
ET
BT
15 351 Td
(        RespCodeList &allowed_responses, std::string msg, std::string sym\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        RespCodeList::iterator it;\n) Tj
ET
BT
15 318 Td
(        size_t pos = msg.find_first_of\(sym\);\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        if \(pos == std::string::npos\)\n) Tj
ET
BT
15 285 Td
(            return -1;\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        pos++;\n) Tj
ET
BT
15 252 Td
(        int next = msg.find_first_of\(sym, pos\);\n) Tj
ET
BT
15 241 Td
(        std::string ret = msg.substr\(pos, next-pos\);\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        for \(it = allowed_responses.begin\(\); it != allowed_responses.end\(\); it++\)\n) Tj
ET
BT
15 208 Td
(        {\n) Tj
ET
BT
15 197 Td
(            if \(ret == it->CodeStr\(\)\)\n) Tj
ET
BT
15 186 Td
(                return it->code\(\);\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        return -1;\n) Tj
ET
BT
15 142 Td
(    }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(    std::vector<std::string> Message::split_by\(std::string msg, std::string sym\)\n) Tj
ET
BT
15 109 Td
(    {\n) Tj
ET
BT
15 98 Td
(        size_t pos, next;\n) Tj
ET
BT
15 87 Td
(        std::vector<std::string> ret;\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        for \(next = pos = 0; ; pos = next+1\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(            next = msg.find_first_of\(sym, pos\);\n) Tj
ET

endstream
endobj
258 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [259 0 R ] /Parent 2 0 R >>
endobj
259 0 obj 
<</Length 6781 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(85) Tj
ET
BT
15 780 Td
(            if \(next == std::string::npos\)\n) Tj
ET
BT
15 769 Td
(                break;\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(            ret.push_back\(msg.substr\(pos, next-pos\)\);\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        return ret;\n) Tj
ET
BT
15 703 Td
(    }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(    void Message::parse_dispatch\(std::string field, size_t &pos\)\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(        switch\(allowed_fields_[field]\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            case HF_CALLID:             add_call_id\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 626 Td
(            case HF_CSEQ:               add_cseq\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 615 Td
(            case HF_FROM:               add_from\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 604 Td
(            case HF_TO:                 add_to\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 593 Td
(            case HF_VIA:                add_via\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 582 Td
(            case HF_ALERT_INFO:         add_alert_info\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 571 Td
(            case HF_ALLOW_EVENTS:       add_allow_events\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 560 Td
(            case HF_DATE:               add_date\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 549 Td
(            case HF_CONTACT:            add_contact\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 538 Td
(            case HF_ORGANIZATION:       add_organization\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 527 Td
(            case HF_RECORD_ROUTE:       add_record_route\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 516 Td
(            case HF_RETRY_AFTER:        add_retry_after\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 505 Td
(            case HF_SUBJECT:            add_subject\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 494 Td
(            case HF_SUPPORTED:          add_supported\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 483 Td
(            case HF_TIMESTAMP:          add_timestamp\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 472 Td
(            case HF_USER_AGENT:         add_user_agent\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 461 Td
(            case HF_ANSWER_MODE:        add_answer_mode\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 450 Td
(            case HF_PRIV_ANSWER_MODE:   add_priv_answer_mode\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 439 Td
(            case HF_ACCEPT:             add_accept\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 428 Td
(            case HF_ACCEPT_CONTACT:     add_accept_contact\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 417 Td
(            case HF_ACCEPT_ENCODING:    add_accept_encoding\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 406 Td
(            case HF_ACCEPT_LANGUAGE:    add_accept_language\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 395 Td
(            case HF_AUTHORIZATION:      add_authorization\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 384 Td
(            case HF_CALL_INFO:          add_call_info\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 373 Td
(            case HF_EVENT:              add_event\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 362 Td
(            case HF_IN_REPLY_TO:        add_in_replay_to\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 351 Td
(            case HF_JOIN:               add_join\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 340 Td
(            case HF_PRIORITY:           add_priority\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 329 Td
(            case HF_PRIVACY:            add_privacy\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 318 Td
(            case HF_PROXY_AUTHORIZATION:add_proxy_authorization\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 307 Td
(            case HF_PROXY_REQUIRE:      add_proxy_require\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 296 Td
(            case HF_P_OSP_AUTHTOKEN:    add_p_osp_auth_token\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 285 Td
(            case HF_PASSERTED_IDENTITY: add_p_asserted_identity\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 274 Td
(            case HF_PPREFERRED_IDENTITY:add_p_preferred_identity\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 263 Td
(            case HF_MAX_FORWARDS:       add_max_forwards\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 252 Td
(            case HF_REASON:             add_reason\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 241 Td
(            case HF_REFER_TO:           add_refer_to\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 230 Td
(            case HF_REFERRED_BY:        add_referred_by\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 219 Td
(            case HF_REPLY_TO:           add_reply_to\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 208 Td
(            case HF_REPLACES:           add_replaces\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 197 Td
(            case HF_REJECT_CONTACT:     add_reject_contact\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 186 Td
(            case HF_REQUEST_DISPOSITION:add_request_disposition\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 175 Td
(            case HF_REQUIRE:            add_require\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 164 Td
(            case HF_ROUTE:              add_route\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 153 Td
(            case HF_RACK:               add_rack\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 142 Td
(            case HF_SESSION_EXPIRES:    add_session_expires\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 131 Td
(            case HF_SUBSCRIPTION_STATE: add_subscription_state\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 120 Td
(            case HF_AUTHENTICATIONINFO: add_authentication_info\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 109 Td
(            case HF_ERROR_INFO:         add_error_info\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 98 Td
(            case HF_MIN_EXPIRES:        add_min_expires\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 87 Td
(            case HF_MIN_SE:             add_min_se\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 76 Td
(            case HF_PROXY_AUTHENTICATE: add_proxy_authenticate\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 65 Td
(            case HF_SERVER:             add_server\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 54 Td
(            case HF_UNSUPPORTED:        add_unsupported\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 43 Td
(            case HF_WARNING:            add_warning\(\)->parse\(msg_, pos\); break;\n) Tj
ET

endstream
endobj
261 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [262 0 R ] /Parent 2 0 R >>
endobj
262 0 obj 
<</Length 4126 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(86) Tj
ET
BT
15 780 Td
(            case HF_WWW_AUTHENTICATE:   add_www_authenticate\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 769 Td
(            case HF_RSEQ:               add_rseq\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 758 Td
(            case HF_ALLOW:              add_allow\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 747 Td
(            case HF_CONTENT_ENCODING:   add_content_encoding\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 736 Td
(            case HF_CONTENT_LENGTH:     add_content_length\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 725 Td
(            case HF_CONTENT_DISPOSITION: add_content_disposition\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 714 Td
(            case HF_CONTENT_LANGUAGE:   add_content_language\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 703 Td
(            case HF_CONTENT_TYPE:       add_content_type\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 692 Td
(            case HF_EXPIRES:            add_expires\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 681 Td
(            case HF_MIME_VERSION:       add_mime_version\(\)->parse\(msg_, pos\); break;\n) Tj
ET
BT
15 670 Td
(            default:\n) Tj
ET
BT
15 659 Td
(            {\n) Tj
ET
BT
15 648 Td
(                std::cerr << "Unexpected header: " << field << '\\n';\n) Tj
ET
BT
15 637 Td
(            }\n) Tj
ET
BT
15 626 Td
(        }\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    /* parse buffered header into formated header fields\n) Tj
ET
BT
15 582 Td
(     */\n) Tj
ET
BT
15 571 Td
(    int Message::parse\(size_t &pos\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        if \(msg_.empty\(\)\) return PROCEDURE_ERROR;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        bool run = true;\n) Tj
ET
BT
15 516 Td
(        std::string buffer;\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        while \(run\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            if \(pos+1 >= msg_.size\(\)\) break;\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(            switch\(msg_.at\(pos\)\)\n) Tj
ET
BT
15 439 Td
(            {\n) Tj
ET
BT
15 428 Td
(                CASE_ALPHA\n) Tj
ET
BT
15 417 Td
(                case '-':\n) Tj
ET
BT
15 406 Td
(                {\n) Tj
ET
BT
15 395 Td
(                    buffer += msg_.at\(pos++\);\n) Tj
ET
BT
15 384 Td
(                    break;\n) Tj
ET
BT
15 373 Td
(                }\n) Tj
ET
BT
15 362 Td
(                case '\\r':\n) Tj
ET
BT
15 351 Td
(                {\n) Tj
ET
BT
15 340 Td
(                    pos++;\n) Tj
ET
BT
15 329 Td
(                    break;\n) Tj
ET
BT
15 318 Td
(                }\n) Tj
ET
BT
15 307 Td
(                case '\\n':\n) Tj
ET
BT
15 296 Td
(                {\n) Tj
ET
BT
15 285 Td
(                    pos++;\n) Tj
ET
BT
15 274 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 263 Td
(                    break;\n) Tj
ET
BT
15 252 Td
(                }\n) Tj
ET
BT
15 241 Td
(                case ':':\n) Tj
ET
BT
15 230 Td
(                {\n) Tj
ET
BT
15 219 Td
(                    pos++;\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(                    parse_dispatch\(buffer, pos\);\n) Tj
ET
BT
15 186 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(                    break;\n) Tj
ET
BT
15 153 Td
(                }\n) Tj
ET
BT
15 142 Td
(                default:\n) Tj
ET
BT
15 131 Td
(                {\n) Tj
ET
BT
15 120 Td
(                    if \(content_length_.size\(\)\)\n) Tj
ET
BT
15 109 Td
(                    {\n) Tj
ET
BT
15 98 Td
(                        run = false;\n) Tj
ET
BT
15 87 Td
(                    }\n) Tj
ET
BT
15 76 Td
(                    else\n) Tj
ET
BT
15 65 Td
(                    {\n) Tj
ET
BT
15 54 Td
(                        std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg_.at\(pos\) << '\(' << \(int\)msg_.at\(pos\)<< "\)': "\
 << buffer << "\\n";\n) Tj
ET
BT
15 43 Td
(                        pos++;\n) Tj
ET

endstream
endobj
264 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [265 0 R ] /Parent 2 0 R >>
endobj
265 0 obj 
<</Length 3291 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(87) Tj
ET
BT
15 780 Td
(                        buffer.clear\(\);\n) Tj
ET
BT
15 769 Td
(                    }\n) Tj
ET
BT
15 758 Td
(                }\n) Tj
ET
BT
15 747 Td
(            }\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        if \(content_length_.size\(\)\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            size_t i = 1, len = 0;\n) Tj
ET
BT
15 681 Td
(            std::istringstream in\(content_length_.first\(\)->length\(\)\);\n) Tj
ET
BT
15 670 Td
(            in >> len;\n) Tj
ET
BT
15 659 Td
(    \n) Tj
ET
BT
15 648 Td
(            while \(pos < msg_.size\(\) && i < len\)\n) Tj
ET
BT
15 637 Td
(            {\n) Tj
ET
BT
15 626 Td
(                buffer += msg_.at\(pos++\);\n) Tj
ET
BT
15 615 Td
(            }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(            user_data_ = buffer;\n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 549 Td
(    }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(    RequestMessage& RequestMessage::create\(\)\n) Tj
ET
BT
15 516 Td
(    {\n) Tj
ET
BT
15 505 Td
(        Ancestor::create\(\);\n) Tj
ET
BT
15 494 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(//        std::ostringstream len;\n) Tj
ET
BT
15 461 Td
(//        len << user_data_.size\(\);\n) Tj
ET
BT
15 450 Td
(//        add_content_length\(\).length\(len.str\(\)\);\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        o << *this;\n) Tj
ET
BT
15 417 Td
(        msg_ = o.str\(\);\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        return *this;\n) Tj
ET
BT
15 384 Td
(    }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    int RequestMessage::parse\(size_t &pos\)\n) Tj
ET
BT
15 351 Td
(    {\n) Tj
ET
BT
15 340 Td
(        if \(msg_.empty\(\)\) return PROCEDURE_ERROR;\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        int ret;\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        if \(PROCEDURE_OK != \(ret = req_line_->parse\(msg_, pos\)\)\)\n) Tj
ET
BT
15 285 Td
(            return ret;\n) Tj
ET
BT
15 274 Td
(        Ancestor::parse\(pos\);\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        if \(!is_valid\(\)\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            std::cerr << __PRETTY_FUNCTION__ << ": message invalid!\\n";\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        std::cout << "-request------------------------\\n";\n) Tj
ET
BT
15 186 Td
(        std::cout << *this;\n) Tj
ET
BT
15 175 Td
(        std::cout << "--------------------------------\\n";\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 142 Td
(    }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(    RequestMessage::RequestMessage\(ResponseMessage &in_msg\)\n) Tj
ET
BT
15 109 Td
(    {\n) Tj
ET
BT
15 98 Td
(        req_line_ = std::make_shared<RequestLine>\(\);\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        add_call_id\(\)\n) Tj
ET
BT
15 65 Td
(        ->id\(in_msg.call_id_.first\(\)->id\(\)\);\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        add_from\(\)\n) Tj
ET

endstream
endobj
267 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [268 0 R ] /Parent 2 0 R >>
endobj
268 0 obj 
<</Length 3479 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(88) Tj
ET
BT
15 780 Td
(        ->add_name\(in_msg.from_.first\(\)->name\(\)\)\n) Tj
ET
BT
15 769 Td
(        .add_uri\(in_msg.from_.first\(\)->uri\(\)\);\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(        for \(auto &it : in_msg.from_.first\(\)->header_params_\)\n) Tj
ET
BT
15 736 Td
(        {\n) Tj
ET
BT
15 725 Td
(            from_.first\(\)->HeaderParam\(it.name\(\), it.value\(\)\);\n) Tj
ET
BT
15 714 Td
(        }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        add_to\(\)\n) Tj
ET
BT
15 681 Td
(        ->add_name\(in_msg.to_.first\(\)->name\(\)\)\n) Tj
ET
BT
15 670 Td
(        .add_uri\(in_msg.to_.first\(\)->uri\(\)\);\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        for \(auto &it : in_msg.to_.first\(\)->header_params_\)\n) Tj
ET
BT
15 637 Td
(        {\n) Tj
ET
BT
15 626 Td
(            to_.first\(\)->HeaderParam\(it.name\(\), it.value\(\)\);\n) Tj
ET
BT
15 615 Td
(        }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        add_via\(\)\n) Tj
ET
BT
15 582 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 571 Td
(        .add_sentby\(in_msg.via_.first\(\)->sent_by_\);\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        for \(auto &it : in_msg.via_.first\(\)->header_params_\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            via_.first\(\)->HeaderParam\(it.name\(\), it.value\(\)\);\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(    }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(    bool InviteMessage::is_valid\(\)\n) Tj
ET
BT
15 472 Td
(    {\n) Tj
ET
BT
15 461 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 450 Td
(        return_false_if_true\(contact_.empty\(\)\)\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        return true;\n) Tj
ET
BT
15 417 Td
(    }\n) Tj
ET
BT
15 406 Td
(    // RegisterMessage\n) Tj
ET
BT
15 395 Td
(    bool RegisterMessage::is_valid\(\)\n) Tj
ET
BT
15 384 Td
(    {\n) Tj
ET
BT
15 373 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        if \(record_route_.size\(\)\) record_route_.clear\(\);\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(        return true;\n) Tj
ET
BT
15 318 Td
(    }\n) Tj
ET
BT
15 307 Td
(    // AckMessage\n) Tj
ET
BT
15 296 Td
(    bool AckMessage::is_valid\(\)\n) Tj
ET
BT
15 285 Td
(    {\n) Tj
ET
BT
15 274 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 263 Td
(        return true;\n) Tj
ET
BT
15 252 Td
(    }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    AckMessage::AckMessage\(ResponseMessage &in_msg\)\n) Tj
ET
BT
15 219 Td
(    : RequestMessage\(in_msg\)\n) Tj
ET
BT
15 208 Td
(    {\n) Tj
ET
BT
15 197 Td
(        req_line_->method_ = METHOD_ACK;\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        add_cseq\(\)\n) Tj
ET
BT
15 164 Td
(        ->cseq\("1"\)\n) Tj
ET
BT
15 153 Td
(        .method\(METHOD_ACK.name\(\)\);\n) Tj
ET
BT
15 142 Td
(    }\n) Tj
ET
BT
15 131 Td
(    // ByeMessage\n) Tj
ET
BT
15 120 Td
(    bool ByeMessage::is_valid\(\)\n) Tj
ET
BT
15 109 Td
(    {\n) Tj
ET
BT
15 98 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 87 Td
(        return true;\n) Tj
ET
BT
15 76 Td
(    }\n) Tj
ET
BT
15 65 Td
(    // CancelMessage\n) Tj
ET
BT
15 54 Td
(    bool CancelMessage::is_valid\(\)\n) Tj
ET
BT
15 43 Td
(    {\n) Tj
ET

endstream
endobj
270 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [271 0 R ] /Parent 2 0 R >>
endobj
271 0 obj 
<</Length 3533 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(89) Tj
ET
BT
15 780 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 769 Td
(        return true;\n) Tj
ET
BT
15 758 Td
(    }\n) Tj
ET
BT
15 747 Td
(    // OptionsMessage\n) Tj
ET
BT
15 736 Td
(    bool OptionsMessage::is_valid\(\)\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 703 Td
(        return true;\n) Tj
ET
BT
15 692 Td
(    }\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(    // ReferMessage\n) Tj
ET
BT
15 659 Td
(    bool ReferMessage::is_valid\(\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 626 Td
(        return_false_if_true\(contact_.empty\(\)\)\n) Tj
ET
BT
15 615 Td
(        return_false_if_true\(refer_to_.empty\(\)\)\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        return true;\n) Tj
ET
BT
15 582 Td
(    }\n) Tj
ET
BT
15 571 Td
(    // SubscribeMessage\n) Tj
ET
BT
15 560 Td
(    bool SubscribeMessage::is_valid\(\)\n) Tj
ET
BT
15 549 Td
(    {\n) Tj
ET
BT
15 538 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 527 Td
(        return_false_if_true\(contact_.empty\(\)\)\n) Tj
ET
BT
15 516 Td
(        return_false_if_true\(event_.empty\(\)\)\n) Tj
ET
BT
15 505 Td
(        return_false_if_true\(allow_events_.empty\(\)\)\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        return true;\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(    // NotifyMessage\n) Tj
ET
BT
15 450 Td
(    bool NotifyMessage::is_valid\(\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 417 Td
(        return_false_if_true\(contact_.empty\(\)\)\n) Tj
ET
BT
15 406 Td
(        return_false_if_true\(event_.empty\(\)\)\n) Tj
ET
BT
15 395 Td
(        return_false_if_true\(allow_events_.empty\(\)\)\n) Tj
ET
BT
15 384 Td
(        return_false_if_true\(subscription_state_.empty\(\)\)\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        return true;\n) Tj
ET
BT
15 351 Td
(    }\n) Tj
ET
BT
15 340 Td
(    // MessageMessage\n) Tj
ET
BT
15 329 Td
(    bool MessageMessage::is_valid\(\)\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 296 Td
(        return true;\n) Tj
ET
BT
15 285 Td
(    }\n) Tj
ET
BT
15 274 Td
(    // InfoMessage\n) Tj
ET
BT
15 263 Td
(    bool InfoMessage::is_valid\(\)\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 230 Td
(        return true;\n) Tj
ET
BT
15 219 Td
(    }\n) Tj
ET
BT
15 208 Td
(    // PrackMessage\n) Tj
ET
BT
15 197 Td
(    bool PrackMessage::is_valid\(\)\n) Tj
ET
BT
15 186 Td
(    {\n) Tj
ET
BT
15 175 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 164 Td
(        return true;\n) Tj
ET
BT
15 153 Td
(    }\n) Tj
ET
BT
15 142 Td
(    // UpdateMessage\n) Tj
ET
BT
15 131 Td
(    bool UpdateMessage::is_valid\(\)\n) Tj
ET
BT
15 120 Td
(    {\n) Tj
ET
BT
15 109 Td
(        return_false_if_true\(!Ancestor::is_valid\(\)\)\n) Tj
ET
BT
15 98 Td
(        return_false_if_true\(contact_.empty\(\)\)\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        return true;\n) Tj
ET
BT
15 65 Td
(    }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(    ResponseMessage& ResponseMessage::create\(\)\n) Tj
ET

endstream
endobj
273 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [274 0 R ] /Parent 2 0 R >>
endobj
274 0 obj 
<</Length 3465 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(90) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(        Ancestor::create\(\);\n) Tj
ET
BT
15 758 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(//        std::ostringstream len;\n) Tj
ET
BT
15 725 Td
(//        len << user_data_.size\(\);\n) Tj
ET
BT
15 714 Td
(//        add_content_length\(\).length\(len.str\(\)\);\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        o << *this;\n) Tj
ET
BT
15 681 Td
(        msg_ = o.str\(\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        return *this;\n) Tj
ET
BT
15 648 Td
(    }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    int ResponseMessage::parse\(size_t &pos\)\n) Tj
ET
BT
15 615 Td
(    {\n) Tj
ET
BT
15 604 Td
(        if \(msg_.empty\(\)\) return PROCEDURE_ERROR;\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(        int ret;\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        if \(PROCEDURE_OK != \(ret = resp_status_->parse\(msg_, pos\)\)\)\n) Tj
ET
BT
15 549 Td
(            return ret;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        Ancestor::parse\(pos\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        if \(!is_valid\(\)\)\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            std::cerr << __PRETTY_FUNCTION__ << ": message invalid!\\n";\n) Tj
ET
BT
15 472 Td
(        }\n) Tj
ET
BT
15 461 Td
(        \n) Tj
ET
BT
15 450 Td
(        std::cout << "-reponse------------------------\\n";\n) Tj
ET
BT
15 439 Td
(        std::cout << *this;\n) Tj
ET
BT
15 428 Td
(        std::cout << "--------------------------------\\n";\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 395 Td
(    }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    ResponseMessage::ResponseMessage\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 362 Td
(    {\n) Tj
ET
BT
15 351 Td
(        resp_status_ = std::make_shared<ResponseStatus>\(\);\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(        add_call_id\(\)\n) Tj
ET
BT
15 318 Td
(        ->id\(in_msg.call_id_.last\(\)->id\(\)\);\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        add_from\(\)\n) Tj
ET
BT
15 285 Td
(        ->add_name\(in_msg.from_.last\(\)->name\(\)\)\n) Tj
ET
BT
15 274 Td
(        .add_uri\(in_msg.from_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        for \(auto &it : in_msg.from_.last\(\)->header_params_\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            from_.last\(\)->HeaderParam\(it.name\(\), it.value\(\)\);\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        add_to\(\)\n) Tj
ET
BT
15 186 Td
(        ->add_name\(in_msg.to_.last\(\)->name\(\)\)\n) Tj
ET
BT
15 175 Td
(        .add_uri\(in_msg.to_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        for \(auto &it : in_msg.to_.last\(\)->header_params_\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            to_.last\(\)->HeaderParam\(it.name\(\), it.value\(\)\);\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        add_cseq\(\)\n) Tj
ET
BT
15 87 Td
(        ->cseq\(in_msg.cseq_.last\(\)->cseq\(\)\)\n) Tj
ET
BT
15 76 Td
(        .method\(in_msg.cseq_.last\(\)->method\(\)\)\n) Tj
ET
BT
15 65 Td
(        .inc_seq\(\);\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        add_via\(\)\n) Tj
ET

endstream
endobj
276 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [277 0 R ] /Parent 2 0 R >>
endobj
277 0 obj 
<</Length 643 >>
stream
/F1 10 Tf
BT
123.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/message.cpp) Tj
ET
BT
565 822 Td
(91) Tj
ET
BT
15 780 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 769 Td
(        .add_sentby\(in_msg.via_.last\(\)->sent_by_\);\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(        for \(auto &it : in_msg.via_.last\(\)->header_params_\)\n) Tj
ET
BT
15 736 Td
(        {\n) Tj
ET
BT
15 725 Td
(            via_.last\(\)->HeaderParam\(it.name\(\), it.value\(\)\);\n) Tj
ET
BT
15 714 Td
(        }\n) Tj
ET
BT
15 703 Td
(    }\n) Tj
ET
BT
15 692 Td
(} // namespace EasySip\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET

endstream
endobj
279 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [280 0 R ] /Parent 2 0 R >>
endobj
280 0 obj 
<</Length 1597 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/thread.cpp) Tj
ET
BT
565 822 Td
(92) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/thread.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "thread.h"\n) Tj
ET
BT
15 714 Td
(#include <iostream>\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(namespace EasySip\n) Tj
ET
BT
15 681 Td
({\n) Tj
ET
BT
15 670 Td
(//    Thread::Thread\(\)\n) Tj
ET
BT
15 659 Td
(//    : id_\(0\), routine_\(0\), arg_\(0\)\n) Tj
ET
BT
15 648 Td
(//    {\n) Tj
ET
BT
15 637 Td
(//        pthread_attr_init\(&attr_\);\n) Tj
ET
BT
15 626 Td
(//        pthread_create\(&id_, &attr_, routine_, arg_\);\n) Tj
ET
BT
15 615 Td
(//    }\n) Tj
ET
BT
15 604 Td
(//\n) Tj
ET
BT
15 593 Td
(//    Thread::~Thread\(\)\n) Tj
ET
BT
15 582 Td
(//    {\n) Tj
ET
BT
15 571 Td
(//        pthread_attr_destroy\(&attr_\);\n) Tj
ET
BT
15 560 Td
(//\n) Tj
ET
BT
15 549 Td
(//        void *err = 0;\n) Tj
ET
BT
15 538 Td
(//        \n) Tj
ET
BT
15 527 Td
(//        if \(0 != pthread_join\(id_, &err\)\)\n) Tj
ET
BT
15 516 Td
(//        {\n) Tj
ET
BT
15 505 Td
(//            //TODO log and throw error\n) Tj
ET
BT
15 494 Td
(//            std::cerr << "pthread_join: " << reinterpret_cast<char*>\(err\) << '\\n'; \n) Tj
ET
BT
15 483 Td
(//        }\n) Tj
ET
BT
15 472 Td
(//\n) Tj
ET
BT
15 461 Td
(//        free\(err\);\n) Tj
ET
BT
15 450 Td
(//    }\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(} // namespace EasySip\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET

endstream
endobj
282 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [283 0 R ] /Parent 2 0 R >>
endobj
283 0 obj 
<</Length 3568 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(93) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/header_field.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "header_field.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(    T_HF_MAP HeaderFields::allowed_fields_;\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    int RequestLine::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        size_t next = 0;\n) Tj
ET
BT
15 626 Td
(        // read method\n) Tj
ET
BT
15 615 Td
(        if \(\(next = msg.find_first_of\(" ", pos\)\) != std::string::npos\)\n) Tj
ET
BT
15 604 Td
(        {\n) Tj
ET
BT
15 593 Td
(            method_.name\(msg.substr\(pos, next-pos\)\);\n) Tj
ET
BT
15 582 Td
(            pos = next + 1;\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        // read request-uri \n) Tj
ET
BT
15 538 Td
(        if \(\(next = msg.find_first_of\(" ", pos\)\) != std::string::npos\)\n) Tj
ET
BT
15 527 Td
(        {\n) Tj
ET
BT
15 516 Td
(            request_uri_ = msg.substr\(pos, next-pos\);\n) Tj
ET
BT
15 505 Td
(            pos = next + 1;\n) Tj
ET
BT
15 494 Td
(        }\n) Tj
ET
BT
15 483 Td
(        // TODO: check uri scheme return code 416 on error\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        // read version\n) Tj
ET
BT
15 450 Td
(        if \(\(next = msg.find_first_of\("\\n", pos\)\) != std::string::npos\)\n) Tj
ET
BT
15 439 Td
(        {\n) Tj
ET
BT
15 428 Td
(            version_ = msg.substr\(pos, next-pos\);\n) Tj
ET
BT
15 417 Td
(            pos = next + 1;\n) Tj
ET
BT
15 406 Td
(        }\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    int ResponseStatus::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        size_t next = 0;\n) Tj
ET
BT
15 318 Td
(        // read version\n) Tj
ET
BT
15 307 Td
(        if \(\(next = msg.find_first_of\(" ", pos\)\) != std::string::npos\)\n) Tj
ET
BT
15 296 Td
(        {\n) Tj
ET
BT
15 285 Td
(            version_ = msg.substr\(pos, next-pos\);\n) Tj
ET
BT
15 274 Td
(            pos = next + 1;\n) Tj
ET
BT
15 263 Td
(        }\n) Tj
ET
BT
15 252 Td
(        // read code\n) Tj
ET
BT
15 241 Td
(        if \(\(next = msg.find_first_of\(" ", pos\)\) != std::string::npos\)\n) Tj
ET
BT
15 230 Td
(        {\n) Tj
ET
BT
15 219 Td
(            int code;\n) Tj
ET
BT
15 208 Td
(            std::istringstream in\(msg.substr\(pos, next-pos\)\);\n) Tj
ET
BT
15 197 Td
(            in >> code;\n) Tj
ET
BT
15 186 Td
(            resp_code_.Code\(code\);\n) Tj
ET
BT
15 175 Td
(            pos = next + 1;\n) Tj
ET
BT
15 164 Td
(        }\n) Tj
ET
BT
15 153 Td
(        // read reason\n) Tj
ET
BT
15 142 Td
(        if \(\(next = msg.find_first_of\("\\n", pos\)\) != std::string::npos\)\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(            resp_code_.name\(msg.substr\(pos, next-pos\)\);\n) Tj
ET
BT
15 109 Td
(            pos = next + 1;\n) Tj
ET
BT
15 98 Td
(        }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 65 Td
(    }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(    std::ostream& operator<< \(std::ostream& o, HeaderField &hf\)\n) Tj
ET

endstream
endobj
285 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [286 0 R ] /Parent 2 0 R >>
endobj
286 0 obj 
<</Length 3403 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(94) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(        o << hf.field_ << ": ";\n) Tj
ET
BT
15 758 Td
(        hf.generate_values\(\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        o << hf.Values\(\);\n) Tj
ET
BT
15 725 Td
(        o << "\\r\\n";\n) Tj
ET
BT
15 714 Td
(//        o << hf.header_params_ << "\\n";\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        return o;\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    std::string HeaderField::operator\(\) \(\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 626 Td
(        o << *this;\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        return o.str\(\);\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    int HFBase_1_::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        bool read_head_param = false, run = true, in_aquote = false, in_dquote = false;\n) Tj
ET
BT
15 538 Td
(        std::string buffer, key;\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        while \(run\)\n) Tj
ET
BT
15 483 Td
(        {\n) Tj
ET
BT
15 472 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 461 Td
(            {\n) Tj
ET
BT
15 450 Td
(                case '"':\n) Tj
ET
BT
15 439 Td
(                {\n) Tj
ET
BT
15 428 Td
(                    in_dquote = !in_dquote;\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(                    if \(!in_dquote\)\n) Tj
ET
BT
15 373 Td
(                    {\n) Tj
ET
BT
15 362 Td
(                        add_name\(buffer\);\n) Tj
ET
BT
15 351 Td
(                        buffer.clear\(\);\n) Tj
ET
BT
15 340 Td
(                    }\n) Tj
ET
BT
15 329 Td
(                    break;\n) Tj
ET
BT
15 318 Td
(                }\n) Tj
ET
BT
15 307 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 296 Td
(                case '/':\n) Tj
ET
BT
15 285 Td
(                case '?':\n) Tj
ET
BT
15 274 Td
(                case ':':\n) Tj
ET
BT
15 263 Td
(                case '@':\n) Tj
ET
BT
15 252 Td
(                {\n) Tj
ET
BT
15 241 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 230 Td
(                    break;\n) Tj
ET
BT
15 219 Td
(                }\n) Tj
ET
BT
15 208 Td
(                case '<':\n) Tj
ET
BT
15 197 Td
(                {\n) Tj
ET
BT
15 186 Td
(                    in_aquote = true;\n) Tj
ET
BT
15 175 Td
(                    pos++;\n) Tj
ET
BT
15 164 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 153 Td
(                    break;\n) Tj
ET
BT
15 142 Td
(                }\n) Tj
ET
BT
15 131 Td
(                case '>':\n) Tj
ET
BT
15 120 Td
(                {\n) Tj
ET
BT
15 109 Td
(                    in_aquote = false;\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 76 Td
(                    {\n) Tj
ET
BT
15 65 Td
(                        add_param\(key, buffer\);\n) Tj
ET
BT
15 54 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 43 Td
(                    }\n) Tj
ET

endstream
endobj
288 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [289 0 R ] /Parent 2 0 R >>
endobj
289 0 obj 
<</Length 3757 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(95) Tj
ET
BT
15 780 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 769 Td
(                    {\n) Tj
ET
BT
15 758 Td
(                        add_uri\(buffer\);\n) Tj
ET
BT
15 747 Td
(                    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(                    pos++;\n) Tj
ET
BT
15 714 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 703 Td
(                    break;\n) Tj
ET
BT
15 692 Td
(                }\n) Tj
ET
BT
15 681 Td
(                case ',':\n) Tj
ET
BT
15 670 Td
(                {\n) Tj
ET
BT
15 659 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 648 Td
(                    {\n) Tj
ET
BT
15 637 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 626 Td
(                        break;\n) Tj
ET
BT
15 615 Td
(                    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 582 Td
(                    {\n) Tj
ET
BT
15 571 Td
(                        add_param\(key, buffer\);\n) Tj
ET
BT
15 560 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 549 Td
(                    }\n) Tj
ET
BT
15 538 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 527 Td
(                    {\n) Tj
ET
BT
15 516 Td
(                        add_uri\(buffer\);\n) Tj
ET
BT
15 505 Td
(                    }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(                    pos++;\n) Tj
ET
BT
15 472 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 461 Td
(                    break;\n) Tj
ET
BT
15 450 Td
(                }\n) Tj
ET
BT
15 439 Td
(                case ';':\n) Tj
ET
BT
15 428 Td
(                {\n) Tj
ET
BT
15 417 Td
(                    if \(in_aquote\)\n) Tj
ET
BT
15 406 Td
(                    {\n) Tj
ET
BT
15 395 Td
(                        if \(key.size\(\)\)\n) Tj
ET
BT
15 384 Td
(                        {\n) Tj
ET
BT
15 373 Td
(                            add_param\(key, buffer\);\n) Tj
ET
BT
15 362 Td
(                            key.clear\(\);\n) Tj
ET
BT
15 351 Td
(                        }\n) Tj
ET
BT
15 340 Td
(                        else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 329 Td
(                        {\n) Tj
ET
BT
15 318 Td
(                            add_uri\(buffer\);\n) Tj
ET
BT
15 307 Td
(                        }\n) Tj
ET
BT
15 296 Td
(                    }\n) Tj
ET
BT
15 285 Td
(                    else\n) Tj
ET
BT
15 274 Td
(                    {\n) Tj
ET
BT
15 263 Td
(                        if \(read_head_param\)\n) Tj
ET
BT
15 252 Td
(                        {\n) Tj
ET
BT
15 241 Td
(                            header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 230 Td
(                            key.clear\(\);\n) Tj
ET
BT
15 219 Td
(                        }\n) Tj
ET
BT
15 208 Td
(                        else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 197 Td
(                        {\n) Tj
ET
BT
15 186 Td
(                            add_uri\(buffer\);\n) Tj
ET
BT
15 175 Td
(                        }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(                        if \(!read_head_param\)\n) Tj
ET
BT
15 142 Td
(                            read_head_param = true;\n) Tj
ET
BT
15 131 Td
(                    }\n) Tj
ET
BT
15 120 Td
(    \n) Tj
ET
BT
15 109 Td
(                    pos++;\n) Tj
ET
BT
15 98 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 87 Td
(                    break;\n) Tj
ET
BT
15 76 Td
(                }\n) Tj
ET
BT
15 65 Td
(                case '=':\n) Tj
ET
BT
15 54 Td
(                {\n) Tj
ET
BT
15 43 Td
(                    key = buffer;\n) Tj
ET

endstream
endobj
291 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [292 0 R ] /Parent 2 0 R >>
endobj
292 0 obj 
<</Length 3590 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(96) Tj
ET
BT
15 780 Td
(    \n) Tj
ET
BT
15 769 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 758 Td
(                    pos++;\n) Tj
ET
BT
15 747 Td
(                    break;\n) Tj
ET
BT
15 736 Td
(                }\n) Tj
ET
BT
15 725 Td
(                case ' ':\n) Tj
ET
BT
15 714 Td
(                {\n) Tj
ET
BT
15 703 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 692 Td
(                    {\n) Tj
ET
BT
15 681 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 670 Td
(                        break;\n) Tj
ET
BT
15 659 Td
(                    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(                    if \(in_aquote\)\n) Tj
ET
BT
15 626 Td
(                    {\n) Tj
ET
BT
15 615 Td
(                        pos++;\n) Tj
ET
BT
15 604 Td
(                        break;\n) Tj
ET
BT
15 593 Td
(                    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 560 Td
(                    {\n) Tj
ET
BT
15 549 Td
(                        add_name\(buffer\);\n) Tj
ET
BT
15 538 Td
(                    }\n) Tj
ET
BT
15 527 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 516 Td
(                }\n) Tj
ET
BT
15 505 Td
(                case '\\t':\n) Tj
ET
BT
15 494 Td
(                case '\\r':\n) Tj
ET
BT
15 483 Td
(                {\n) Tj
ET
BT
15 472 Td
(                    pos++;\n) Tj
ET
BT
15 461 Td
(                    break;\n) Tj
ET
BT
15 450 Td
(                }\n) Tj
ET
BT
15 439 Td
(                case '\\n':\n) Tj
ET
BT
15 428 Td
(                {\n) Tj
ET
BT
15 417 Td
(                    if \(read_head_param\)\n) Tj
ET
BT
15 406 Td
(                    {\n) Tj
ET
BT
15 395 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 384 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 373 Td
(                        read_head_param = false;\n) Tj
ET
BT
15 362 Td
(                    }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 329 Td
(                    {\n) Tj
ET
BT
15 318 Td
(                        add_uri\(buffer\);\n) Tj
ET
BT
15 307 Td
(                    }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 274 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(                    pos++;\n) Tj
ET
BT
15 241 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 230 Td
(                    break;\n) Tj
ET
BT
15 219 Td
(                }\n) Tj
ET
BT
15 208 Td
(                default:\n) Tj
ET
BT
15 197 Td
(                {\n) Tj
ET
BT
15 186 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 175 Td
(                    pos++;\n) Tj
ET
BT
15 164 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 153 Td
(                }\n) Tj
ET
BT
15 142 Td
(            }\n) Tj
ET
BT
15 131 Td
(        }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 98 Td
(    }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(    void HFBase_2_::generate_values\(\)\n) Tj
ET
BT
15 65 Td
(    {\n) Tj
ET
BT
15 54 Td
(        values_ = digit_value_;\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
294 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [295 0 R ] /Parent 2 0 R >>
endobj
295 0 obj 
<</Length 3367 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(97) Tj
ET
BT
15 780 Td
(        std::stringstream p;\n) Tj
ET
BT
15 769 Td
(        p << header_params_;\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(        values_ += p.str\(\);\n) Tj
ET
BT
15 736 Td
(    }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    int HFBase_2_::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        bool run = true;\n) Tj
ET
BT
15 681 Td
(        std::string buffer;\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(        while \(run\)\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 604 Td
(            {\n) Tj
ET
BT
15 593 Td
(                CASE_DIGIT\n) Tj
ET
BT
15 582 Td
(                {\n) Tj
ET
BT
15 571 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 560 Td
(                    break;\n) Tj
ET
BT
15 549 Td
(                }\n) Tj
ET
BT
15 538 Td
(                case '\\r':\n) Tj
ET
BT
15 527 Td
(                {\n) Tj
ET
BT
15 516 Td
(                    pos++;\n) Tj
ET
BT
15 505 Td
(                    break;\n) Tj
ET
BT
15 494 Td
(                }\n) Tj
ET
BT
15 483 Td
(                case '\\n':\n) Tj
ET
BT
15 472 Td
(                {\n) Tj
ET
BT
15 461 Td
(//                    if \(digit_value_.empty\(\)\)\n) Tj
ET
BT
15 450 Td
(                        digit_value_ = buffer;\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(                    run = false;\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(                    pos++;\n) Tj
ET
BT
15 395 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 384 Td
(                    break;\n) Tj
ET
BT
15 373 Td
(                }\n) Tj
ET
BT
15 362 Td
(                default:\n) Tj
ET
BT
15 351 Td
(                {\n) Tj
ET
BT
15 340 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 329 Td
(                    pos++;\n) Tj
ET
BT
15 318 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 307 Td
(                }\n) Tj
ET
BT
15 296 Td
(            }\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 252 Td
(    }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    void HFBase_3_::generate_values\(\)\n) Tj
ET
BT
15 219 Td
(    {\n) Tj
ET
BT
15 208 Td
(        values_.clear\(\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        for \(auto &it : opts_\)\n) Tj
ET
BT
15 175 Td
(            values_ +=  it + sym_;\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        remove_tail_symbol\(sym_\);\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        if \(header_params_.size\(\)\)\n) Tj
ET
BT
15 120 Td
(        {\n) Tj
ET
BT
15 109 Td
(            std::ostringstream p;\n) Tj
ET
BT
15 98 Td
(            p << ";" << header_params_;\n) Tj
ET
BT
15 87 Td
(            values_ += p.str\(\);\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(    }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(    int HFBase_3_::parse\(std::string &msg, size_t &pos\)\n) Tj
ET

endstream
endobj
297 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [298 0 R ] /Parent 2 0 R >>
endobj
298 0 obj 
<</Length 3545 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(98) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(        bool run = true, read_head_param = false;\n) Tj
ET
BT
15 758 Td
(        std::string buffer, key;\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        while \(run\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 681 Td
(            {\n) Tj
ET
BT
15 670 Td
(                case ':':\n) Tj
ET
BT
15 659 Td
(                case '/': \n) Tj
ET
BT
15 648 Td
(                case '@': \n) Tj
ET
BT
15 637 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 626 Td
(                case '\\t':\n) Tj
ET
BT
15 615 Td
(                case ' ':\n) Tj
ET
BT
15 604 Td
(                case ',':\n) Tj
ET
BT
15 593 Td
(                {\n) Tj
ET
BT
15 582 Td
(                    if \(sym_ != msg.at\(pos\)\)\n) Tj
ET
BT
15 571 Td
(                    {\n) Tj
ET
BT
15 560 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 549 Td
(                        break;\n) Tj
ET
BT
15 538 Td
(                    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 505 Td
(                    {\n) Tj
ET
BT
15 494 Td
(                        add_value\(buffer\);\n) Tj
ET
BT
15 483 Td
(                    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(                    pos++;\n) Tj
ET
BT
15 450 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 439 Td
(                    break;\n) Tj
ET
BT
15 428 Td
(                }\n) Tj
ET
BT
15 417 Td
(                case '=':\n) Tj
ET
BT
15 406 Td
(                {\n) Tj
ET
BT
15 395 Td
(                    key = buffer;\n) Tj
ET
BT
15 384 Td
(    \n) Tj
ET
BT
15 373 Td
(                    pos++;\n) Tj
ET
BT
15 362 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 351 Td
(                    break;\n) Tj
ET
BT
15 340 Td
(                }\n) Tj
ET
BT
15 329 Td
(                case ';':\n) Tj
ET
BT
15 318 Td
(                {\n) Tj
ET
BT
15 307 Td
(                    if \(read_head_param\)\n) Tj
ET
BT
15 296 Td
(                    {\n) Tj
ET
BT
15 285 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 274 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 263 Td
(                    }\n) Tj
ET
BT
15 252 Td
(                    else\n) Tj
ET
BT
15 241 Td
(                    {\n) Tj
ET
BT
15 230 Td
(                        if \(buffer.size\(\)\)\n) Tj
ET
BT
15 219 Td
(                            add_value\(buffer\);\n) Tj
ET
BT
15 208 Td
(                        read_head_param = true;\n) Tj
ET
BT
15 197 Td
(                    }\n) Tj
ET
BT
15 186 Td
(    \n) Tj
ET
BT
15 175 Td
(                    pos++;\n) Tj
ET
BT
15 164 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 153 Td
(                    break;\n) Tj
ET
BT
15 142 Td
(                }\n) Tj
ET
BT
15 131 Td
(                case '\\r':\n) Tj
ET
BT
15 120 Td
(                {\n) Tj
ET
BT
15 109 Td
(                    pos++;\n) Tj
ET
BT
15 98 Td
(                    break;\n) Tj
ET
BT
15 87 Td
(                }\n) Tj
ET
BT
15 76 Td
(                case '\\n':\n) Tj
ET
BT
15 65 Td
(                {\n) Tj
ET
BT
15 54 Td
(                    if \(read_head_param\)\n) Tj
ET
BT
15 43 Td
(                    {\n) Tj
ET

endstream
endobj
300 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [301 0 R ] /Parent 2 0 R >>
endobj
301 0 obj 
<</Length 3523 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(99) Tj
ET
BT
15 780 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 769 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 758 Td
(                    }\n) Tj
ET
BT
15 747 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 736 Td
(                    {\n) Tj
ET
BT
15 725 Td
(                        add_value\(buffer\);\n) Tj
ET
BT
15 714 Td
(                    }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 681 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(                    pos++;\n) Tj
ET
BT
15 648 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 637 Td
(                    break;\n) Tj
ET
BT
15 626 Td
(                }\n) Tj
ET
BT
15 615 Td
(                default:\n) Tj
ET
BT
15 604 Td
(                {\n) Tj
ET
BT
15 593 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 582 Td
(                    pos++;\n) Tj
ET
BT
15 571 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 560 Td
(                }\n) Tj
ET
BT
15 549 Td
(            }\n) Tj
ET
BT
15 538 Td
(        }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 505 Td
(    }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(    void HFBase_4_::generate_values\(\)\n) Tj
ET
BT
15 472 Td
(    {\n) Tj
ET
BT
15 461 Td
(        char sym = ',';\n) Tj
ET
BT
15 450 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        for \(auto &it : its_\)\n) Tj
ET
BT
15 417 Td
(        {\n) Tj
ET
BT
15 406 Td
(            o << *it << sym;\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(        values_ = o.str\(\);\n) Tj
ET
BT
15 362 Td
(        remove_tail_symbol\(sym\);\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        if \(header_params_.size\(\)\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            std::ostringstream p;\n) Tj
ET
BT
15 307 Td
(            p << ";" << header_params_;\n) Tj
ET
BT
15 296 Td
(            values_ += p.str\(\);\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(    }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(    int HFBase_4_::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 241 Td
(    {\n) Tj
ET
BT
15 230 Td
(        bool run = true, in_dquote = false;\n) Tj
ET
BT
15 219 Td
(        std::string buffer, key;\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        while \(run\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 142 Td
(            {\n) Tj
ET
BT
15 131 Td
(                case '"':\n) Tj
ET
BT
15 120 Td
(                {\n) Tj
ET
BT
15 109 Td
(                    in_dquote = !in_dquote;\n) Tj
ET
BT
15 98 Td
(                }\n) Tj
ET
BT
15 87 Td
(                case '/':\n) Tj
ET
BT
15 76 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 65 Td
(                {\n) Tj
ET
BT
15 54 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 43 Td
(                    break;\n) Tj
ET

endstream
endobj
303 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [304 0 R ] /Parent 2 0 R >>
endobj
304 0 obj 
<</Length 3692 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(100) Tj
ET
BT
15 780 Td
(                }\n) Tj
ET
BT
15 769 Td
(                case ',':\n) Tj
ET
BT
15 758 Td
(                {\n) Tj
ET
BT
15 747 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 736 Td
(                    {\n) Tj
ET
BT
15 725 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 714 Td
(                        break;\n) Tj
ET
BT
15 703 Td
(                    }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 670 Td
(                    {\n) Tj
ET
BT
15 659 Td
(                        add_param\(key, buffer\);\n) Tj
ET
BT
15 648 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 637 Td
(                    }\n) Tj
ET
BT
15 626 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 615 Td
(                    {\n) Tj
ET
BT
15 604 Td
(                        add_value\(buffer\);\n) Tj
ET
BT
15 593 Td
(                    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(                    pos++;\n) Tj
ET
BT
15 560 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 549 Td
(                    break;\n) Tj
ET
BT
15 538 Td
(                }\n) Tj
ET
BT
15 527 Td
(                case ';':\n) Tj
ET
BT
15 516 Td
(                {\n) Tj
ET
BT
15 505 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 494 Td
(                    {\n) Tj
ET
BT
15 483 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 472 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 461 Td
(                    }\n) Tj
ET
BT
15 450 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 439 Td
(                    {\n) Tj
ET
BT
15 428 Td
(                        add_value\(buffer\);\n) Tj
ET
BT
15 417 Td
(                    }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(                    pos++;\n) Tj
ET
BT
15 384 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 373 Td
(                    break;\n) Tj
ET
BT
15 362 Td
(                }\n) Tj
ET
BT
15 351 Td
(                case '=':\n) Tj
ET
BT
15 340 Td
(                {\n) Tj
ET
BT
15 329 Td
(                    key = buffer;\n) Tj
ET
BT
15 318 Td
(    \n) Tj
ET
BT
15 307 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 296 Td
(                    pos++;\n) Tj
ET
BT
15 285 Td
(                    break;\n) Tj
ET
BT
15 274 Td
(                }\n) Tj
ET
BT
15 263 Td
(                case ' ':\n) Tj
ET
BT
15 252 Td
(                case '\\t':\n) Tj
ET
BT
15 241 Td
(                case '\\r':\n) Tj
ET
BT
15 230 Td
(                {\n) Tj
ET
BT
15 219 Td
(                    pos++;\n) Tj
ET
BT
15 208 Td
(                    break;\n) Tj
ET
BT
15 197 Td
(                }\n) Tj
ET
BT
15 186 Td
(                case '\\n':\n) Tj
ET
BT
15 175 Td
(                {\n) Tj
ET
BT
15 164 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 153 Td
(                    {\n) Tj
ET
BT
15 142 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 131 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 120 Td
(                    }\n) Tj
ET
BT
15 109 Td
(                    else if \(buffer.size\(\)\)\n) Tj
ET
BT
15 98 Td
(                    {\n) Tj
ET
BT
15 87 Td
(                        add_value\(buffer\);\n) Tj
ET
BT
15 76 Td
(                    }\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 43 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET

endstream
endobj
306 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [307 0 R ] /Parent 2 0 R >>
endobj
307 0 obj 
<</Length 3312 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(101) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(                    pos++;\n) Tj
ET
BT
15 758 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 747 Td
(                    break;\n) Tj
ET
BT
15 736 Td
(                }\n) Tj
ET
BT
15 725 Td
(                default:\n) Tj
ET
BT
15 714 Td
(                {\n) Tj
ET
BT
15 703 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 692 Td
(                    pos++;\n) Tj
ET
BT
15 681 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 670 Td
(                }\n) Tj
ET
BT
15 659 Td
(            }\n) Tj
ET
BT
15 648 Td
(        }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    void HFBase_5_::generate_values\(\)\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        char sym = ' ';\n) Tj
ET
BT
15 560 Td
(        values_ = challenge_;\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        if \(digest_cln_.empty\(\)\)\n) Tj
ET
BT
15 527 Td
(            return;\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        values_ += sym;\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 472 Td
(        o << digest_cln_;\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        values_ += o.str\(\);\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(        remove_tail_symbol\(sym\);\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        std::ostringstream p;\n) Tj
ET
BT
15 395 Td
(        p << header_params_;\n) Tj
ET
BT
15 384 Td
(        values_ += p.str\(\);\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    int HFBase_5_::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        bool run = true, in_dquote = false;\n) Tj
ET
BT
15 318 Td
(        std::string buffer, key;\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        while \(run\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 241 Td
(            {\n) Tj
ET
BT
15 230 Td
(                case '"':\n) Tj
ET
BT
15 219 Td
(                {\n) Tj
ET
BT
15 208 Td
(                    in_dquote = !in_dquote;\n) Tj
ET
BT
15 197 Td
(                }\n) Tj
ET
BT
15 186 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 175 Td
(                case ':':\n) Tj
ET
BT
15 164 Td
(                {\n) Tj
ET
BT
15 153 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 142 Td
(                    break;\n) Tj
ET
BT
15 131 Td
(                }\n) Tj
ET
BT
15 120 Td
(                case '=':\n) Tj
ET
BT
15 109 Td
(                {\n) Tj
ET
BT
15 98 Td
(                    key = buffer;\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(                    pos++;\n) Tj
ET
BT
15 65 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 54 Td
(                    break;\n) Tj
ET
BT
15 43 Td
(                }\n) Tj
ET

endstream
endobj
309 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [310 0 R ] /Parent 2 0 R >>
endobj
310 0 obj 
<</Length 3849 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(102) Tj
ET
BT
15 780 Td
(                case '\\t':\n) Tj
ET
BT
15 769 Td
(                case ' ':\n) Tj
ET
BT
15 758 Td
(                {\n) Tj
ET
BT
15 747 Td
(                    if \(challenge_.size\(\) || in_dquote\)\n) Tj
ET
BT
15 736 Td
(                    {\n) Tj
ET
BT
15 725 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 714 Td
(                        break;\n) Tj
ET
BT
15 703 Td
(                    }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 670 Td
(                        challenge_ = buffer;\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(                    pos++;\n) Tj
ET
BT
15 637 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 626 Td
(                    break;\n) Tj
ET
BT
15 615 Td
(                }\n) Tj
ET
BT
15 604 Td
(                case ',':\n) Tj
ET
BT
15 593 Td
(                {\n) Tj
ET
BT
15 582 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 571 Td
(                    {\n) Tj
ET
BT
15 560 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 549 Td
(                        break;\n) Tj
ET
BT
15 538 Td
(                    }\n) Tj
ET
BT
15 527 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 516 Td
(                    {\n) Tj
ET
BT
15 505 Td
(                        digest_cln_.append\(key, buffer\);\n) Tj
ET
BT
15 494 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 483 Td
(                    }\n) Tj
ET
BT
15 472 Td
(                    else\n) Tj
ET
BT
15 461 Td
(                    {\n) Tj
ET
BT
15 450 Td
(                        digest_cln_.append\(buffer, ""\);\n) Tj
ET
BT
15 439 Td
(                    }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(                    pos++;\n) Tj
ET
BT
15 406 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 395 Td
(                    break;\n) Tj
ET
BT
15 384 Td
(                }\n) Tj
ET
BT
15 373 Td
(                case '\\r':\n) Tj
ET
BT
15 362 Td
(                {\n) Tj
ET
BT
15 351 Td
(                    pos++;\n) Tj
ET
BT
15 340 Td
(                    break;\n) Tj
ET
BT
15 329 Td
(                }\n) Tj
ET
BT
15 318 Td
(                case '\\n':\n) Tj
ET
BT
15 307 Td
(                {\n) Tj
ET
BT
15 296 Td
(                    if \(challenge_.empty\(\)\)\n) Tj
ET
BT
15 285 Td
(                    {\n) Tj
ET
BT
15 274 Td
(                        challenge_ = buffer;\n) Tj
ET
BT
15 263 Td
(                    }\n) Tj
ET
BT
15 252 Td
(                    else if \(key.size\(\)\)\n) Tj
ET
BT
15 241 Td
(                    {\n) Tj
ET
BT
15 230 Td
(                        digest_cln_.append\(key, buffer\);\n) Tj
ET
BT
15 219 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 208 Td
(                    }\n) Tj
ET
BT
15 197 Td
(                    else\n) Tj
ET
BT
15 186 Td
(                    {\n) Tj
ET
BT
15 175 Td
(                        digest_cln_.append\(buffer, ""\);\n) Tj
ET
BT
15 164 Td
(                    }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 131 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(                    pos++;\n) Tj
ET
BT
15 98 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 87 Td
(                    break;\n) Tj
ET
BT
15 76 Td
(                }\n) Tj
ET
BT
15 65 Td
(                default:\n) Tj
ET
BT
15 54 Td
(                {\n) Tj
ET
BT
15 43 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET

endstream
endobj
312 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [313 0 R ] /Parent 2 0 R >>
endobj
313 0 obj 
<</Length 3594 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(103) Tj
ET
BT
15 780 Td
(                    pos++;\n) Tj
ET
BT
15 769 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 758 Td
(                }\n) Tj
ET
BT
15 747 Td
(            }\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 714 Td
(    }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    HFVia::HFVia\(\) : HeaderField\("Via", "v", true\)\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(//        header_params_.append\("alias"\);\n) Tj
ET
BT
15 659 Td
(//        header_params_.append\("branch"\);\n) Tj
ET
BT
15 648 Td
(//        header_params_.append\("comp"\);\n) Tj
ET
BT
15 637 Td
(//        header_params_.append\("keep"\);\n) Tj
ET
BT
15 626 Td
(//        header_params_.append\("maddr"\);\n) Tj
ET
BT
15 615 Td
(//        header_params_.append\("oc"\);\n) Tj
ET
BT
15 604 Td
(//        header_params_.append\("oc-algo"\);\n) Tj
ET
BT
15 593 Td
(//        header_params_.append\("oc-seq"\);\n) Tj
ET
BT
15 582 Td
(//        header_params_.append\("oc-validity"\);\n) Tj
ET
BT
15 571 Td
(//        header_params_.append\("received"\);\n) Tj
ET
BT
15 560 Td
(//        header_params_.append\("rport"\);\n) Tj
ET
BT
15 549 Td
(//        header_params_.append\("sigcomp-id"\);\n) Tj
ET
BT
15 538 Td
(//        header_params_.append\("ttl"\);\n) Tj
ET
BT
15 527 Td
(    }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    void HFVia::generate_values\(\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        o << sent_proto_ << ' ' << sent_by_;\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        if \(header_params_.size\(\)\)\n) Tj
ET
BT
15 428 Td
(            o << ";" << header_params_;\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        values_ = o.str\(\);\n) Tj
ET
BT
15 395 Td
(    }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(    int HFVia::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 362 Td
(    {\n) Tj
ET
BT
15 351 Td
(        bool read_head_param = false, run = true;\n) Tj
ET
BT
15 340 Td
(        std::string buffer, key;\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(        while \(run\)\n) Tj
ET
BT
15 285 Td
(        {\n) Tj
ET
BT
15 274 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 263 Td
(            {\n) Tj
ET
BT
15 252 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 241 Td
(                case ':':\n) Tj
ET
BT
15 230 Td
(                case '/':\n) Tj
ET
BT
15 219 Td
(                {\n) Tj
ET
BT
15 208 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 197 Td
(                    break;\n) Tj
ET
BT
15 186 Td
(                }\n) Tj
ET
BT
15 175 Td
(                case ' ':\n) Tj
ET
BT
15 164 Td
(                {\n) Tj
ET
BT
15 153 Td
(                    if \(sent_proto_.empty\(\)\)\n) Tj
ET
BT
15 142 Td
(                    {\n) Tj
ET
BT
15 131 Td
(                        sent_proto_ = buffer;\n) Tj
ET
BT
15 120 Td
(                    }\n) Tj
ET
BT
15 109 Td
(                    else if \(sent_by_.empty\(\)\)\n) Tj
ET
BT
15 98 Td
(                    {\n) Tj
ET
BT
15 87 Td
(                        sent_by_ = buffer;\n) Tj
ET
BT
15 76 Td
(                    }\n) Tj
ET
BT
15 65 Td
(    \n) Tj
ET
BT
15 54 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 43 Td
(                }\n) Tj
ET

endstream
endobj
315 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [316 0 R ] /Parent 2 0 R >>
endobj
316 0 obj 
<</Length 3721 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(104) Tj
ET
BT
15 780 Td
(                case '\\t':\n) Tj
ET
BT
15 769 Td
(                case '\\r':\n) Tj
ET
BT
15 758 Td
(                {\n) Tj
ET
BT
15 747 Td
(                    pos++;\n) Tj
ET
BT
15 736 Td
(                    break;\n) Tj
ET
BT
15 725 Td
(                }\n) Tj
ET
BT
15 714 Td
(                case ';':\n) Tj
ET
BT
15 703 Td
(                {\n) Tj
ET
BT
15 692 Td
(                    if \(read_head_param\)\n) Tj
ET
BT
15 681 Td
(                    {\n) Tj
ET
BT
15 670 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 659 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 648 Td
(                    }\n) Tj
ET
BT
15 637 Td
(                    else\n) Tj
ET
BT
15 626 Td
(                    {\n) Tj
ET
BT
15 615 Td
(                        if \(sent_by_.empty\(\)\)\n) Tj
ET
BT
15 604 Td
(                        {\n) Tj
ET
BT
15 593 Td
(                            sent_by_ = buffer;\n) Tj
ET
BT
15 582 Td
(                        }\n) Tj
ET
BT
15 571 Td
(                        \n) Tj
ET
BT
15 560 Td
(                        read_head_param = true;\n) Tj
ET
BT
15 549 Td
(                    }\n) Tj
ET
BT
15 538 Td
(    \n) Tj
ET
BT
15 527 Td
(                    pos++;\n) Tj
ET
BT
15 516 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 505 Td
(                    break;\n) Tj
ET
BT
15 494 Td
(                }\n) Tj
ET
BT
15 483 Td
(                case '=':\n) Tj
ET
BT
15 472 Td
(                {\n) Tj
ET
BT
15 461 Td
(                    key = buffer;\n) Tj
ET
BT
15 450 Td
(    \n) Tj
ET
BT
15 439 Td
(                    pos++;\n) Tj
ET
BT
15 428 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 417 Td
(                    break;\n) Tj
ET
BT
15 406 Td
(                }\n) Tj
ET
BT
15 395 Td
(                case '\\n':\n) Tj
ET
BT
15 384 Td
(                {\n) Tj
ET
BT
15 373 Td
(                    if \(read_head_param\)\n) Tj
ET
BT
15 362 Td
(                    {\n) Tj
ET
BT
15 351 Td
(                        header_params_.append\(key, buffer\);\n) Tj
ET
BT
15 340 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 329 Td
(                    }\n) Tj
ET
BT
15 318 Td
(                    else\n) Tj
ET
BT
15 307 Td
(                    {\n) Tj
ET
BT
15 296 Td
(                        if \(sent_by_.empty\(\)\)\n) Tj
ET
BT
15 285 Td
(                        {\n) Tj
ET
BT
15 274 Td
(                            sent_by_ = buffer;\n) Tj
ET
BT
15 263 Td
(                        }\n) Tj
ET
BT
15 252 Td
(                    }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 219 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(                    pos++;\n) Tj
ET
BT
15 186 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 175 Td
(                    break;\n) Tj
ET
BT
15 164 Td
(                }\n) Tj
ET
BT
15 153 Td
(                default:\n) Tj
ET
BT
15 142 Td
(                {\n) Tj
ET
BT
15 131 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "' :\
" << buffer << "\\n";\n) Tj
ET
BT
15 120 Td
(                    pos++;\n) Tj
ET
BT
15 109 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 98 Td
(                }\n) Tj
ET
BT
15 87 Td
(            }\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 54 Td
(    }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
318 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [319 0 R ] /Parent 2 0 R >>
endobj
319 0 obj 
<</Length 3408 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(105) Tj
ET
BT
15 780 Td
(    HFContact::HFContact\(\) : HFBase_1_\("Contact", "m"\)\n) Tj
ET
BT
15 769 Td
(    {\n) Tj
ET
BT
15 758 Td
(//        header_params_.append\("expires"\);\n) Tj
ET
BT
15 747 Td
(//        header_params_.append\("mp"\);\n) Tj
ET
BT
15 736 Td
(//        header_params_.append\("np"\);\n) Tj
ET
BT
15 725 Td
(//        header_params_.append\("pub-gruu"\);\n) Tj
ET
BT
15 714 Td
(//        header_params_.append\("q"\);\n) Tj
ET
BT
15 703 Td
(//        header_params_.append\("rc"\);\n) Tj
ET
BT
15 692 Td
(//        header_params_.append\("reg-id"\);\n) Tj
ET
BT
15 681 Td
(//        header_params_.append\("temp-gruu"\);\n) Tj
ET
BT
15 670 Td
(//        header_params_.append\("temp-gruu-cookie"\);\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    void HFRetryAfter::generate_values\(\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 604 Td
(    }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(    int HFRetryAfter::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 571 Td
(    {\n) Tj
ET
BT
15 560 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 549 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    void HFAlertInfo::generate_values\(\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    int HFAlertInfo::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 417 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 406 Td
(    }\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(    void HFAllowEvents::generate_values\(\)\n) Tj
ET
BT
15 373 Td
(    {\n) Tj
ET
BT
15 362 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 351 Td
(    }\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    int HFAllowEvents::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 296 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 285 Td
(    }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    void HFBase_1_::generate_values\(\)\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(        char sym = ',';\n) Tj
ET
BT
15 230 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        cons_.cleanup_empty_uri\(\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        for \(auto &it : cons_\)\n) Tj
ET
BT
15 175 Td
(        {\n) Tj
ET
BT
15 164 Td
(            o << *it << sym;\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        values_ = o.str\(\);\n) Tj
ET
BT
15 120 Td
(        remove_tail_symbol\(sym\);\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        if \(header_params_.size\(\)\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            std::ostringstream p;\n) Tj
ET
BT
15 65 Td
(            p << ";" << header_params_;\n) Tj
ET
BT
15 54 Td
(            values_ += p.str\(\);\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
321 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [322 0 R ] /Parent 2 0 R >>
endobj
322 0 obj 
<</Length 3447 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(106) Tj
ET
BT
15 780 Td
(    }\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(    void HFTimestamp::generate_values\(\)\n) Tj
ET
BT
15 736 Td
(    {\n) Tj
ET
BT
15 725 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 714 Td
(    }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    int HFTimestamp::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 659 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 648 Td
(    }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    void HFUserAgent::generate_values\(\)\n) Tj
ET
BT
15 615 Td
(    {\n) Tj
ET
BT
15 604 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    int HFUserAgent::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 538 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 527 Td
(    }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    void HFAnswerMode::generate_values\(\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    int HFAnswerMode::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 417 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 406 Td
(    }\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(    void HFPrivAnswerMode::generate_values\(\)\n) Tj
ET
BT
15 373 Td
(    {\n) Tj
ET
BT
15 362 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 351 Td
(    }\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    int HFPrivAnswerMode::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 296 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 285 Td
(    }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(    void HFAcceptContact::generate_values\(\)\n) Tj
ET
BT
15 252 Td
(    {\n) Tj
ET
BT
15 241 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 230 Td
(    }\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(    int HFAcceptContact::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 197 Td
(    {\n) Tj
ET
BT
15 186 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 175 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 164 Td
(    }\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(    HFAuthorization::HFAuthorization\(\) : HFBase_5_\("Authorization"\)\n) Tj
ET
BT
15 131 Td
(    {\n) Tj
ET
BT
15 120 Td
(//        header_params_.append\("algorithm"\);\n) Tj
ET
BT
15 109 Td
(//        header_params_.append\("auts"\);\n) Tj
ET
BT
15 98 Td
(//        header_params_.append\("cnonce"\);\n) Tj
ET
BT
15 87 Td
(//        header_params_.append\("nc"\);\n) Tj
ET
BT
15 76 Td
(//        header_params_.append\("nonce"\);\n) Tj
ET
BT
15 65 Td
(//        header_params_.append\("opaque"\);\n) Tj
ET
BT
15 54 Td
(//        header_params_.append\("qop"\);\n) Tj
ET
BT
15 43 Td
(//        header_params_.append\("realm"\);\n) Tj
ET

endstream
endobj
324 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [325 0 R ] /Parent 2 0 R >>
endobj
325 0 obj 
<</Length 3436 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(107) Tj
ET
BT
15 780 Td
(//        header_params_.append\("response"\);\n) Tj
ET
BT
15 769 Td
(//        header_params_.append\("uri"\);\n) Tj
ET
BT
15 758 Td
(//        header_params_.append\("username"\);\n) Tj
ET
BT
15 747 Td
(    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    HFCallInfo::HFCallInfo\(\) : HFBase_1_\("Call-Info", true\)\n) Tj
ET
BT
15 714 Td
(    {\n) Tj
ET
BT
15 703 Td
(//        header_params_.append\("m"\);\n) Tj
ET
BT
15 692 Td
(//        header_params_.append\("purpose"\);\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    void HFCallInfo::generate_values\(\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        char sym = ',';\n) Tj
ET
BT
15 626 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(        cons_.cleanup_empty_uri\(\);\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(        for \(auto &it : cons_\)\n) Tj
ET
BT
15 571 Td
(        {\n) Tj
ET
BT
15 560 Td
(            o << '<' << it->uri\(\) << '>' << it->params\(\) << sym;\n) Tj
ET
BT
15 549 Td
(        }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        values_ = o.str\(\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        remove_tail_symbol\(sym\);\n) Tj
ET
BT
15 494 Td
(    }\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(    int HFCallInfo::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 461 Td
(    {\n) Tj
ET
BT
15 450 Td
(        bool run = true, in_aquote = false, in_dquote = false;\n) Tj
ET
BT
15 439 Td
(        std::string buffer, key;\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        while \(run\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 362 Td
(            {\n) Tj
ET
BT
15 351 Td
(                case '"':\n) Tj
ET
BT
15 340 Td
(                {\n) Tj
ET
BT
15 329 Td
(                    in_dquote = !in_dquote;\n) Tj
ET
BT
15 318 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(                    if \(!in_dquote\)\n) Tj
ET
BT
15 285 Td
(                    {\n) Tj
ET
BT
15 274 Td
(                        add_name\(buffer\);\n) Tj
ET
BT
15 263 Td
(                        buffer.clear\(\);\n) Tj
ET
BT
15 252 Td
(                    }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(                    break;\n) Tj
ET
BT
15 219 Td
(                }\n) Tj
ET
BT
15 208 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 197 Td
(                case '/':\n) Tj
ET
BT
15 186 Td
(                case '?':\n) Tj
ET
BT
15 175 Td
(                case ':':\n) Tj
ET
BT
15 164 Td
(                case '@':\n) Tj
ET
BT
15 153 Td
(                {\n) Tj
ET
BT
15 142 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 131 Td
(                    break;\n) Tj
ET
BT
15 120 Td
(                }\n) Tj
ET
BT
15 109 Td
(                case '<':\n) Tj
ET
BT
15 98 Td
(                {\n) Tj
ET
BT
15 87 Td
(                    in_aquote = true;\n) Tj
ET
BT
15 76 Td
(                    pos++;\n) Tj
ET
BT
15 65 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 54 Td
(                    break;\n) Tj
ET
BT
15 43 Td
(                }\n) Tj
ET

endstream
endobj
327 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [328 0 R ] /Parent 2 0 R >>
endobj
328 0 obj 
<</Length 3640 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(108) Tj
ET
BT
15 780 Td
(                case '>':\n) Tj
ET
BT
15 769 Td
(                {\n) Tj
ET
BT
15 758 Td
(                    in_aquote = false;\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 725 Td
(                    {\n) Tj
ET
BT
15 714 Td
(                        if \(key.size\(\)\)\n) Tj
ET
BT
15 703 Td
(                        {\n) Tj
ET
BT
15 692 Td
(                            add_param\(key, buffer\);\n) Tj
ET
BT
15 681 Td
(                            key.clear\(\);\n) Tj
ET
BT
15 670 Td
(                        }\n) Tj
ET
BT
15 659 Td
(                        else\n) Tj
ET
BT
15 648 Td
(                        {\n) Tj
ET
BT
15 637 Td
(                            add_uri\(buffer\);\n) Tj
ET
BT
15 626 Td
(                        }\n) Tj
ET
BT
15 615 Td
(                    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(                    pos++;\n) Tj
ET
BT
15 582 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 571 Td
(                    break;\n) Tj
ET
BT
15 560 Td
(                }\n) Tj
ET
BT
15 549 Td
(                case ',':\n) Tj
ET
BT
15 538 Td
(                {\n) Tj
ET
BT
15 527 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 516 Td
(                    {\n) Tj
ET
BT
15 505 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 494 Td
(                        break;\n) Tj
ET
BT
15 483 Td
(                    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 450 Td
(                    {\n) Tj
ET
BT
15 439 Td
(                        if \(key.size\(\)\)\n) Tj
ET
BT
15 428 Td
(                        {\n) Tj
ET
BT
15 417 Td
(                            add_param\(key, buffer\);\n) Tj
ET
BT
15 406 Td
(                            key.clear\(\);\n) Tj
ET
BT
15 395 Td
(                        }\n) Tj
ET
BT
15 384 Td
(                        else\n) Tj
ET
BT
15 373 Td
(                        {\n) Tj
ET
BT
15 362 Td
(                            add_uri\(buffer\);\n) Tj
ET
BT
15 351 Td
(                        }\n) Tj
ET
BT
15 340 Td
(                    }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(                    pos++;\n) Tj
ET
BT
15 307 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 296 Td
(                    break;\n) Tj
ET
BT
15 285 Td
(                }\n) Tj
ET
BT
15 274 Td
(                case ';':\n) Tj
ET
BT
15 263 Td
(                {\n) Tj
ET
BT
15 252 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 241 Td
(                    {\n) Tj
ET
BT
15 230 Td
(                        add_param\(key, buffer\);\n) Tj
ET
BT
15 219 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 208 Td
(                    }\n) Tj
ET
BT
15 197 Td
(                    else\n) Tj
ET
BT
15 186 Td
(                    {\n) Tj
ET
BT
15 175 Td
(                        if \(buffer.size\(\)\)\n) Tj
ET
BT
15 164 Td
(                            add_uri\(buffer\);\n) Tj
ET
BT
15 153 Td
(                    }\n) Tj
ET
BT
15 142 Td
(    \n) Tj
ET
BT
15 131 Td
(                    pos++;\n) Tj
ET
BT
15 120 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 109 Td
(                    break;\n) Tj
ET
BT
15 98 Td
(                }\n) Tj
ET
BT
15 87 Td
(                case '=':\n) Tj
ET
BT
15 76 Td
(                {\n) Tj
ET
BT
15 65 Td
(                    key = buffer;\n) Tj
ET
BT
15 54 Td
(    \n) Tj
ET
BT
15 43 Td
(                    buffer.clear\(\);\n) Tj
ET

endstream
endobj
330 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [331 0 R ] /Parent 2 0 R >>
endobj
331 0 obj 
<</Length 3865 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(109) Tj
ET
BT
15 780 Td
(                    pos++;\n) Tj
ET
BT
15 769 Td
(                    break;\n) Tj
ET
BT
15 758 Td
(                }\n) Tj
ET
BT
15 747 Td
(                case ' ':\n) Tj
ET
BT
15 736 Td
(                {\n) Tj
ET
BT
15 725 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 714 Td
(                    {\n) Tj
ET
BT
15 703 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 692 Td
(                        break;\n) Tj
ET
BT
15 681 Td
(                    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(                    if \(in_aquote || key.size\(\)\)\n) Tj
ET
BT
15 648 Td
(                    {\n) Tj
ET
BT
15 637 Td
(                        pos++;\n) Tj
ET
BT
15 626 Td
(                        break;\n) Tj
ET
BT
15 615 Td
(                    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 582 Td
(                }\n) Tj
ET
BT
15 571 Td
(                case '\\t':\n) Tj
ET
BT
15 560 Td
(                case '\\r':\n) Tj
ET
BT
15 549 Td
(                {\n) Tj
ET
BT
15 538 Td
(                    pos++;\n) Tj
ET
BT
15 527 Td
(                    break;\n) Tj
ET
BT
15 516 Td
(                }\n) Tj
ET
BT
15 505 Td
(                case '\\n':\n) Tj
ET
BT
15 494 Td
(                {\n) Tj
ET
BT
15 483 Td
(                    if \(key.size\(\)\)\n) Tj
ET
BT
15 472 Td
(                    {\n) Tj
ET
BT
15 461 Td
(                        add_param\(key, buffer\);\n) Tj
ET
BT
15 450 Td
(                        key.clear\(\);\n) Tj
ET
BT
15 439 Td
(                    }\n) Tj
ET
BT
15 428 Td
(                    else\n) Tj
ET
BT
15 417 Td
(                    {\n) Tj
ET
BT
15 406 Td
(                        add_uri\(buffer\);\n) Tj
ET
BT
15 395 Td
(                    }\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 362 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(                    pos++;\n) Tj
ET
BT
15 329 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 318 Td
(                    break;\n) Tj
ET
BT
15 307 Td
(                }\n) Tj
ET
BT
15 296 Td
(                default:\n) Tj
ET
BT
15 285 Td
(                {\n) Tj
ET
BT
15 274 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 263 Td
(                    pos++;\n) Tj
ET
BT
15 252 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 241 Td
(                }\n) Tj
ET
BT
15 230 Td
(            }\n) Tj
ET
BT
15 219 Td
(        }\n) Tj
ET
BT
15 208 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 197 Td
(    }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    HFEvent::HFEvent\(\) : HeaderField\("Event", "o"\)\n) Tj
ET
BT
15 164 Td
(    {\n) Tj
ET
BT
15 153 Td
(//        header_params_.append\("adaptive-min-rate"\);\n) Tj
ET
BT
15 142 Td
(//        header_params_.append\("body"\);\n) Tj
ET
BT
15 131 Td
(//        header_params_.append\("call-id"\);\n) Tj
ET
BT
15 120 Td
(//        header_params_.append\("effective-by"\);\n) Tj
ET
BT
15 109 Td
(//        header_params_.append\("from-tag"\);\n) Tj
ET
BT
15 98 Td
(//        header_params_.append\("id"\);\n) Tj
ET
BT
15 87 Td
(//        header_params_.append\("include-session-description"\);\n) Tj
ET
BT
15 76 Td
(//        header_params_.append\("max-rate"\);\n) Tj
ET
BT
15 65 Td
(//        header_params_.append\("min-rate"\);\n) Tj
ET
BT
15 54 Td
(//        header_params_.append\("model"\);\n) Tj
ET
BT
15 43 Td
(//        header_params_.append\("profile-type"\);\n) Tj
ET

endstream
endobj
333 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [334 0 R ] /Parent 2 0 R >>
endobj
334 0 obj 
<</Length 3594 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(110) Tj
ET
BT
15 780 Td
(//        header_params_.append\("shared"\);\n) Tj
ET
BT
15 769 Td
(//        header_params_.append\("to-tag"\);\n) Tj
ET
BT
15 758 Td
(//        header_params_.append\("vendor"\);\n) Tj
ET
BT
15 747 Td
(//        header_params_.append\("version"\);\n) Tj
ET
BT
15 736 Td
(    }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    void HFEvent::generate_values\(\)\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    int HFEvent::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 626 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    void HFInReplyTo::generate_values\(\)\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 560 Td
(    }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    int HFInReplyTo::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 527 Td
(    {\n) Tj
ET
BT
15 516 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 505 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 494 Td
(    }\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(    void HFJoin::generate_values\(\)\n) Tj
ET
BT
15 461 Td
(    {\n) Tj
ET
BT
15 450 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 439 Td
(    }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(    int HFJoin::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 384 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    void HFPrivacy::generate_values\(\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 318 Td
(    }\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(    int HFPrivacy::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 285 Td
(    {\n) Tj
ET
BT
15 274 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 263 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 252 Td
(    }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    HFProxyAuthorization::HFProxyAuthorization\(\) : HFBase_5_\("Proxy-Authorization", true\)\n) Tj
ET
BT
15 219 Td
(    {\n) Tj
ET
BT
15 208 Td
(//        header_params_.append\("algorithm"\);\n) Tj
ET
BT
15 197 Td
(//        header_params_.append\("auts"\);\n) Tj
ET
BT
15 186 Td
(//        header_params_.append\("cnonce"\);\n) Tj
ET
BT
15 175 Td
(//        header_params_.append\("nc"\);\n) Tj
ET
BT
15 164 Td
(//        header_params_.append\("nonce"\);\n) Tj
ET
BT
15 153 Td
(//        header_params_.append\("opaque"\);\n) Tj
ET
BT
15 142 Td
(//        header_params_.append\("qop"\);\n) Tj
ET
BT
15 131 Td
(//        header_params_.append\("realm"\);\n) Tj
ET
BT
15 120 Td
(//        header_params_.append\("response"\);\n) Tj
ET
BT
15 109 Td
(//        header_params_.append\("uri"\);\n) Tj
ET
BT
15 98 Td
(//        header_params_.append\("username"\);\n) Tj
ET
BT
15 87 Td
(    }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    void HFPOSPAuthToken::generate_values\(\)\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET

endstream
endobj
336 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [337 0 R ] /Parent 2 0 R >>
endobj
337 0 obj 
<</Length 3283 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(111) Tj
ET
BT
15 780 Td
(    }\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(    int HFPOSPAuthToken::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 747 Td
(    {\n) Tj
ET
BT
15 736 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 725 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 714 Td
(    }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    void HFPAssertedIdentity::generate_values\(\)\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    int HFPAssertedIdentity::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 604 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    void HFPPreferredIdentity::generate_values\(\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    int HFPPreferredIdentity::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 483 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    void HFReason::generate_values\(\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 417 Td
(    }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(    int HFReason::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 384 Td
(    {\n) Tj
ET
BT
15 373 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 362 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 351 Td
(    }\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    void HFReferTo::generate_values\(\)\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 296 Td
(    }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(    int HFReferTo::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 263 Td
(    {\n) Tj
ET
BT
15 252 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 241 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 230 Td
(    }\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(    void HFReferredBy::generate_values\(\)\n) Tj
ET
BT
15 197 Td
(    {\n) Tj
ET
BT
15 186 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 175 Td
(    }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(    int HFReferredBy::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 142 Td
(    {\n) Tj
ET
BT
15 131 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 120 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 109 Td
(    }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(    void HFReplyTo::generate_values\(\)\n) Tj
ET
BT
15 76 Td
(    {\n) Tj
ET
BT
15 65 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 54 Td
(    }\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
339 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [340 0 R ] /Parent 2 0 R >>
endobj
340 0 obj 
<</Length 3498 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(112) Tj
ET
BT
15 780 Td
(    int HFReplyTo::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 769 Td
(    {\n) Tj
ET
BT
15 758 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 747 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 736 Td
(    }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    void HFReplaces::generate_values\(\)\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    int HFReplaces::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 626 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    void HFRejectContact::generate_values\(\)\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 560 Td
(    }\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(    int HFRejectContact::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 527 Td
(    {\n) Tj
ET
BT
15 516 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 505 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 494 Td
(    }\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(    void HFRequestDisposition::generate_values\(\)\n) Tj
ET
BT
15 461 Td
(    {\n) Tj
ET
BT
15 450 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 439 Td
(    }\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(    int HFRequestDisposition::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 384 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    void HFRack::generate_values\(\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 318 Td
(    }\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(    int HFRack::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 285 Td
(    {\n) Tj
ET
BT
15 274 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 263 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 252 Td
(    }\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(    void HFSessionExpires::generate_values\(\)\n) Tj
ET
BT
15 219 Td
(    {\n) Tj
ET
BT
15 208 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 197 Td
(    }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    int HFSessionExpires::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 164 Td
(    {\n) Tj
ET
BT
15 153 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 142 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 131 Td
(    }\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(    HFSubscriptionState::HFSubscriptionState\(\) : HeaderField\("Subscription-State"\)\n) Tj
ET
BT
15 98 Td
(    {\n) Tj
ET
BT
15 87 Td
(//        header_params_.append\("adaptive-min-rate"\);\n) Tj
ET
BT
15 76 Td
(//        header_params_.append\("expires"\);\n) Tj
ET
BT
15 65 Td
(//        header_params_.append\("max-rate"\);\n) Tj
ET
BT
15 54 Td
(//        header_params_.append\("min-rate"\);\n) Tj
ET
BT
15 43 Td
(//        header_params_.append\("reason"\);\n) Tj
ET

endstream
endobj
342 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [343 0 R ] /Parent 2 0 R >>
endobj
343 0 obj 
<</Length 3537 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(113) Tj
ET
BT
15 780 Td
(//        header_params_.append\("retry-after"\);\n) Tj
ET
BT
15 769 Td
(    }\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(    void HFSubscriptionState::generate_values\(\)\n) Tj
ET
BT
15 736 Td
(    {\n) Tj
ET
BT
15 725 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 714 Td
(    }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    int HFSubscriptionState::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 659 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 648 Td
(    }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    HFAuthenticationInfo::HFAuthenticationInfo\(\) : HeaderField\("Authentication-Info"\)\n) Tj
ET
BT
15 615 Td
(    {\n) Tj
ET
BT
15 604 Td
(//        header_params_.append\("cnonce"\);\n) Tj
ET
BT
15 593 Td
(//        header_params_.append\("nc"\);\n) Tj
ET
BT
15 582 Td
(//        header_params_.append\("nextnonce"\);\n) Tj
ET
BT
15 571 Td
(//        header_params_.append\("qop"\);\n) Tj
ET
BT
15 560 Td
(//        header_params_.append\("rspauth"\);\n) Tj
ET
BT
15 549 Td
(    }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(    void HFAuthenticationInfo::generate_values\(\)\n) Tj
ET
BT
15 516 Td
(    {\n) Tj
ET
BT
15 505 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 494 Td
(    }\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(    int HFAuthenticationInfo::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 461 Td
(    {\n) Tj
ET
BT
15 450 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 439 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 428 Td
(    }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(    void HFMinSE::generate_values\(\)\n) Tj
ET
BT
15 395 Td
(    {\n) Tj
ET
BT
15 384 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    int HFMinSE::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 318 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 307 Td
(    }\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(    HFProxyAuthenticate::HFProxyAuthenticate\(\) : HFBase_4_\("Proxy-Authenticate", true\)\n) Tj
ET
BT
15 274 Td
(    {\n) Tj
ET
BT
15 263 Td
(//        header_params_.append\("algorithm"\);\n) Tj
ET
BT
15 252 Td
(//        header_params_.append\("domain"\);\n) Tj
ET
BT
15 241 Td
(//        header_params_.append\("nonce"\);\n) Tj
ET
BT
15 230 Td
(//        header_params_.append\("opaque"\);\n) Tj
ET
BT
15 219 Td
(//        header_params_.append\("qop"\);\n) Tj
ET
BT
15 208 Td
(//        header_params_.append\("realm"\);\n) Tj
ET
BT
15 197 Td
(//        header_params_.append\("stale"\);\n) Tj
ET
BT
15 186 Td
(    }\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(    void HFWarning::generate_values\(\)\n) Tj
ET
BT
15 153 Td
(    {\n) Tj
ET
BT
15 142 Td
(        char sym = ',';\n) Tj
ET
BT
15 131 Td
(        std::ostringstream o;\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        for \(auto &it : warn_vals_\)\n) Tj
ET
BT
15 98 Td
(            o << it << sym;\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        values_ = o.str\(\);\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(        remove_tail_symbol\(sym\);\n) Tj
ET
BT
15 43 Td
(        \n) Tj
ET

endstream
endobj
345 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [346 0 R ] /Parent 2 0 R >>
endobj
346 0 obj 
<</Length 3657 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(114) Tj
ET
BT
15 780 Td
(        std::stringstream p;\n) Tj
ET
BT
15 769 Td
(        p << header_params_;\n) Tj
ET
BT
15 758 Td
(        values_ += p.str\(\);\n) Tj
ET
BT
15 747 Td
(    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(    int HFWarning::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 714 Td
(    {\n) Tj
ET
BT
15 703 Td
(        bool run = true, in_dquote = false;\n) Tj
ET
BT
15 692 Td
(        std::string buffer;\n) Tj
ET
BT
15 681 Td
(        size_t index = 0;\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(        while \(run\)\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 604 Td
(            {\n) Tj
ET
BT
15 593 Td
(                CASE_TOKEN\n) Tj
ET
BT
15 582 Td
(                case '\(':\n) Tj
ET
BT
15 571 Td
(                case '\)':\n) Tj
ET
BT
15 560 Td
(                case ']':\n) Tj
ET
BT
15 549 Td
(                case '[':\n) Tj
ET
BT
15 538 Td
(                case '<':\n) Tj
ET
BT
15 527 Td
(                case '>':\n) Tj
ET
BT
15 516 Td
(                {\n) Tj
ET
BT
15 505 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 494 Td
(                    break;\n) Tj
ET
BT
15 483 Td
(                }\n) Tj
ET
BT
15 472 Td
(                case '\\t':\n) Tj
ET
BT
15 461 Td
(                {\n) Tj
ET
BT
15 450 Td
(                    pos++;\n) Tj
ET
BT
15 439 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 428 Td
(                    break;\n) Tj
ET
BT
15 417 Td
(                }\n) Tj
ET
BT
15 406 Td
(                case ' ':\n) Tj
ET
BT
15 395 Td
(                {\n) Tj
ET
BT
15 384 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 373 Td
(                    {\n) Tj
ET
BT
15 362 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 351 Td
(                        break;\n) Tj
ET
BT
15 340 Td
(                    }\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 307 Td
(                    {\n) Tj
ET
BT
15 296 Td
(                        if \(index >= warn_vals_.size\(\)\)\n) Tj
ET
BT
15 285 Td
(                            warn_vals_.resize\(warn_vals_.size\(\)+1\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(                        if \(warn_vals_.at\(index\).code_.empty\(\)\)\n) Tj
ET
BT
15 252 Td
(                            warn_vals_.at\(index\).code_ = buffer;\n) Tj
ET
BT
15 241 Td
(                    }\n) Tj
ET
BT
15 230 Td
(                \n) Tj
ET
BT
15 219 Td
(                    pos++;\n) Tj
ET
BT
15 208 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 197 Td
(                    break;\n) Tj
ET
BT
15 186 Td
(                }\n) Tj
ET
BT
15 175 Td
(                case ',':\n) Tj
ET
BT
15 164 Td
(                {\n) Tj
ET
BT
15 153 Td
(                    if \(in_dquote\)\n) Tj
ET
BT
15 142 Td
(                    {\n) Tj
ET
BT
15 131 Td
(                        buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 120 Td
(                        break;\n) Tj
ET
BT
15 109 Td
(                    }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 76 Td
(                    {\n) Tj
ET
BT
15 65 Td
(                        if \(index >= warn_vals_.size\(\)\)\n) Tj
ET
BT
15 54 Td
(                            warn_vals_.resize\(warn_vals_.size\(\)+1\);\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
348 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [349 0 R ] /Parent 2 0 R >>
endobj
349 0 obj 
<</Length 3996 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(115) Tj
ET
BT
15 780 Td
(                        if \(warn_vals_.at\(index\).text_.empty\(\)\)\n) Tj
ET
BT
15 769 Td
(                            warn_vals_.at\(index\).text_ = buffer;\n) Tj
ET
BT
15 758 Td
(                        index++;\n) Tj
ET
BT
15 747 Td
(                    }\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(                    pos++;\n) Tj
ET
BT
15 714 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 703 Td
(                    break;\n) Tj
ET
BT
15 692 Td
(                }\n) Tj
ET
BT
15 681 Td
(                case '"':\n) Tj
ET
BT
15 670 Td
(                {\n) Tj
ET
BT
15 659 Td
(                    in_dquote = !in_dquote;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(                    if \(!in_dquote\)\n) Tj
ET
BT
15 626 Td
(                    {\n) Tj
ET
BT
15 615 Td
(                        if \(buffer.size\(\)\)\n) Tj
ET
BT
15 604 Td
(                        {\n) Tj
ET
BT
15 593 Td
(                            if \(index >= warn_vals_.size\(\)\)\n) Tj
ET
BT
15 582 Td
(                                warn_vals_.resize\(warn_vals_.size\(\)+1\);\n) Tj
ET
BT
15 571 Td
(    \n) Tj
ET
BT
15 560 Td
(                            if \(warn_vals_.at\(index\).text_.empty\(\)\)\n) Tj
ET
BT
15 549 Td
(                                warn_vals_.at\(index\).text_ = buffer;\n) Tj
ET
BT
15 538 Td
(                            index++;\n) Tj
ET
BT
15 527 Td
(                        }\n) Tj
ET
BT
15 516 Td
(                    }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(                    pos++;\n) Tj
ET
BT
15 483 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 472 Td
(                    break;\n) Tj
ET
BT
15 461 Td
(                }\n) Tj
ET
BT
15 450 Td
(                case '\\r':\n) Tj
ET
BT
15 439 Td
(                {\n) Tj
ET
BT
15 428 Td
(                    pos++;\n) Tj
ET
BT
15 417 Td
(                    break;\n) Tj
ET
BT
15 406 Td
(                }\n) Tj
ET
BT
15 395 Td
(                case '\\n':\n) Tj
ET
BT
15 384 Td
(                {\n) Tj
ET
BT
15 373 Td
(                    if \(buffer.size\(\)\)\n) Tj
ET
BT
15 362 Td
(                    {\n) Tj
ET
BT
15 351 Td
(                        if \(index >= warn_vals_.size\(\)\)\n) Tj
ET
BT
15 340 Td
(                            warn_vals_.resize\(warn_vals_.size\(\)+1\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(                        if \(warn_vals_.at\(index\).text_.empty\(\)\)\n) Tj
ET
BT
15 307 Td
(                            warn_vals_.at\(index\).text_ = buffer;\n) Tj
ET
BT
15 296 Td
(                        index++;\n) Tj
ET
BT
15 285 Td
(                    }\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(                    if \(pos+1 >= msg.size\(\)\) { run = false; break; }\n) Tj
ET
BT
15 252 Td
(                    do_if_is_alpha\(msg.at\(pos+1\), run = false\)\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(                    pos++;\n) Tj
ET
BT
15 219 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 208 Td
(                    break;\n) Tj
ET
BT
15 197 Td
(                }\n) Tj
ET
BT
15 186 Td
(                default:\n) Tj
ET
BT
15 175 Td
(                {\n) Tj
ET
BT
15 164 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 153 Td
(                    pos++;\n) Tj
ET
BT
15 142 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 131 Td
(                }\n) Tj
ET
BT
15 120 Td
(            }\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 87 Td
(    }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    HFWWWAuthenticate::HFWWWAuthenticate\(\) : HFBase_5_\("WWW-Authenticate", true\)\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(//        header_params_.append\("algorithm"\);\n) Tj
ET

endstream
endobj
351 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [352 0 R ] /Parent 2 0 R >>
endobj
352 0 obj 
<</Length 3429 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(116) Tj
ET
BT
15 780 Td
(//        header_params_.append\("domain"\);\n) Tj
ET
BT
15 769 Td
(//        header_params_.append\("nonce"\);\n) Tj
ET
BT
15 758 Td
(//        header_params_.append\("opaque"\);\n) Tj
ET
BT
15 747 Td
(//        header_params_.append\("qop"\);\n) Tj
ET
BT
15 736 Td
(//        header_params_.append\("realm"\);\n) Tj
ET
BT
15 725 Td
(//        header_params_.append\("stale"\);\n) Tj
ET
BT
15 714 Td
(    }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(    void HFRSeq::generate_values\(\)\n) Tj
ET
BT
15 681 Td
(    {\n) Tj
ET
BT
15 670 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    int HFRSeq::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 604 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    void HFContentLanguage::generate_values\(\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    int HFContentLanguage::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(        std::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 483 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    void HFMIMEVersion::generate_values\(\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        values_ = dotted_value_;\n) Tj
ET
BT
15 417 Td
(        std::stringstream p;\n) Tj
ET
BT
15 406 Td
(        p << header_params_;\n) Tj
ET
BT
15 395 Td
(        values_ += p.str\(\);\n) Tj
ET
BT
15 384 Td
(    }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    int HFMIMEVersion::parse\(std::string &msg, size_t &pos\)\n) Tj
ET
BT
15 351 Td
(    {\n) Tj
ET
BT
15 340 Td
(        bool run = true;\n) Tj
ET
BT
15 329 Td
(        std::string buffer;\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(        while \(msg.at\(pos\) == ' ' || msg.at\(pos\) == '\\t'\) pos++;\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        while \(run\)\n) Tj
ET
BT
15 274 Td
(        {\n) Tj
ET
BT
15 263 Td
(            switch \(msg.at\(pos\)\)\n) Tj
ET
BT
15 252 Td
(            {\n) Tj
ET
BT
15 241 Td
(                CASE_DIGIT\n) Tj
ET
BT
15 230 Td
(                case '.':\n) Tj
ET
BT
15 219 Td
(                {\n) Tj
ET
BT
15 208 Td
(                    buffer += msg.at\(pos++\);\n) Tj
ET
BT
15 197 Td
(                    break;\n) Tj
ET
BT
15 186 Td
(                }\n) Tj
ET
BT
15 175 Td
(                case '\\r':\n) Tj
ET
BT
15 164 Td
(                {\n) Tj
ET
BT
15 153 Td
(                    pos++;\n) Tj
ET
BT
15 142 Td
(                    break;\n) Tj
ET
BT
15 131 Td
(                }\n) Tj
ET
BT
15 120 Td
(                case '\\n':\n) Tj
ET
BT
15 109 Td
(                {\n) Tj
ET
BT
15 98 Td
(                    if \(dotted_value_.empty\(\)\)\n) Tj
ET
BT
15 87 Td
(                        dotted_value_ = buffer;\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(                    run = false;\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(                    pos++;\n) Tj
ET

endstream
endobj
354 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [355 0 R ] /Parent 2 0 R >>
endobj
355 0 obj 
<</Length 5585 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(117) Tj
ET
BT
15 780 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 769 Td
(                    break;\n) Tj
ET
BT
15 758 Td
(                }\n) Tj
ET
BT
15 747 Td
(                default:\n) Tj
ET
BT
15 736 Td
(                {\n) Tj
ET
BT
15 725 Td
(                    std::cerr << __PRETTY_FUNCTION__ << " Unexpected '" << msg.at\(pos\) << '\(' << \(int\)msg.at\(pos\) << '\)' << "': \
" << buffer << "\\n";\n) Tj
ET
BT
15 714 Td
(                    pos++;\n) Tj
ET
BT
15 703 Td
(                    buffer.clear\(\);\n) Tj
ET
BT
15 692 Td
(                }\n) Tj
ET
BT
15 681 Td
(            }\n) Tj
ET
BT
15 670 Td
(        }\n) Tj
ET
BT
15 659 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 648 Td
(    }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    void HeaderFields::init_allowed_fields\(\)\n) Tj
ET
BT
15 615 Td
(    {\n) Tj
ET
BT
15 604 Td
(        allowed_fields_["Call-ID"]               = HF_CALLID;\n) Tj
ET
BT
15 593 Td
(        allowed_fields_["CSeq"]                 = HF_CSEQ;\n) Tj
ET
BT
15 582 Td
(        allowed_fields_["From"]                 = HF_FROM;\n) Tj
ET
BT
15 571 Td
(        allowed_fields_["To"]                   = HF_TO;\n) Tj
ET
BT
15 560 Td
(        allowed_fields_["Via"]                  = HF_VIA;\n) Tj
ET
BT
15 549 Td
(        allowed_fields_["Alert-Info"]           = HF_ALERT_INFO;\n) Tj
ET
BT
15 538 Td
(        allowed_fields_["Allow-Events"]         = HF_ALLOW_EVENTS;\n) Tj
ET
BT
15 527 Td
(        allowed_fields_["Date"]                 = HF_DATE;\n) Tj
ET
BT
15 516 Td
(        allowed_fields_["Contact"]              = HF_CONTACT;\n) Tj
ET
BT
15 505 Td
(        allowed_fields_["Organization"]         = HF_ORGANIZATION;\n) Tj
ET
BT
15 494 Td
(        allowed_fields_["Record-Route"]         = HF_RECORD_ROUTE;\n) Tj
ET
BT
15 483 Td
(        allowed_fields_["Retry-After"]          = HF_RETRY_AFTER;\n) Tj
ET
BT
15 472 Td
(        allowed_fields_["Subject"]              = HF_SUBJECT;\n) Tj
ET
BT
15 461 Td
(        allowed_fields_["Supported"]            = HF_SUPPORTED;\n) Tj
ET
BT
15 450 Td
(        allowed_fields_["Timestamp"]            = HF_TIMESTAMP;\n) Tj
ET
BT
15 439 Td
(        allowed_fields_["User-Agent"]           = HF_USER_AGENT;\n) Tj
ET
BT
15 428 Td
(        allowed_fields_["Answer-Mode"]          = HF_ANSWER_MODE;\n) Tj
ET
BT
15 417 Td
(        allowed_fields_["Priv-Answer-Mode"]     = HF_PRIV_ANSWER_MODE;\n) Tj
ET
BT
15 406 Td
(        allowed_fields_["Accept"]               = HF_ACCEPT;\n) Tj
ET
BT
15 395 Td
(        allowed_fields_["Accept-Contact"]       = HF_ACCEPT_CONTACT;\n) Tj
ET
BT
15 384 Td
(        allowed_fields_["Accept-Encoding"]      = HF_ACCEPT_ENCODING;\n) Tj
ET
BT
15 373 Td
(        allowed_fields_["Accept-Language"]      = HF_ACCEPT_LANGUAGE;\n) Tj
ET
BT
15 362 Td
(        allowed_fields_["Authorization"]        = HF_AUTHORIZATION;\n) Tj
ET
BT
15 351 Td
(        allowed_fields_["Call-Info"]            = HF_CALL_INFO;\n) Tj
ET
BT
15 340 Td
(        allowed_fields_["Event"]                = HF_EVENT;\n) Tj
ET
BT
15 329 Td
(        allowed_fields_["In-Reply-To"]          = HF_IN_REPLY_TO;\n) Tj
ET
BT
15 318 Td
(        allowed_fields_["Join"]                 = HF_JOIN;\n) Tj
ET
BT
15 307 Td
(        allowed_fields_["Priority"]             = HF_PRIORITY;\n) Tj
ET
BT
15 296 Td
(        allowed_fields_["Privacy"]              = HF_PRIVACY;\n) Tj
ET
BT
15 285 Td
(        allowed_fields_["Proxy-Authorization"]    = HF_PROXY_AUTHORIZATION;\n) Tj
ET
BT
15 274 Td
(        allowed_fields_["Proxy-Require"]        = HF_PROXY_REQUIRE;\n) Tj
ET
BT
15 263 Td
(        allowed_fields_["P-OSP-AuthToken"]      = HF_P_OSP_AUTHTOKEN;\n) Tj
ET
BT
15 252 Td
(        allowed_fields_["PAsserted-Identity"]    = HF_PASSERTED_IDENTITY;\n) Tj
ET
BT
15 241 Td
(        allowed_fields_["PPreferred-Identity"]    = HF_PPREFERRED_IDENTITY;\n) Tj
ET
BT
15 230 Td
(        allowed_fields_["Max-Forwards"]         = HF_MAX_FORWARDS;\n) Tj
ET
BT
15 219 Td
(        allowed_fields_["Reason"]               = HF_REASON;\n) Tj
ET
BT
15 208 Td
(        allowed_fields_["Refer-To"]             = HF_REFER_TO;\n) Tj
ET
BT
15 197 Td
(        allowed_fields_["Referred-By"]          = HF_REFERRED_BY;\n) Tj
ET
BT
15 186 Td
(        allowed_fields_["Reply-To"]             = HF_REPLY_TO;\n) Tj
ET
BT
15 175 Td
(        allowed_fields_["Replaces"]             = HF_REPLACES;\n) Tj
ET
BT
15 164 Td
(        allowed_fields_["Reject-Contact"]       = HF_REJECT_CONTACT;\n) Tj
ET
BT
15 153 Td
(        allowed_fields_["Request-Disposition"]    = HF_REQUEST_DISPOSITION;\n) Tj
ET
BT
15 142 Td
(        allowed_fields_["Require"]              = HF_REQUIRE;\n) Tj
ET
BT
15 131 Td
(        allowed_fields_["Route"]                = HF_ROUTE;\n) Tj
ET
BT
15 120 Td
(        allowed_fields_["Rack"]                 = HF_RACK;\n) Tj
ET
BT
15 109 Td
(        allowed_fields_["Session-Expires"]      = HF_SESSION_EXPIRES;\n) Tj
ET
BT
15 98 Td
(        allowed_fields_["Subscription-State"]    = HF_SUBSCRIPTION_STATE;\n) Tj
ET
BT
15 87 Td
(        allowed_fields_["AuthenticationInfo"]    = HF_AUTHENTICATIONINFO;\n) Tj
ET
BT
15 76 Td
(        allowed_fields_["Error-Info"]           = HF_ERROR_INFO;\n) Tj
ET
BT
15 65 Td
(        allowed_fields_["Min-Expires"]          = HF_MIN_EXPIRES;\n) Tj
ET
BT
15 54 Td
(        allowed_fields_["Min-SE"]               = HF_MIN_SE;\n) Tj
ET
BT
15 43 Td
(        allowed_fields_["Proxy-Authenticate"]    = HF_PROXY_AUTHENTICATE;\n) Tj
ET

endstream
endobj
357 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [358 0 R ] /Parent 2 0 R >>
endobj
358 0 obj 
<</Length 1681 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/header_field.cpp) Tj
ET
BT
565 822 Td
(118) Tj
ET
BT
15 780 Td
(        allowed_fields_["Server"]               = HF_SERVER;\n) Tj
ET
BT
15 769 Td
(        allowed_fields_["Unsupported"]          = HF_UNSUPPORTED;\n) Tj
ET
BT
15 758 Td
(        allowed_fields_["Warning"]              = HF_WARNING;\n) Tj
ET
BT
15 747 Td
(        allowed_fields_["WWW-Authenticate"]     = HF_WWW_AUTHENTICATE;\n) Tj
ET
BT
15 736 Td
(        allowed_fields_["RSeq"]                 = HF_RSEQ;\n) Tj
ET
BT
15 725 Td
(        allowed_fields_["Allow"]                = HF_ALLOW;\n) Tj
ET
BT
15 714 Td
(        allowed_fields_["Content-Encoding"]     = HF_CONTENT_ENCODING;\n) Tj
ET
BT
15 703 Td
(        allowed_fields_["Content-Length"]       = HF_CONTENT_LENGTH;\n) Tj
ET
BT
15 692 Td
(        allowed_fields_["Content-Disposition"]     = HF_CONTENT_DISPOSITION;\n) Tj
ET
BT
15 681 Td
(        allowed_fields_["Content-Language"]     = HF_CONTENT_LANGUAGE;\n) Tj
ET
BT
15 670 Td
(        allowed_fields_["Content-Type"]         = HF_CONTENT_TYPE;\n) Tj
ET
BT
15 659 Td
(        allowed_fields_["Expires"]              = HF_EXPIRES;\n) Tj
ET
BT
15 648 Td
(        allowed_fields_["MIME-Version"]         = HF_MIME_VERSION;\n) Tj
ET
BT
15 637 Td
(       }\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    HeaderFields::HeaderFields\(\)\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    HeaderFields::~HeaderFields\(\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(    }\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
360 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [361 0 R ] /Parent 2 0 R >>
endobj
361 0 obj 
<</Length 2700 >>
stream
/F1 10 Tf
BT
124.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/timer.cpp) Tj
ET
BT
565 822 Td
(119) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/timer.cpp\n) Tj
ET
BT
15 758 Td
( */\n) Tj
ET
BT
15 747 Td
(#include "timer.h"\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(namespace EasySip\n) Tj
ET
BT
15 714 Td
({\n) Tj
ET
BT
15 703 Td
(    bool operator== \(struct itimerval &a, struct itimerval &b\)\n) Tj
ET
BT
15 692 Td
(    {\n) Tj
ET
BT
15 681 Td
(        return timercmp\(&a.it_interval, &b.it_interval, ==\)\n) Tj
ET
BT
15 670 Td
(                && timercmp\(&a.it_value, &b.it_value, ==\);\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    bool operator!= \(struct itimerval &a, struct itimerval &b\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        return !\(timercmp\(&a.it_interval, &b.it_interval, ==\)\n) Tj
ET
BT
15 604 Td
(                && timercmp\(&a.it_value, &b.it_value, ==\)\);\n) Tj
ET
BT
15 593 Td
(    }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(    std::ostream& operator<< \(std::ostream &o, struct timeval &a\)\n) Tj
ET
BT
15 560 Td
(    {\n) Tj
ET
BT
15 549 Td
(        return o << "[" << a.tv_sec << ", " << a.tv_usec << "]";\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    std::ostream& operator<< \(std::ostream &o, struct itimerval &a\)\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(        return o << a.it_value << " : " << a.it_interval;\n) Tj
ET
BT
15 483 Td
(    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    std::ostream& operator<< \(std::ostream &o, struct timespec &a\)\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(        return o << "[" << a.tv_sec << ", " << a.tv_nsec << "]";\n) Tj
ET
BT
15 428 Td
(    }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(    std::ostream& operator<< \(std::ostream &o, struct itimerspec &a\)\n) Tj
ET
BT
15 395 Td
(    {\n) Tj
ET
BT
15 384 Td
(        return o << a.it_value << " : " << a.it_interval;\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(    std::string Time::now\(\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        time_t buf = time\(0\);\n) Tj
ET
BT
15 318 Td
(        std::string fmt\("%a, %d %b %G %H:%M:%S GMT"\);\n) Tj
ET
BT
15 307 Td
(        char sbuf[30] = {0};\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        strftime\(sbuf, sizeof\(sbuf\), fmt.c_str\(\), gmtime\(&buf\)\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        return std::string\(sbuf\);\n) Tj
ET
BT
15 252 Td
(//      return std::string\(asctime\(gmtime\(&buf\)\)\);\n) Tj
ET
BT
15 241 Td
(    }\n) Tj
ET
BT
15 230 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
363 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [364 0 R ] /Parent 2 0 R >>
endobj
364 0 obj 
<</Length 3150 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/dialog.cpp) Tj
ET
BT
565 822 Td
(120) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/dialog.cpp\n) Tj
ET
BT
15 758 Td
( */\n) Tj
ET
BT
15 747 Td
(#include "dialog.h"\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(namespace EasySip\n) Tj
ET
BT
15 703 Td
({\n) Tj
ET
BT
15 692 Td
(\tDialog::Dialog\(Dialog &dia\)\n) Tj
ET
BT
15 681 Td
(\t{\n) Tj
ET
BT
15 670 Td
(\t\t*this = dia;\n) Tj
ET
BT
15 659 Td
(\t}\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(\tDialog::Dialog\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 626 Td
(\t: secure_flag_\(false\), confirmed_\(false\)\n) Tj
ET
BT
15 615 Td
(\t{\n) Tj
ET
BT
15 604 Td
(\t\tif \(false /*TODO: sent over TLS && in_msg.req_line_->request_uri_ has sip URI */\)\n) Tj
ET
BT
15 593 Td
(\t\t{\n) Tj
ET
BT
15 582 Td
(\t\t\tsecure_flag\(true\);\n) Tj
ET
BT
15 571 Td
(\t\t}\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\t\tif \(in_msg.record_route_.size\(\)\)\n) Tj
ET
BT
15 538 Td
(\t\t{\n) Tj
ET
BT
15 527 Td
(\t\t\troutes\(in_msg.record_route_\);\n) Tj
ET
BT
15 516 Td
(\t\t\tstd::reverse\(routes\(\).begin\(\), routes\(\).end\(\)\);\n) Tj
ET
BT
15 505 Td
(\t\t}\n) Tj
ET
BT
15 494 Td
(\t\telse\n) Tj
ET
BT
15 483 Td
(\t\t{\n) Tj
ET
BT
15 472 Td
(\t\t\troutes\(\).clear\(\);\n) Tj
ET
BT
15 461 Td
(\t\t}\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(\t\tif \(in_msg.cseq_.size\(\)\)\n) Tj
ET
BT
15 428 Td
(\t\t{\n) Tj
ET
BT
15 417 Td
(\t\t\tremote_seq\(*in_msg.cseq_.last\(\)\);\n) Tj
ET
BT
15 406 Td
(\t\t}\n) Tj
ET
BT
15 395 Td
(//\t\tlocal_seq_ = UNSET;\n) Tj
ET
BT
15 384 Td
(\t\tif \(in_msg.call_id_.size\(\)\)\n) Tj
ET
BT
15 373 Td
(\t\t{\n) Tj
ET
BT
15 362 Td
(\t\t\tid\(\).call_id\(*in_msg.call_id_.last\(\)\);\n) Tj
ET
BT
15 351 Td
(\t\t}\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(\t\tif \(in_msg.to_.size\(\)\)\n) Tj
ET
BT
15 318 Td
(\t\t{\n) Tj
ET
BT
15 307 Td
(\t\t\tid\(\).local_tag\(in_msg.to_.last\(\)->tag\(\)\);\n) Tj
ET
BT
15 296 Td
(\t\t\tlocal_uri\(in_msg.to_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 285 Td
(\t\t}\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(\t\tif \(in_msg.from_.size\(\)\)\n) Tj
ET
BT
15 252 Td
(\t\t{\n) Tj
ET
BT
15 241 Td
(\t\t\tid\(\).remote_tag\(in_msg.from_.last\(\)->tag\(\)\);\n) Tj
ET
BT
15 230 Td
(\t\t\tremote_uri\(in_msg.from_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 219 Td
(\t\t}\n) Tj
ET
BT
15 208 Td
(\t}\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(\tDialog::Dialog\(ResponseMessage &in_msg\)\n) Tj
ET
BT
15 175 Td
(\t: secure_flag_\(false\), confirmed_\(false\)\n) Tj
ET
BT
15 164 Td
(\t{\n) Tj
ET
BT
15 153 Td
(\t\tif \(false /*TODO: sent over TLS && in_msg.req_line_->request_uri_ has sip URI */\)\n) Tj
ET
BT
15 142 Td
(\t\t{\n) Tj
ET
BT
15 131 Td
(\t\t\tsecure_flag\(true\);\n) Tj
ET
BT
15 120 Td
(\t\t}\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(\t\tif \(in_msg.record_route_.size\(\)\)\n) Tj
ET
BT
15 87 Td
(\t\t{\n) Tj
ET
BT
15 76 Td
(\t\t\troutes\(in_msg.record_route_\);\n) Tj
ET
BT
15 65 Td
(\t\t\tstd::reverse\(routes\(\).begin\(\), routes\(\).end\(\)\);\n) Tj
ET
BT
15 54 Td
(\t\t}\n) Tj
ET
BT
15 43 Td
(\t\telse\n) Tj
ET

endstream
endobj
366 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [367 0 R ] /Parent 2 0 R >>
endobj
367 0 obj 
<</Length 3424 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/dialog.cpp) Tj
ET
BT
565 822 Td
(121) Tj
ET
BT
15 780 Td
(\t\t{\n) Tj
ET
BT
15 769 Td
(\t\t\troutes\(\).clear\(\);\n) Tj
ET
BT
15 758 Td
(\t\t}\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(\t\tfor \(auto &it : in_msg.contact_\)\n) Tj
ET
BT
15 725 Td
(\t\t{\n) Tj
ET
BT
15 714 Td
(\t\t\tremote_target\(\).append\(it->cons\(\)\);\n) Tj
ET
BT
15 703 Td
(\t\t}\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(//\t\tremote_seq\(UNSET\);\n) Tj
ET
BT
15 670 Td
(\t\tif \(in_msg.cseq_.size\(\)\)\n) Tj
ET
BT
15 659 Td
(\t\t{\n) Tj
ET
BT
15 648 Td
(\t\t\tlocal_seq\(*in_msg.cseq_.last\(\)\);\n) Tj
ET
BT
15 637 Td
(\t\t}\n) Tj
ET
BT
15 626 Td
(\t\tif \(in_msg.call_id_.size\(\)\)\n) Tj
ET
BT
15 615 Td
(\t\t{\n) Tj
ET
BT
15 604 Td
(\t\t\tid\(\).call_id\(*in_msg.call_id_.last\(\)\);\n) Tj
ET
BT
15 593 Td
(\t\t}\n) Tj
ET
BT
15 582 Td
(\t\tif \(in_msg.to_.size\(\)\)\n) Tj
ET
BT
15 571 Td
(\t\t{\n) Tj
ET
BT
15 560 Td
(\t\t\tid\(\).remote_tag\(in_msg.to_.last\(\)->tag\(\)\);\n) Tj
ET
BT
15 549 Td
(\t\t\tremote_uri\(in_msg.to_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 538 Td
(\t\t}\n) Tj
ET
BT
15 527 Td
(\t\tif \(in_msg.from_.size\(\)\)\n) Tj
ET
BT
15 516 Td
(\t\t{\n) Tj
ET
BT
15 505 Td
(\t\t\tid\(\).local_tag\(in_msg.from_.last\(\)->tag\(\)\);\n) Tj
ET
BT
15 494 Td
(\t\t\tlocal_uri\(in_msg.from_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 483 Td
(\t\t}\n) Tj
ET
BT
15 472 Td
(\t}\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(\tstd::ostream& operator<< \(std::ostream &o, Dialog &dia\)\n) Tj
ET
BT
15 439 Td
(\t{\n) Tj
ET
BT
15 428 Td
(\t\treturn o << dia.id\(\) \n) Tj
ET
BT
15 417 Td
(\t\t\t<< "local_seq: " << dia.local_seq\(\)\n) Tj
ET
BT
15 406 Td
(\t\t\t<< "remote_seq: " << dia.remote_seq\(\)\n) Tj
ET
BT
15 395 Td
(\t\t\t<< "local_uri: " << dia.local_uri\(\) << '\\n'\n) Tj
ET
BT
15 384 Td
(\t\t\t<< "remote_uri: " << dia.remote_uri\(\) << '\\n'\n) Tj
ET
BT
15 373 Td
(\t\t\t<< dia.remote_target\(\)\n) Tj
ET
BT
15 362 Td
(\t\t\t<< "secure_flag: " << dia.secure_flag\(\) << '\\n'\n) Tj
ET
BT
15 351 Td
(\t\t\t<< dia.routes\(\)\n) Tj
ET
BT
15 340 Td
(\t\t\t<< "confirmation: " << \(dia.is_confirmed\(\) ? "true" : "false"\) << '\\n';\n) Tj
ET
BT
15 329 Td
(\t}\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(\tDialog* Dialogs::create_dialog\(\)\n) Tj
ET
BT
15 296 Td
(\t{\n) Tj
ET
BT
15 285 Td
(\t\tappend_item\(\);\n) Tj
ET
BT
15 274 Td
(\t\tstd::cout << "dialogs size: [" << size\(\) << "]\\n";\n) Tj
ET
BT
15 263 Td
(\t\treturn last\(\);\n) Tj
ET
BT
15 252 Td
(\t}\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(\tDialog* Dialogs::create_dialog\(Dialog &dialog\)\n) Tj
ET
BT
15 219 Td
(\t{\n) Tj
ET
BT
15 208 Td
(\t\tappend_item\(dialog\);\n) Tj
ET
BT
15 197 Td
(\t\tstd::cout << "dialogs size: [" << size\(\) << "]\\n";\n) Tj
ET
BT
15 186 Td
(\t\treturn last\(\);\n) Tj
ET
BT
15 175 Td
(\t}\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(\tvoid Dialogs::cancel_dialog\(DialogId val\)\n) Tj
ET
BT
15 142 Td
(\t{\n) Tj
ET
BT
15 131 Td
(\t\tfor \(iterator it = begin\(\); it != end\(\);\)\n) Tj
ET
BT
15 120 Td
(\t\t{\n) Tj
ET
BT
15 109 Td
(\t\t\tif \(val == \(*it\)->id\(\)\)\n) Tj
ET
BT
15 98 Td
(\t\t\t{\n) Tj
ET
BT
15 87 Td
(\t\t\t\terase\(it\);\n) Tj
ET
BT
15 76 Td
(\t\t\t\tstd::cout << "cancel dialog: \\n[\\n" << **it << "]\\n";\n) Tj
ET
BT
15 65 Td
(\t\t\t\tbreak;\n) Tj
ET
BT
15 54 Td
(\t\t\t}\n) Tj
ET
BT
15 43 Td
(\t\t\telse\n) Tj
ET

endstream
endobj
369 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [370 0 R ] /Parent 2 0 R >>
endobj
370 0 obj 
<</Length 1182 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/dialog.cpp) Tj
ET
BT
565 822 Td
(122) Tj
ET
BT
15 780 Td
(\t\t\t{\n) Tj
ET
BT
15 769 Td
(\t\t\t\tit++;\n) Tj
ET
BT
15 758 Td
(\t\t\t}\n) Tj
ET
BT
15 747 Td
(\t\t}\n) Tj
ET
BT
15 736 Td
(\t\tstd::cout << "dialogs size: [" << size\(\) << "]\\n";\n) Tj
ET
BT
15 725 Td
(\t}\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(\tDialog* Dialogs::get_dialog_by_id\(DialogId &val\)\n) Tj
ET
BT
15 692 Td
(\t{\n) Tj
ET
BT
15 681 Td
(\t\tfor \(iterator it = begin\(\); it != end\(\); it++\)\n) Tj
ET
BT
15 670 Td
(\t\t{\n) Tj
ET
BT
15 659 Td
(\t\t\tif \(val == \(*it\)->id\(\)\)\n) Tj
ET
BT
15 648 Td
(\t\t\t{\n) Tj
ET
BT
15 637 Td
(\t\t\t\treturn *it;\n) Tj
ET
BT
15 626 Td
(\t\t\t}\n) Tj
ET
BT
15 615 Td
(\t\t}\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\t\treturn 0;\n) Tj
ET
BT
15 582 Td
(\t}\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(\tDialog* Dialogs::operator[] \(DialogId val\)\n) Tj
ET
BT
15 549 Td
(\t{\n) Tj
ET
BT
15 538 Td
(\t\treturn get_dialog_by_id\(val\);\n) Tj
ET
BT
15 527 Td
(\t}\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
372 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [373 0 R ] /Parent 2 0 R >>
endobj
373 0 obj 
<</Length 4658 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(123) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/Element/element.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "Element/element.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(    Element::Element\(\)\n) Tj
ET
BT
15 670 Td
(    : run_\(true\), stateful_\(false\)\n) Tj
ET
BT
15 659 Td
(    {\n) Tj
ET
BT
15 648 Td
(        HeaderFields::init_allowed_fields\(\);\n) Tj
ET
BT
15 637 Td
(        init_allowed_methods\(\);\n) Tj
ET
BT
15 626 Td
(        init_allowed_responses\(\);\n) Tj
ET
BT
15 615 Td
(    }\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(    Element::~Element\(\)\n) Tj
ET
BT
15 582 Td
(    {\n) Tj
ET
BT
15 571 Td
(    }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(    void Element::init_allowed_methods\(\)\n) Tj
ET
BT
15 538 Td
(    {\n) Tj
ET
BT
15 527 Td
(        allowed_methods_.insert\(METHOD_INVITE\);\n) Tj
ET
BT
15 516 Td
(        allowed_methods_.insert\(METHOD_CANCEL\);\n) Tj
ET
BT
15 505 Td
(        allowed_methods_.insert\(METHOD_ACK\);\n) Tj
ET
BT
15 494 Td
(        allowed_methods_.insert\(METHOD_BYE\);\n) Tj
ET
BT
15 483 Td
(        allowed_methods_.insert\(METHOD_REGISTER\);\n) Tj
ET
BT
15 472 Td
(        allowed_methods_.insert\(METHOD_OPTIONS\);\n) Tj
ET
BT
15 461 Td
(        allowed_methods_.insert\(METHOD_SUBSCRIBE\);\n) Tj
ET
BT
15 450 Td
(        allowed_methods_.insert\(METHOD_NOTIFY\);\n) Tj
ET
BT
15 439 Td
(        allowed_methods_.insert\(METHOD_MESSAGE\);\n) Tj
ET
BT
15 428 Td
(        allowed_methods_.insert\(METHOD_INFO\);\n) Tj
ET
BT
15 417 Td
(        allowed_methods_.insert\(METHOD_UPDATE\);\n) Tj
ET
BT
15 406 Td
(        allowed_methods_.insert\(METHOD_REFER\);\n) Tj
ET
BT
15 395 Td
(        allowed_methods_.insert\(METHOD_PRACK\);\n) Tj
ET
BT
15 384 Td
(    }\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(    void Element::init_allowed_responses\(\)\n) Tj
ET
BT
15 351 Td
(    {\n) Tj
ET
BT
15 340 Td
(        allowed_responses_.insert\(SIP_RESPONSE_TRYING\);\n) Tj
ET
BT
15 329 Td
(        allowed_responses_.insert\(SIP_RESPONSE_RINGING\);\n) Tj
ET
BT
15 318 Td
(        allowed_responses_.insert\(SIP_RESPONSE_FORWARDING\);\n) Tj
ET
BT
15 307 Td
(        allowed_responses_.insert\(SIP_RESPONSE_QUEUED\);\n) Tj
ET
BT
15 296 Td
(        allowed_responses_.insert\(SIP_RESPONSE_SESSION_PROGRESS\);\n) Tj
ET
BT
15 285 Td
(        allowed_responses_.insert\(SIP_RESPONSE_SUCCESSFUL\);\n) Tj
ET
BT
15 274 Td
(        allowed_responses_.insert\(SIP_RESPONSE_ACCEPTED\);\n) Tj
ET
BT
15 263 Td
(        allowed_responses_.insert\(SIP_RESPONSE_MULTI_CHOICES\);\n) Tj
ET
BT
15 252 Td
(        allowed_responses_.insert\(SIP_RESPONSE_MOVE_PERM\);\n) Tj
ET
BT
15 241 Td
(        allowed_responses_.insert\(SIP_RESPONSE_MOVE_TEMP\);\n) Tj
ET
BT
15 230 Td
(        allowed_responses_.insert\(SIP_RESPONSE_USE_PROXY\);\n) Tj
ET
BT
15 219 Td
(        allowed_responses_.insert\(SIP_RESPONSE_ALTER_SERVICE\);\n) Tj
ET
BT
15 208 Td
(        allowed_responses_.insert\(SIP_RESPONSE_BAD_REQUEST\);\n) Tj
ET
BT
15 197 Td
(        allowed_responses_.insert\(SIP_RESPONSE_UNAUTHORIZED\);\n) Tj
ET
BT
15 186 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUIRE_PAYMENT\);\n) Tj
ET
BT
15 175 Td
(        allowed_responses_.insert\(SIP_RESPONSE_FORBIDDEN\);\n) Tj
ET
BT
15 164 Td
(        allowed_responses_.insert\(SIP_RESPONSE_NOT_FOUND\);\n) Tj
ET
BT
15 153 Td
(        allowed_responses_.insert\(SIP_RESPONSE_METHOD_NOT_ALLOWED\);\n) Tj
ET
BT
15 142 Td
(        allowed_responses_.insert\(SIP_RESPONSE_NOT_ACCEPTABLE\);\n) Tj
ET
BT
15 131 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUIRE_PROXY_AUTHENTICATION\);\n) Tj
ET
BT
15 120 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUIRE_REQUEST_TIMEOUT\);\n) Tj
ET
BT
15 109 Td
(        allowed_responses_.insert\(SIP_RESPONSE_RESOURCE_NOT_AVAIL\);\n) Tj
ET
BT
15 98 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUEST_ENTITY_TOO_LARGE\);\n) Tj
ET
BT
15 87 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUEST_URI_TOO_LONG\);\n) Tj
ET
BT
15 76 Td
(        allowed_responses_.insert\(SIP_RESPONSE_UNSUPPORTED_MEDIA_TYPE\);\n) Tj
ET
BT
15 65 Td
(        allowed_responses_.insert\(SIP_RESPONSE_UNSUPPORTED_URI_SCHEME\);\n) Tj
ET
BT
15 54 Td
(        allowed_responses_.insert\(SIP_RESPONSE_BAD_EXTENSION\);\n) Tj
ET
BT
15 43 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUIRE_EXTENSION\);\n) Tj
ET

endstream
endobj
375 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [376 0 R ] /Parent 2 0 R >>
endobj
376 0 obj 
<</Length 4455 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(124) Tj
ET
BT
15 780 Td
(        allowed_responses_.insert\(SIP_RESPONSE_INTERVAL_TOO_BRIEF\);\n) Tj
ET
BT
15 769 Td
(        allowed_responses_.insert\(SIP_RESPONSE_UNAVAIL_TEMP\);\n) Tj
ET
BT
15 758 Td
(        allowed_responses_.insert\(SIP_RESPONSE_CALL_OR_TRANSACTION_NOT_EXIST\);\n) Tj
ET
BT
15 747 Td
(        allowed_responses_.insert\(SIP_RESPONSE_LOOP_DETECTED\);\n) Tj
ET
BT
15 736 Td
(        allowed_responses_.insert\(SIP_RESPONSE_TOO_MANY_HOPS\);\n) Tj
ET
BT
15 725 Td
(        allowed_responses_.insert\(SIP_RESPONSE_ADDRESS_INCOMPLETE\);\n) Tj
ET
BT
15 714 Td
(        allowed_responses_.insert\(SIP_RESPONSE_AMBIGUOUS_URI\);\n) Tj
ET
BT
15 703 Td
(        allowed_responses_.insert\(SIP_RESPONSE_BUSY\);\n) Tj
ET
BT
15 692 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUEST_TERMINATED\);\n) Tj
ET
BT
15 681 Td
(        allowed_responses_.insert\(SIP_RESPONSE_NOT_ACCEPTABLE_HERE\);\n) Tj
ET
BT
15 670 Td
(        allowed_responses_.insert\(SIP_RESPONSE_REQUEST_PENDING\);\n) Tj
ET
BT
15 659 Td
(        allowed_responses_.insert\(SIP_RESPONSE_UNDECIPHERABLE\);\n) Tj
ET
BT
15 648 Td
(        allowed_responses_.insert\(SIP_RESPONSE_SERVER_INTERNAL_ERROR\);\n) Tj
ET
BT
15 637 Td
(        allowed_responses_.insert\(SIP_RESPONSE_FUNC_NOT_IMPLEMENTED\);\n) Tj
ET
BT
15 626 Td
(        allowed_responses_.insert\(SIP_RESPONSE_BAD_GATEWAY\);\n) Tj
ET
BT
15 615 Td
(        allowed_responses_.insert\(SIP_RESPONSE_SERVICE_UNAVAIL\);\n) Tj
ET
BT
15 604 Td
(        allowed_responses_.insert\(SIP_RESPONSE_SERVICE_TIMEOUT\);\n) Tj
ET
BT
15 593 Td
(        allowed_responses_.insert\(SIP_RESPONSE_UNSUPPORTED_VERSION\);\n) Tj
ET
BT
15 582 Td
(        allowed_responses_.insert\(SIP_RESPONSE_MESSAGE_TOO_LARGE\);\n) Tj
ET
BT
15 571 Td
(        allowed_responses_.insert\(SIP_RESPONSE_GLOBAL_BUSY\);\n) Tj
ET
BT
15 560 Td
(        allowed_responses_.insert\(SIP_RESPONSE_CALLEE_DECLINE\);\n) Tj
ET
BT
15 549 Td
(        allowed_responses_.insert\(SIP_RESPONSE_GLOBAL_NOT_EXIST\);\n) Tj
ET
BT
15 538 Td
(        allowed_responses_.insert\(SIP_RESPONSE_GLOBAL_NOT_ACCEPTABLE\);\n) Tj
ET
BT
15 527 Td
(    }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    void Element::send_msg\(RequestMessage &msg\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        udp_.send_buffer\(msg.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 472 Td
(    }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(    void Element::send_msg\(ResponseMessage &msg\)\n) Tj
ET
BT
15 439 Td
(    {\n) Tj
ET
BT
15 428 Td
(        udp_.send_buffer\(msg.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 417 Td
(    }\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(    void Element::echo\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 384 Td
(    {\n) Tj
ET
BT
15 373 Td
(        ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 340 Td
(        rep.ResponseCode\(SIP_RESPONSE_SUCCESSFUL\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        rep.append_userdata\("Echo from Dr.Who"\);\n) Tj
ET
BT
15 307 Td
(        rep.add_content_length\(\);\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        send_msg\(rep\);\n) Tj
ET
BT
15 274 Td
(    }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(    int Element::on_receive_message\(std::string &msg\)\n) Tj
ET
BT
15 241 Td
(    {\n) Tj
ET
BT
15 230 Td
(        int ret;\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        if \(METHOD_INVITE.code\(\) <= \(ret = Message::get_method_from_buffer\(allowed_methods_, msg\)\)\)\n) Tj
ET
BT
15 197 Td
(        {\n) Tj
ET
BT
15 186 Td
(            return on_receive_req\(msg, ret\);\n) Tj
ET
BT
15 175 Td
(        }\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        if \(SIP_RESPONSE_TRYING.code\(\) <= \(ret = Message::get_response_code_from_buffer\(allowed_responses_, msg\)\)\)\n) Tj
ET
BT
15 142 Td
(        {\n) Tj
ET
BT
15 131 Td
(            return on_receive_resp\(msg, ret\);\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(        //TODO throw exception ??\n) Tj
ET
BT
15 98 Td
(        return PROCEDURE_ERROR;\n) Tj
ET
BT
15 87 Td
(    }\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(    void Element::simple_response\(const RespCode &rc, RequestMessage &in_msg\)\n) Tj
ET
BT
15 54 Td
(    {\n) Tj
ET
BT
15 43 Td
(        ResponseMessage rep\(in_msg\);\n) Tj
ET

endstream
endobj
378 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [379 0 R ] /Parent 2 0 R >>
endobj
379 0 obj 
<</Length 3706 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(125) Tj
ET
BT
15 780 Td
(        rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 769 Td
(        rep.ResponseCode\(rc\);\n) Tj
ET
BT
15 758 Td
(    \n) Tj
ET
BT
15 747 Td
(        send_msg\(rep\);\n) Tj
ET
BT
15 736 Td
(    }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(    int Element::on_receive_req\(std::string &msg, const int code\)\n) Tj
ET
BT
15 703 Td
(    {\n) Tj
ET
BT
15 692 Td
(        int ret = PROCEDURE_OK;\n) Tj
ET
BT
15 681 Td
(        RequestMessage in_msg\(msg\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        if \(false /* TODO: pending a request on demand*/\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 626 Td
(            rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 615 Td
(            rep.ResponseCode\(SIP_RESPONSE_REQUEST_TERMINATED\);\n) Tj
ET
BT
15 604 Td
(    \n) Tj
ET
BT
15 593 Td
(            send_msg\(rep\);\n) Tj
ET
BT
15 582 Td
(            return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 571 Td
(        }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        if \(SIP_RESPONSE_UNSUPPORTED_URI_SCHEME.code\(\) == \(ret = in_msg.parse\(\)\)\)\n) Tj
ET
BT
15 538 Td
(        {\n) Tj
ET
BT
15 527 Td
(            simple_response\(SIP_RESPONSE_UNSUPPORTED_URI_SCHEME, in_msg\);\n) Tj
ET
BT
15 516 Td
(            return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 505 Td
(        }\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        if \(in_msg.max_forwards_.size\(\)\)\n) Tj
ET
BT
15 472 Td
(        {\n) Tj
ET
BT
15 461 Td
(            if \(in_msg.max_forwards_.last\(\)->is_zero_forward\(\)\)\n) Tj
ET
BT
15 450 Td
(            {\n) Tj
ET
BT
15 439 Td
(                if \(METHOD_ID_OPTIONS != code\)\n) Tj
ET
BT
15 428 Td
(                {\n) Tj
ET
BT
15 417 Td
(                    simple_response\(SIP_RESPONSE_TOO_MANY_HOPS, in_msg\);\n) Tj
ET
BT
15 406 Td
(                    return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 395 Td
(                }\n) Tj
ET
BT
15 384 Td
(            }\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        // TODO: loop detection\n) Tj
ET
BT
15 340 Td
(        if \(false\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            simple_response\(SIP_RESPONSE_LOOP_DETECTED, in_msg\);\n) Tj
ET
BT
15 307 Td
(            return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        if \(in_msg.proxy_require_.size\(\)\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            std::vector<std::string> tags = in_msg.proxy_require_.last\(\)->misunderstand_tags\(\);\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(            if \(tags.size\(\)\)\n) Tj
ET
BT
15 219 Td
(            {\n) Tj
ET
BT
15 208 Td
(                ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 197 Td
(                rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 186 Td
(                rep.ResponseCode\(SIP_RESPONSE_BAD_EXTENSION\);\n) Tj
ET
BT
15 175 Td
(    \n) Tj
ET
BT
15 164 Td
(                rep.add_unsupported\(\)\n) Tj
ET
BT
15 153 Td
(                ->add_value\(tags\);\n) Tj
ET
BT
15 142 Td
(    \n) Tj
ET
BT
15 131 Td
(                send_msg\(rep\);\n) Tj
ET
BT
15 120 Td
(                return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 109 Td
(            }\n) Tj
ET
BT
15 98 Td
(        }\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        if \(in_msg.proxy_authorization_.size\(\)\)\n) Tj
ET
BT
15 65 Td
(        {\n) Tj
ET
BT
15 54 Td
(            //TODO: inspection NOTE: 96/269\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
381 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [382 0 R ] /Parent 2 0 R >>
endobj
382 0 obj 
<</Length 3595 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(126) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        if \(METHOD_ID_INVITE != code\n) Tj
ET
BT
15 758 Td
(        && METHOD_ID_REGISTER != code\)\n) Tj
ET
BT
15 747 Td
(        {\n) Tj
ET
BT
15 736 Td
(            Dialog dialog\(in_msg\);\n) Tj
ET
BT
15 725 Td
(            if \(dialog_preprocess<RequestMessage>\(dialog, in_msg\)\)\n) Tj
ET
BT
15 714 Td
(                return PROCEDURE_OK;\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        switch \(code\)\n) Tj
ET
BT
15 670 Td
(        {\n) Tj
ET
BT
15 659 Td
(            case METHOD_ID_INVITE:\n) Tj
ET
BT
15 648 Td
(            {\n) Tj
ET
BT
15 637 Td
(                return on_invite_request\(in_msg\);\n) Tj
ET
BT
15 626 Td
(            }\n) Tj
ET
BT
15 615 Td
(            case METHOD_ID_REGISTER:\n) Tj
ET
BT
15 604 Td
(            {\n) Tj
ET
BT
15 593 Td
(                return on_register_request\(in_msg\);\n) Tj
ET
BT
15 582 Td
(            }\n) Tj
ET
BT
15 571 Td
(            case METHOD_ID_CANCEL:\n) Tj
ET
BT
15 560 Td
(            {\n) Tj
ET
BT
15 549 Td
(                return on_cancel_request\(in_msg\);\n) Tj
ET
BT
15 538 Td
(            }\n) Tj
ET
BT
15 527 Td
(            case METHOD_ID_ACK:\n) Tj
ET
BT
15 516 Td
(            {\n) Tj
ET
BT
15 505 Td
(                return on_ack_request\(in_msg\);\n) Tj
ET
BT
15 494 Td
(            }\n) Tj
ET
BT
15 483 Td
(            case METHOD_ID_BYE:\n) Tj
ET
BT
15 472 Td
(            {\n) Tj
ET
BT
15 461 Td
(                return on_bye_request\(in_msg\);\n) Tj
ET
BT
15 450 Td
(            }\n) Tj
ET
BT
15 439 Td
(            case METHOD_ID_OPTIONS:\n) Tj
ET
BT
15 428 Td
(            {\n) Tj
ET
BT
15 417 Td
(                return on_options_request\(in_msg\);\n) Tj
ET
BT
15 406 Td
(            }\n) Tj
ET
BT
15 395 Td
(            case METHOD_ID_SUBSCRIBE:\n) Tj
ET
BT
15 384 Td
(            {\n) Tj
ET
BT
15 373 Td
(                return on_subscribe_request\(in_msg\);\n) Tj
ET
BT
15 362 Td
(            }\n) Tj
ET
BT
15 351 Td
(            case METHOD_ID_NOTIFY:\n) Tj
ET
BT
15 340 Td
(            {\n) Tj
ET
BT
15 329 Td
(                return on_notify_request\(in_msg\);\n) Tj
ET
BT
15 318 Td
(            }\n) Tj
ET
BT
15 307 Td
(            case METHOD_ID_MESSAGE:\n) Tj
ET
BT
15 296 Td
(            {\n) Tj
ET
BT
15 285 Td
(                return on_message_request\(in_msg\);\n) Tj
ET
BT
15 274 Td
(            }\n) Tj
ET
BT
15 263 Td
(            case METHOD_ID_INFO:\n) Tj
ET
BT
15 252 Td
(            {\n) Tj
ET
BT
15 241 Td
(                return on_info_request\(in_msg\);\n) Tj
ET
BT
15 230 Td
(            }\n) Tj
ET
BT
15 219 Td
(            case METHOD_ID_UPDATE:\n) Tj
ET
BT
15 208 Td
(            {\n) Tj
ET
BT
15 197 Td
(                return on_update_request\(in_msg\);\n) Tj
ET
BT
15 186 Td
(            }\n) Tj
ET
BT
15 175 Td
(            case METHOD_ID_REFER:\n) Tj
ET
BT
15 164 Td
(            {\n) Tj
ET
BT
15 153 Td
(                return on_refer_request\(in_msg\);\n) Tj
ET
BT
15 142 Td
(            }\n) Tj
ET
BT
15 131 Td
(            case METHOD_ID_PRACK:\n) Tj
ET
BT
15 120 Td
(            {\n) Tj
ET
BT
15 109 Td
(                return on_prack_request\(in_msg\);\n) Tj
ET
BT
15 98 Td
(            }\n) Tj
ET
BT
15 87 Td
(            default:\n) Tj
ET
BT
15 76 Td
(            {\n) Tj
ET
BT
15 65 Td
(                std::cerr << "Unexpected request: " << code << '\\n';\n) Tj
ET
BT
15 54 Td
(            }\n) Tj
ET
BT
15 43 Td
(        }\n) Tj
ET

endstream
endobj
384 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [385 0 R ] /Parent 2 0 R >>
endobj
385 0 obj 
<</Length 3508 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(127) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        return ret;\n) Tj
ET
BT
15 758 Td
(    }\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(    int Element::on_receive_resp\(std::string &msg, const int code\)\n) Tj
ET
BT
15 725 Td
(    {\n) Tj
ET
BT
15 714 Td
(        ResponseMessage in_msg\(msg\);\n) Tj
ET
BT
15 703 Td
(        in_msg.parse\(\);\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        Dialog dialog\(in_msg\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        if \(in_msg.is_resp2invite\(\)\)\n) Tj
ET
BT
15 648 Td
(        {\n) Tj
ET
BT
15 637 Td
(            if \(in_msg.is_1xx_resp\(\)\)\n) Tj
ET
BT
15 626 Td
(            {\n) Tj
ET
BT
15 615 Td
(                dialogs_.create_dialog\(dialog\);\n) Tj
ET
BT
15 604 Td
(            }\n) Tj
ET
BT
15 593 Td
(            else if \(in_msg.is_2xx_resp\(\)\)\n) Tj
ET
BT
15 582 Td
(            {\n) Tj
ET
BT
15 571 Td
(                dialogs_[dialog.id\(\)]->is_confirmed\(true\);\n) Tj
ET
BT
15 560 Td
(    \n) Tj
ET
BT
15 549 Td
(                AckMessage ack\(in_msg\);\n) Tj
ET
BT
15 538 Td
(                ack.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 527 Td
(                ack.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(                send_msg\(ack\);\n) Tj
ET
BT
15 494 Td
(            }\n) Tj
ET
BT
15 483 Td
(            else\n) Tj
ET
BT
15 472 Td
(            {\n) Tj
ET
BT
15 461 Td
(                bye_request\(\);\n) Tj
ET
BT
15 450 Td
(                // TODO: invite req failed feedback\n) Tj
ET
BT
15 439 Td
(//                dialogs_.cancel_dialog\(dialog.id\(\)\);\n) Tj
ET
BT
15 428 Td
(                std::cerr << "Unable to establish session due to \\n[\\n"\n) Tj
ET
BT
15 417 Td
(                        << in_msg << "]\\n";\n) Tj
ET
BT
15 406 Td
(            }\n) Tj
ET
BT
15 395 Td
(        }\n) Tj
ET
BT
15 384 Td
(        else if \(in_msg.is_resp2register\(\)\)\n) Tj
ET
BT
15 373 Td
(        {\n) Tj
ET
BT
15 362 Td
(\t\t\tswitch \(code\)\n) Tj
ET
BT
15 351 Td
(\t\t\t{\n) Tj
ET
BT
15 340 Td
(\t\t\t\tdefault:; //TODO for each code\n) Tj
ET
BT
15 329 Td
(\t\t\t}\n) Tj
ET
BT
15 318 Td
(\t\t}\n) Tj
ET
BT
15 307 Td
(//        else if \(\(ret = dialog_preprocess<ResponseMessage>\(dialog, in_msg\)\)\)\n) Tj
ET
BT
15 296 Td
(//        {\n) Tj
ET
BT
15 285 Td
(//            return ret;\n) Tj
ET
BT
15 274 Td
(//        }\n) Tj
ET
BT
15 263 Td
(        // TODO: else\n) Tj
ET
BT
15 252 Td
(        if \(dialogs_[dialog.id\(\)]\)\n) Tj
ET
BT
15 241 Td
(        {\n) Tj
ET
BT
15 230 Td
(            switch \(code\)\n) Tj
ET
BT
15 219 Td
(            {\n) Tj
ET
BT
15 208 Td
(                case 408:\n) Tj
ET
BT
15 197 Td
(                case 481:\n) Tj
ET
BT
15 186 Td
(                {\n) Tj
ET
BT
15 175 Td
(                    std::cout << "Receive response: " << code << ", cancelling dialog\\n";\n) Tj
ET
BT
15 164 Td
(                    dialogs_.cancel_dialog\(dialog.id\(\)\);\n) Tj
ET
BT
15 153 Td
(                    return MESSAGE_PROCESSED;\n) Tj
ET
BT
15 142 Td
(                }\n) Tj
ET
BT
15 131 Td
(                default:;\n) Tj
ET
BT
15 120 Td
(            }\n) Tj
ET
BT
15 109 Td
(        }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 76 Td
(    }\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(    int Element::fetch_msg\(\)\n) Tj
ET
BT
15 43 Td
(    {\n) Tj
ET

endstream
endobj
387 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [388 0 R ] /Parent 2 0 R >>
endobj
388 0 obj 
<</Length 3492 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(128) Tj
ET
BT
15 780 Td
(        if \(0 > udp_.recv_buffer\(0\)\)\n) Tj
ET
BT
15 769 Td
(            return PROCEDURE_ERROR;\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(        std::cout << "peer: <" << udp_.Addr\(\) << ":" << udp_.Port\(\) << ">\\n";\n) Tj
ET
BT
15 736 Td
(        std::string msg\(udp_.Message\(\)\);\n) Tj
ET
BT
15 725 Td
(        udp_.clear_msg\(\);\n) Tj
ET
BT
15 714 Td
(        on_receive_message\(msg\);\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 681 Td
(    }\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(    int Element::start\(\)\n) Tj
ET
BT
15 648 Td
(    {\n) Tj
ET
BT
15 637 Td
(        try\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(            while \(run_\)\n) Tj
ET
BT
15 604 Td
(            {\n) Tj
ET
BT
15 593 Td
(                if \(0 > udp_.recv_buffer\(0\)\) continue;\n) Tj
ET
BT
15 582 Td
(                // TODO: log peer\n) Tj
ET
BT
15 571 Td
(                std::cout << "peer: <" << udp_.Addr\(\) << ":" << udp_.Port\(\) << ">\\n";\n) Tj
ET
BT
15 560 Td
(                std::string msg\(udp_.Message\(\)\);\n) Tj
ET
BT
15 549 Td
(                udp_.clear_msg\(\);\n) Tj
ET
BT
15 538 Td
(                on_receive_message\(msg\);\n) Tj
ET
BT
15 527 Td
(            }\n) Tj
ET
BT
15 516 Td
(        }\n) Tj
ET
BT
15 505 Td
(        catch \(std::exception e\)\n) Tj
ET
BT
15 494 Td
(        {\n) Tj
ET
BT
15 483 Td
(            std::cout << "exception: " << e.what\(\) << '\\n';\n) Tj
ET
BT
15 472 Td
(            // TODO: log it\n) Tj
ET
BT
15 461 Td
(        }\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 428 Td
(    }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(    int Element::invite_request\(\)\n) Tj
ET
BT
15 395 Td
(    {\n) Tj
ET
BT
15 384 Td
(        InviteMessage req;\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 351 Td
(        req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(        req.add_from\(\)\n) Tj
ET
BT
15 318 Td
(        ->add_name\("zex"\)\n) Tj
ET
BT
15 307 Td
(        .add_uri\("sip:zex@"+udp_.SelfAddr\(\)\)\n) Tj
ET
BT
15 296 Td
(        .add_param\("tag", "293!hsj@df"\);\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        req.add_to\(\)\n) Tj
ET
BT
15 263 Td
(        ->add_name\("\\"Big Boss\\""\)\n) Tj
ET
BT
15 252 Td
(        .add_uri\("sip:bigboss@paris.agg.oo"\);\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(        req.add_cseq\(\)\n) Tj
ET
BT
15 219 Td
(        ->cseq\("1"\)\n) Tj
ET
BT
15 208 Td
(        .method\(req.Method\(\)\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(        req.add_via\(\)\n) Tj
ET
BT
15 175 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 164 Td
(        .add_sentby\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        req.add_call_id\(\)\n) Tj
ET
BT
15 131 Td
(        ->id\("sundo@1311bili"\);\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        if \(false /*TODO: is_sips\(req.req_line_.request_uri_\) */\)\n) Tj
ET
BT
15 98 Td
(        {\n) Tj
ET
BT
15 87 Td
(            req.add_contact\(\)\n) Tj
ET
BT
15 76 Td
(            ->add_uri\("sips:zex@"+udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 65 Td
(        }\n) Tj
ET
BT
15 54 Td
(        else\n) Tj
ET
BT
15 43 Td
(        {\n) Tj
ET

endstream
endobj
390 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [391 0 R ] /Parent 2 0 R >>
endobj
391 0 obj 
<</Length 3344 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(129) Tj
ET
BT
15 780 Td
(            req.add_contact\(\)\n) Tj
ET
BT
15 769 Td
(            ->add_uri\("sip:zex@"+udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 758 Td
(        }\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        // TODO: check for re-invite\n) Tj
ET
BT
15 725 Td
(        if \(!dialogs_.empty\(\)\)\n) Tj
ET
BT
15 714 Td
(        {\n) Tj
ET
BT
15 703 Td
(        }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 670 Td
(        ivt_.state\(T_FSM_CALLING\);\n) Tj
ET
BT
15 659 Td
(//        msgq_.push\(req.Msg\(\)\);\n) Tj
ET
BT
15 648 Td
(        // TODO: 64*T1 start\n) Tj
ET
BT
15 637 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 626 Td
(    }\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(    int Element::register_request\(\)\n) Tj
ET
BT
15 593 Td
(    {\n) Tj
ET
BT
15 582 Td
(        RegisterMessage req;\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 549 Td
(        req.RequestURI\("sip:nick@uuac.com"\);\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        req.add_to\(\)\n) Tj
ET
BT
15 516 Td
(        ->add_uri\(udp_.SelfAddr\(\)\)\n) Tj
ET
BT
15 505 Td
(        .add_name\("ook"\);\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(        req.add_from\(\)\n) Tj
ET
BT
15 472 Td
(        ->add_uri\(udp_.SelfAddr\(\)\)\n) Tj
ET
BT
15 461 Td
(        .add_name\("ook"\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        req.add_call_id\(\)\n) Tj
ET
BT
15 428 Td
(        ->id\("987kk"\);\n) Tj
ET
BT
15 417 Td
(        \n) Tj
ET
BT
15 406 Td
(        req.add_cseq\(\)\n) Tj
ET
BT
15 395 Td
(        ->cseq\("1"\)\n) Tj
ET
BT
15 384 Td
(        .method\(req.Method\(\)\);\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        req.add_contact\(\)\n) Tj
ET
BT
15 351 Td
(        ->add_uri\("tel:+1-972-555-2222"\);\n) Tj
ET
BT
15 340 Td
(        //->add_uri\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        req.add_route\(\)\n) Tj
ET
BT
15 307 Td
(        ->add_uri\("129.99.0.32"\);\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        req.add_via\(\)\n) Tj
ET
BT
15 274 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 263 Td
(        .add_sentby\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 208 Td
(    }\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(    int Element::bye_request\(\)\n) Tj
ET
BT
15 175 Td
(    {\n) Tj
ET
BT
15 164 Td
(        if \(dialogs_.empty\(\)\)\n) Tj
ET
BT
15 153 Td
(            return PROCEDURE_OK;\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        ByeMessage req;\n) Tj
ET
BT
15 120 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        req.add_to\(\)\n) Tj
ET
BT
15 87 Td
(        ->add_name\("Big Boss\\""\)\n) Tj
ET
BT
15 76 Td
(        .add_uri\(dialogs_.last\(\)->remote_uri\(\)\);\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(        if \(dialogs_.last\(\)->id\(\).remote_tag\(\).size\(\)\)\n) Tj
ET
BT
15 43 Td
(            req.to_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).remote_tag\(\)\);\n) Tj
ET

endstream
endobj
393 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [394 0 R ] /Parent 2 0 R >>
endobj
394 0 obj 
<</Length 4051 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(130) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(        req.add_from\(\)\n) Tj
ET
BT
15 758 Td
(        ->add_name\("zex"\)\n) Tj
ET
BT
15 747 Td
(        .add_uri\(dialogs_.last\(\)->local_uri\(\)\);\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(        if \(dialogs_.last\(\)->id\(\).local_tag\(\).size\(\)\)\n) Tj
ET
BT
15 714 Td
(            req.from_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).local_tag\(\)\);\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        req.add_call_id\(\)\n) Tj
ET
BT
15 681 Td
(        ->id\(dialogs_.last\(\)->id\(\).call_id\(\).id\(\)\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        std::string seq;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(        if \(!dialogs_.last\(\)->local_seq\(\).cseq\(\).empty\(\)\)\n) Tj
ET
BT
15 626 Td
(        {\n) Tj
ET
BT
15 615 Td
(            dialogs_.last\(\)->local_seq\(\).inc_seq\(\);\n) Tj
ET
BT
15 604 Td
(            seq = dialogs_.last\(\)->local_seq\(\).cseq\(\);\n) Tj
ET
BT
15 593 Td
(        }\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(        if \(seq.empty\(\)\)\n) Tj
ET
BT
15 560 Td
(        {\n) Tj
ET
BT
15 549 Td
(            seq = "1"; // TODO: choose a seq, 32bits\n) Tj
ET
BT
15 538 Td
(        }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(        req.add_cseq\(\)\n) Tj
ET
BT
15 505 Td
(        ->cseq\(seq\)\n) Tj
ET
BT
15 494 Td
(        .method\(req.Method\(\)\);\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(        if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 461 Td
(            req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 428 Td
(        {\n) Tj
ET
BT
15 417 Td
(            if \(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->has_param\("lr"\)\)\n) Tj
ET
BT
15 406 Td
(            {\n) Tj
ET
BT
15 395 Td
(//                    if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 384 Td
(                req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(                req.add_route\(\);\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(                if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 329 Td
(                {\n) Tj
ET
BT
15 318 Td
(                    req.route_.last\(\)->cons_ = dialogs_.last\(\)->routes\(\).last\(\)->cons_;\n) Tj
ET
BT
15 307 Td
(                }\n) Tj
ET
BT
15 296 Td
(            }\n) Tj
ET
BT
15 285 Td
(            else\n) Tj
ET
BT
15 274 Td
(            {\n) Tj
ET
BT
15 263 Td
(                req.RequestURI\(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(                req.add_route\(\);\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(                ContactList::iterator from = dialogs_.last\(\)->routes\(\).last\(\)->cons_.begin\(\);\n) Tj
ET
BT
15 208 Td
(                from++;\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(                req.route_.last\(\)->cons_.append\(from, dialogs_.last\(\)->routes\(\).last\(\)->cons_.end\(\)\);\n) Tj
ET
BT
15 175 Td
(                req.route_.last\(\)->cons_.append\(dialogs_.last\(\)->remote_target\(\)\);\n) Tj
ET
BT
15 164 Td
(            }\n) Tj
ET
BT
15 153 Td
(        }\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        req.add_via\(\)\n) Tj
ET
BT
15 120 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 109 Td
(        .add_sentby\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        if \(false /* TODO: is_sips\(req.req_line_.request_uri_\) */\n) Tj
ET
BT
15 65 Td
(        || false /* TODO: is_sips\(req.req_line_.request_uri_\) */\)\n) Tj
ET
BT
15 54 Td
(        {\n) Tj
ET
BT
15 43 Td
(            req.add_contact\(\)->add_uri\("sips:utoc@ir.cx"\);\n) Tj
ET

endstream
endobj
396 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [397 0 R ] /Parent 2 0 R >>
endobj
397 0 obj 
<</Length 3551 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(131) Tj
ET
BT
15 780 Td
(        }\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 747 Td
(//        msgq_.push\(req.Msg\(\)\);\n) Tj
ET
BT
15 736 Td
(//---------------------------------------------------------------\n) Tj
ET
BT
15 725 Td
(        dialogs_.cancel_dialog\(dialogs_.last\(\)->id\(\)\);\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 692 Td
(    }\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(    int Element::cancel_request\(\)\n) Tj
ET
BT
15 659 Td
(    {\n) Tj
ET
BT
15 648 Td
(        CancelMessage req;\n) Tj
ET
BT
15 637 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(        if \(false /* TODO: 1xx resp not yet received */\)\n) Tj
ET
BT
15 604 Td
(        {    /* wait until 1xx resp received then send */\n) Tj
ET
BT
15 593 Td
(            return PROCEDURE_ERROR;\n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 549 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(    int Element::update_request\(\)\n) Tj
ET
BT
15 505 Td
(    {\n) Tj
ET
BT
15 494 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 483 Td
(    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    int Element::info_request\(\)\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 428 Td
(    }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(    int Element::ack_request\(\)\n) Tj
ET
BT
15 395 Td
(    {\n) Tj
ET
BT
15 384 Td
(        AckMessage req;\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        if \(dialogs_.size\(\)\)\n) Tj
ET
BT
15 329 Td
(        {\n) Tj
ET
BT
15 318 Td
(            req.add_to\(\)\n) Tj
ET
BT
15 307 Td
(            ->add_name\("Big Boss\\""\)\n) Tj
ET
BT
15 296 Td
(            .add_uri\(dialogs_.last\(\)->remote_uri\(\)\);\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(            if \(dialogs_.last\(\)->id\(\).remote_tag\(\).size\(\)\)\n) Tj
ET
BT
15 263 Td
(                req.to_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).remote_tag\(\)\);\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(            req.add_from\(\)\n) Tj
ET
BT
15 230 Td
(            ->add_name\("zex"\)\n) Tj
ET
BT
15 219 Td
(            .add_uri\(dialogs_.last\(\)->local_uri\(\)\);\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(            if \(dialogs_.last\(\)->id\(\).local_tag\(\).size\(\)\)\n) Tj
ET
BT
15 186 Td
(                req.from_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).local_tag\(\)\);\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(            req.add_call_id\(\)\n) Tj
ET
BT
15 153 Td
(            ->id\(dialogs_.last\(\)->id\(\).call_id\(\).id\(\)\);\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(            std::string seq;\n) Tj
ET
BT
15 120 Td
(    \n) Tj
ET
BT
15 109 Td
(            if \(!dialogs_.last\(\)->local_seq\(\).cseq\(\).empty\(\)\)\n) Tj
ET
BT
15 98 Td
(            {\n) Tj
ET
BT
15 87 Td
(                dialogs_.last\(\)->local_seq\(\).inc_seq\(\);\n) Tj
ET
BT
15 76 Td
(                seq = dialogs_.last\(\)->local_seq\(\).cseq\(\);\n) Tj
ET
BT
15 65 Td
(            }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(            if \(seq.empty\(\)\)\n) Tj
ET

endstream
endobj
399 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [400 0 R ] /Parent 2 0 R >>
endobj
400 0 obj 
<</Length 3945 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(132) Tj
ET
BT
15 780 Td
(            {\n) Tj
ET
BT
15 769 Td
(                seq = "1"; // TODO: choose a seq, 32bits\n) Tj
ET
BT
15 758 Td
(            }\n) Tj
ET
BT
15 747 Td
(    \n) Tj
ET
BT
15 736 Td
(            req.add_cseq\(\)\n) Tj
ET
BT
15 725 Td
(            ->cseq\(seq\)\n) Tj
ET
BT
15 714 Td
(            .method\(req.Method\(\)\);\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(            if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 681 Td
(                req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(            if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 648 Td
(            {\n) Tj
ET
BT
15 637 Td
(                if \(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->has_param\("lr"\)\)\n) Tj
ET
BT
15 626 Td
(                {\n) Tj
ET
BT
15 615 Td
(//                    if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 604 Td
(                    req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(                    req.add_route\(\);\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(                    if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 549 Td
(                    {\n) Tj
ET
BT
15 538 Td
(                        req.route_.last\(\)->cons_ = dialogs_.last\(\)->routes\(\).last\(\)->cons_;\n) Tj
ET
BT
15 527 Td
(                    }\n) Tj
ET
BT
15 516 Td
(                }\n) Tj
ET
BT
15 505 Td
(                else\n) Tj
ET
BT
15 494 Td
(                {\n) Tj
ET
BT
15 483 Td
(                    req.RequestURI\(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(                    req.add_route\(\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(                    ContactList::iterator from = dialogs_.last\(\)->routes\(\).last\(\)->cons_.begin\(\);\n) Tj
ET
BT
15 428 Td
(                    from++;\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(                    req.route_.last\(\)->cons_.append\(from, dialogs_.last\(\)->routes\(\).last\(\)->cons_.end\(\)\);\n) Tj
ET
BT
15 395 Td
(                    req.route_.last\(\)->cons_.append\(dialogs_.last\(\)->remote_target\(\)\);\n) Tj
ET
BT
15 384 Td
(                }\n) Tj
ET
BT
15 373 Td
(            }\n) Tj
ET
BT
15 362 Td
(        }\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        req.add_via\(\)\n) Tj
ET
BT
15 329 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 318 Td
(        .add_sentby\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        if \(false /*is_sips\(req.req_line_.request_uri_\) */\n) Tj
ET
BT
15 274 Td
(        || false /*is_sips\(req.req_line_.request_uri_\) */\)\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            req.add_contact\(\)->add_uri\("sips:utoc@ir.cx"\);\n) Tj
ET
BT
15 241 Td
(        }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 208 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 197 Td
(    }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(    int Element::message_request\(\)\n) Tj
ET
BT
15 164 Td
(    {\n) Tj
ET
BT
15 153 Td
(        MessageMessage req;\n) Tj
ET
BT
15 142 Td
(\n) Tj
ET
BT
15 131 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 120 Td
(        req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        if \(dialogs_.size\(\)\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            req.add_to\(\)\n) Tj
ET
BT
15 65 Td
(            ->add_name\("Big Boss\\""\)\n) Tj
ET
BT
15 54 Td
(            .add_uri\(dialogs_.last\(\)->remote_uri\(\)\);\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
402 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [403 0 R ] /Parent 2 0 R >>
endobj
403 0 obj 
<</Length 4258 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(133) Tj
ET
BT
15 780 Td
(            if \(dialogs_.last\(\)->id\(\).remote_tag\(\).size\(\)\)\n) Tj
ET
BT
15 769 Td
(                req.to_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).remote_tag\(\)\);\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(            req.add_from\(\)\n) Tj
ET
BT
15 736 Td
(            ->add_name\("zex"\)\n) Tj
ET
BT
15 725 Td
(            .add_uri\(dialogs_.last\(\)->local_uri\(\)\);\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(            if \(dialogs_.last\(\)->id\(\).local_tag\(\).size\(\)\)\n) Tj
ET
BT
15 692 Td
(                req.from_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).local_tag\(\)\);\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(            req.add_call_id\(\)\n) Tj
ET
BT
15 659 Td
(            ->id\(dialogs_.last\(\)->id\(\).call_id\(\).id\(\)\);\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(            std::string seq;\n) Tj
ET
BT
15 626 Td
(    \n) Tj
ET
BT
15 615 Td
(            if \(!dialogs_.last\(\)->local_seq\(\).cseq\(\).empty\(\)\)\n) Tj
ET
BT
15 604 Td
(            {\n) Tj
ET
BT
15 593 Td
(                dialogs_.last\(\)->local_seq\(\).inc_seq\(\);\n) Tj
ET
BT
15 582 Td
(                seq = dialogs_.last\(\)->local_seq\(\).cseq\(\);\n) Tj
ET
BT
15 571 Td
(            }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(            if \(seq.empty\(\)\)\n) Tj
ET
BT
15 538 Td
(            {\n) Tj
ET
BT
15 527 Td
(                seq = "1"; // TODO: choose a seq, 32bits\n) Tj
ET
BT
15 516 Td
(            }\n) Tj
ET
BT
15 505 Td
(    \n) Tj
ET
BT
15 494 Td
(            req.add_cseq\(\)\n) Tj
ET
BT
15 483 Td
(            ->cseq\(seq\)\n) Tj
ET
BT
15 472 Td
(            .method\(req.Method\(\)\);\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(            if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 439 Td
(                req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(            if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 406 Td
(            {\n) Tj
ET
BT
15 395 Td
(                if \(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->has_param\("lr"\)\)\n) Tj
ET
BT
15 384 Td
(                {\n) Tj
ET
BT
15 373 Td
(//                    if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 362 Td
(                    req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(                    req.add_route\(\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(                    if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 307 Td
(                    {\n) Tj
ET
BT
15 296 Td
(                        req.route_.last\(\)->cons_ = dialogs_.last\(\)->routes\(\).last\(\)->cons_;\n) Tj
ET
BT
15 285 Td
(                    }\n) Tj
ET
BT
15 274 Td
(                }\n) Tj
ET
BT
15 263 Td
(                else\n) Tj
ET
BT
15 252 Td
(                {\n) Tj
ET
BT
15 241 Td
(                    req.RequestURI\(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(                    req.add_route\(\);\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(                    ContactList::iterator from = dialogs_.last\(\)->routes\(\).last\(\)->cons_.begin\(\);\n) Tj
ET
BT
15 186 Td
(                    from++;\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(                    req.route_.last\(\)->cons_.append\(from, dialogs_.last\(\)->routes\(\).last\(\)->cons_.end\(\)\);\n) Tj
ET
BT
15 153 Td
(                    req.route_.last\(\)->cons_.append\(dialogs_.last\(\)->remote_target\(\)\);\n) Tj
ET
BT
15 142 Td
(                }\n) Tj
ET
BT
15 131 Td
(            }\n) Tj
ET
BT
15 120 Td
(        }\n) Tj
ET
BT
15 109 Td
(        else\n) Tj
ET
BT
15 98 Td
(        {\n) Tj
ET
BT
15 87 Td
(            req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(            req.add_to\(\)\n) Tj
ET
BT
15 54 Td
(            ->add_name\("Big Boss\\""\)\n) Tj
ET
BT
15 43 Td
(            .add_uri\(udp_.Addr\(\)\);\n) Tj
ET

endstream
endobj
405 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [406 0 R ] /Parent 2 0 R >>
endobj
406 0 obj 
<</Length 3675 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(134) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(            req.add_from\(\)\n) Tj
ET
BT
15 758 Td
(            ->add_name\("zex"\)\n) Tj
ET
BT
15 747 Td
(            .add_uri\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(            req.add_cseq\(\)\n) Tj
ET
BT
15 714 Td
(            ->cseq\("1"\)\n) Tj
ET
BT
15 703 Td
(            .method\(req.Method\(\)\);\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(            req.add_call_id\(\)\n) Tj
ET
BT
15 670 Td
(            ->id\("54235jd"\); // TODO: generate it\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(        req.add_priority\(\)\n) Tj
ET
BT
15 615 Td
(        ->add_value\("emergency"\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        req.add_content_type\(\)\n) Tj
ET
BT
15 582 Td
(        ->type\("application"\)\n) Tj
ET
BT
15 571 Td
(        .subtype\("pkcs7-mime"\)\n) Tj
ET
BT
15 560 Td
(        .HeaderParam\("smime-type", "enveloped-data"\)\n) Tj
ET
BT
15 549 Td
(        .HeaderParam\("name", "smime.p7m"\);\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(        req.add_www_authenticate\(\)\n) Tj
ET
BT
15 516 Td
(        ->add_value\("Digest"\)\n) Tj
ET
BT
15 505 Td
(        .add_param\("realm", "\\"biloxi.com\\""\)\n) Tj
ET
BT
15 494 Td
(        .add_param\("qop", "\\"auth,auth-int\\""\)\n) Tj
ET
BT
15 483 Td
(        .add_param\("nonce", "\\"d928j8mms349q\\""\)\n) Tj
ET
BT
15 472 Td
(        .add_param\("opaque", "\\"5ccc8372dsvnlk\\""\);\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(        req.add_organization\(\)\n) Tj
ET
BT
15 439 Td
(        ->add_value\("ieee.org blenisa,asirel dlg,"\);\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        req.add_subject\(\)\n) Tj
ET
BT
15 406 Td
(        ->add_value\("wekkwida asdfgnb adun38-vn kdi"\);\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(        req.add_date\(\)\n) Tj
ET
BT
15 373 Td
(        ->add_value\("Sat, 13 Nov 2010 23:29:00 GMT"\);\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(        req.add_accept_language\(\)\n) Tj
ET
BT
15 340 Td
(        ->add_value\("da"\)\n) Tj
ET
BT
15 329 Td
(        .add_param\("q", "0.8"\)\n) Tj
ET
BT
15 318 Td
(        .add_value\("en-gb"\)\n) Tj
ET
BT
15 307 Td
(        .add_param\("q", "0.7"\) \n) Tj
ET
BT
15 296 Td
(        .add_value\("en"\)\n) Tj
ET
BT
15 285 Td
(        .add_param\("q", "0.1"\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        req.add_accept_encoding\(\)\n) Tj
ET
BT
15 252 Td
(        ->add_value\("da"\)\n) Tj
ET
BT
15 241 Td
(        .add_param\("q", "0.8"\)\n) Tj
ET
BT
15 230 Td
(        .add_value\("en-gb"\)\n) Tj
ET
BT
15 219 Td
(        .add_param\("q", "0.2"\); \n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        req.add_content_disposition\(\)\n) Tj
ET
BT
15 186 Td
(        ->add_value\("session"\)\n) Tj
ET
BT
15 175 Td
(        .HeaderParam\("handling", "optional"\);\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        req.add_via\(\)\n) Tj
ET
BT
15 142 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET
BT
15 131 Td
(        .add_sentby\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(        if \(false /*is_sips\(req.req_line_.request_uri_\) */\n) Tj
ET
BT
15 98 Td
(        || false /*is_sips\(req.req_line_.request_uri_\) */\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            req.add_contact\(\)->add_uri\("sips:utoc@ir.cx"\);\n) Tj
ET
BT
15 65 Td
(        }\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        req.append_userdata\("bigo digo reading"\);\n) Tj
ET

endstream
endobj
408 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [409 0 R ] /Parent 2 0 R >>
endobj
409 0 obj 
<</Length 3321 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(135) Tj
ET
BT
15 780 Td
(        req.add_content_length\(\);\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 725 Td
(    }\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(    int Element::subscribe_request\(\)\n) Tj
ET
BT
15 692 Td
(    {\n) Tj
ET
BT
15 681 Td
(        SubscribeMessage req;\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 648 Td
(        req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 615 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 604 Td
(    }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(    int Element::notify_request\(\)\n) Tj
ET
BT
15 571 Td
(    {\n) Tj
ET
BT
15 560 Td
(        NotifyMessage req;\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 527 Td
(        req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 494 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 483 Td
(    }\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(    int Element::refer_request\(\)\n) Tj
ET
BT
15 450 Td
(    {\n) Tj
ET
BT
15 439 Td
(        ReferMessage req;\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 406 Td
(        req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 351 Td
(    }\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(    int Element::options_request\(\)\n) Tj
ET
BT
15 318 Td
(    {\n) Tj
ET
BT
15 307 Td
(        OptionsMessage req;\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        if \(dialogs_.size\(\)\)\n) Tj
ET
BT
15 252 Td
(        {\n) Tj
ET
BT
15 241 Td
(            req.add_to\(\)\n) Tj
ET
BT
15 230 Td
(            ->add_name\("Big Boss\\""\)\n) Tj
ET
BT
15 219 Td
(            .add_uri\(dialogs_.last\(\)->remote_uri\(\)\);\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(            if \(dialogs_.last\(\)->id\(\).remote_tag\(\).size\(\)\)\n) Tj
ET
BT
15 186 Td
(                req.to_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).remote_tag\(\)\);\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(            req.add_from\(\)\n) Tj
ET
BT
15 153 Td
(            ->add_name\("zex"\)\n) Tj
ET
BT
15 142 Td
(            .add_uri\(dialogs_.last\(\)->local_uri\(\)\);\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(            if \(dialogs_.last\(\)->id\(\).local_tag\(\).size\(\)\)\n) Tj
ET
BT
15 109 Td
(                req.from_.last\(\)->add_param\("tag", dialogs_.last\(\)->id\(\).local_tag\(\)\);\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(            req.add_call_id\(\)\n) Tj
ET
BT
15 76 Td
(            ->id\(dialogs_.last\(\)->id\(\).call_id\(\).id\(\)\);\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(            std::string seq;\n) Tj
ET
BT
15 43 Td
(    \n) Tj
ET

endstream
endobj
411 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [412 0 R ] /Parent 2 0 R >>
endobj
412 0 obj 
<</Length 4036 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(136) Tj
ET
BT
15 780 Td
(            if \(!dialogs_.last\(\)->local_seq\(\).cseq\(\).empty\(\)\)\n) Tj
ET
BT
15 769 Td
(            {\n) Tj
ET
BT
15 758 Td
(                dialogs_.last\(\)->local_seq\(\).inc_seq\(\);\n) Tj
ET
BT
15 747 Td
(                seq = dialogs_.last\(\)->local_seq\(\).cseq\(\);\n) Tj
ET
BT
15 736 Td
(            }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(            if \(seq.empty\(\)\)\n) Tj
ET
BT
15 703 Td
(            {\n) Tj
ET
BT
15 692 Td
(                seq = "1"; // TODO: choose a seq, 32bits\n) Tj
ET
BT
15 681 Td
(            }\n) Tj
ET
BT
15 670 Td
(    \n) Tj
ET
BT
15 659 Td
(            req.add_cseq\(\)\n) Tj
ET
BT
15 648 Td
(            ->cseq\(seq\)\n) Tj
ET
BT
15 637 Td
(            .method\(req.Method\(\)\);\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(            if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 604 Td
(                req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(            if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 571 Td
(            {\n) Tj
ET
BT
15 560 Td
(                if \(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->has_param\("lr"\)\)\n) Tj
ET
BT
15 549 Td
(                {\n) Tj
ET
BT
15 538 Td
(//                    if \(dialogs_.last\(\)->remote_target\(\).size\(\)\)\n) Tj
ET
BT
15 527 Td
(                    req.RequestURI\(dialogs_.last\(\)->remote_target\(\).last\(\)->uri\(\)\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(                    req.add_route\(\);\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(                    if \(dialogs_.last\(\)->routes\(\).size\(\)\)\n) Tj
ET
BT
15 472 Td
(                    {\n) Tj
ET
BT
15 461 Td
(                        req.route_.last\(\)->cons_ = dialogs_.last\(\)->routes\(\).last\(\)->cons_;\n) Tj
ET
BT
15 450 Td
(                    }\n) Tj
ET
BT
15 439 Td
(                }\n) Tj
ET
BT
15 428 Td
(                else\n) Tj
ET
BT
15 417 Td
(                {\n) Tj
ET
BT
15 406 Td
(                    req.RequestURI\(dialogs_.last\(\)->routes\(\).last\(\)->cons_.last\(\)->uri\(\)\);\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(                    req.add_route\(\);\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(                    ContactList::iterator from = dialogs_.last\(\)->routes\(\).last\(\)->cons_.begin\(\);\n) Tj
ET
BT
15 351 Td
(                    from++;\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(                    req.route_.last\(\)->cons_.append\(from, dialogs_.last\(\)->routes\(\).last\(\)->cons_.end\(\)\);\n) Tj
ET
BT
15 318 Td
(                    req.route_.last\(\)->cons_.append\(dialogs_.last\(\)->remote_target\(\)\);\n) Tj
ET
BT
15 307 Td
(                }\n) Tj
ET
BT
15 296 Td
(            }\n) Tj
ET
BT
15 285 Td
(        }\n) Tj
ET
BT
15 274 Td
(        else\n) Tj
ET
BT
15 263 Td
(        {\n) Tj
ET
BT
15 252 Td
(            req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(            req.add_to\(\)\n) Tj
ET
BT
15 219 Td
(            ->add_name\("Big Boss\\""\)\n) Tj
ET
BT
15 208 Td
(            .add_uri\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(            req.add_from\(\)\n) Tj
ET
BT
15 175 Td
(            ->add_name\("zex"\)\n) Tj
ET
BT
15 164 Td
(            .add_uri\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(            req.add_cseq\(\)\n) Tj
ET
BT
15 131 Td
(            ->cseq\("1"\)\n) Tj
ET
BT
15 120 Td
(            .method\(req.Method\(\)\);\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(            req.add_call_id\(\)\n) Tj
ET
BT
15 87 Td
(            ->id\("54235jd"\); // TODO: generate it\n) Tj
ET
BT
15 76 Td
(        }\n) Tj
ET
BT
15 65 Td
(\n) Tj
ET
BT
15 54 Td
(        req.add_via\(\)\n) Tj
ET
BT
15 43 Td
(        ->add_proto\(SIP_VERSION_2_0_UDP\)\n) Tj
ET

endstream
endobj
414 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [415 0 R ] /Parent 2 0 R >>
endobj
415 0 obj 
<</Length 3587 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(137) Tj
ET
BT
15 780 Td
(        .add_sentby\(udp_.SelfAddr\(\)\);\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(        if \(false /*is_sips\(req.req_line_.request_uri_\) */\n) Tj
ET
BT
15 747 Td
(        || false /*is_sips\(req.req_line_.request_uri_\) */\)\n) Tj
ET
BT
15 736 Td
(        {\n) Tj
ET
BT
15 725 Td
(            req.add_contact\(\)->add_uri\("sips:utoc@ir.cx"\);\n) Tj
ET
BT
15 714 Td
(        }\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 681 Td
(//        msgq_.push\(req.Msg\(\)\);\n) Tj
ET
BT
15 670 Td
(//---------------------------------------------------------------\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 637 Td
(    }\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    int Element::prack_request\(\)\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        PrackMessage req;\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(        req.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 560 Td
(        req.RequestURI\(udp_.Addr\(\)\);\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        send_msg\(req\);\n) Tj
ET
BT
15 527 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 516 Td
(    }\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(    int Element::on_invite_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 483 Td
(    {\n) Tj
ET
BT
15 472 Td
(        ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 461 Td
(        rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        Dialog dialog\(in_msg\);\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        // check for a re-invite request\n) Tj
ET
BT
15 406 Td
(        if \(dialogs_[dialog.id\(\)] && dialogs_[dialog.id\(\)]->is_confirmed\(\)\)\n) Tj
ET
BT
15 395 Td
(        {\n) Tj
ET
BT
15 384 Td
(            // TODO: update dialog\n) Tj
ET
BT
15 373 Td
(        }\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(        dialogs_.create_dialog\(dialog\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        rep.add_contact\(\)\n) Tj
ET
BT
15 307 Td
(        ->add_uri\("sip:ag@"+udp_.Addr\(\)\);\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(        if \(in_msg.record_route_.size\(\)\)\n) Tj
ET
BT
15 274 Td
(            rep.record_route_ = in_msg.record_route_;\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(        std::cout << "----------\\n" << *dialogs_.last\(\) << "-----------\\n";\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(        rep.ResponseCode\(SIP_RESPONSE_RINGING\);\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(        send_msg\(rep\);\n) Tj
ET
BT
15 197 Td
(        dialogs_[dialog.id\(\)]->still_ringing\(true\);\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        // TODO: timeout here\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(        // dummy --------------->\n) Tj
ET
BT
15 142 Td
(        int i = 7;\n) Tj
ET
BT
15 131 Td
(        PROGRESS_WITH_FEEDBACK\("ringing", i--, sleep\(0.5\); send_msg\(rep\)\)\n) Tj
ET
BT
15 120 Td
(        // dummy ---------------|\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(        if \(false /* TODO: need redirect */\)\n) Tj
ET
BT
15 87 Td
(        {\n) Tj
ET
BT
15 76 Td
(            rep.ResponseCode\(SIP_RESPONSE_MULTI_CHOICES\);\n) Tj
ET
BT
15 65 Td
(//            rep.ResponseCode\(SIP_RESPONSE_MOVE_PERM\);\n) Tj
ET
BT
15 54 Td
(//            rep.ResponseCode\(SIP_RESPONSE_MOVE_TEMP\);\n) Tj
ET
BT
15 43 Td
(            send_msg\(rep\);\n) Tj
ET

endstream
endobj
417 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [418 0 R ] /Parent 2 0 R >>
endobj
418 0 obj 
<</Length 3357 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(138) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(            // TODO: start redirect\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(            return PROCEDURE_OK;\n) Tj
ET
BT
15 736 Td
(        }\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        if \(false /* TODO: get reject signal */\)\n) Tj
ET
BT
15 703 Td
(        {\n) Tj
ET
BT
15 692 Td
(            if \(false /* TODO: no one, really, will take this */\)\n) Tj
ET
BT
15 681 Td
(                rep.ResponseCode\(SIP_RESPONSE_GLOBAL_BUSY\);\n) Tj
ET
BT
15 670 Td
(            else\n) Tj
ET
BT
15 659 Td
(                rep.ResponseCode\(SIP_RESPONSE_BUSY\);\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(            send_msg\(rep\);\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(            return PROCEDURE_OK;\n) Tj
ET
BT
15 604 Td
(        }\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(        rep.ResponseCode\(SIP_RESPONSE_SUCCESSFUL\);\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET
BT
15 560 Td
(        rep.add_allow\(\);\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(        for \(auto &it : allowed_methods_\) \n) Tj
ET
BT
15 527 Td
(            rep.allow_.last\(\)->add_value\(it.name\(\)\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(\n) Tj
ET
BT
15 494 Td
(        rep.add_supported\(\)\n) Tj
ET
BT
15 483 Td
(        ->add_value\("100rel"\);\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(        send_msg\(rep\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(        // TODO: timeout here for ACK\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 406 Td
(    }\n) Tj
ET
BT
15 395 Td
(    \n) Tj
ET
BT
15 384 Td
(    int Element::on_register_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 373 Td
(    {\n) Tj
ET
BT
15 362 Td
(        ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 351 Td
(        rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 340 Td
(        rep.ResponseCode\(SIP_RESPONSE_SUCCESSFUL\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(        /*\n) Tj
ET
BT
15 307 Td
(         * TODO: Expires <= 2^32-1\n) Tj
ET
BT
15 296 Td
(         *     if Expires is illegal, then use 3600\n) Tj
ET
BT
15 285 Td
(         */\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(        /*\n) Tj
ET
BT
15 252 Td
(         * NOTE: A UA SHOULD NOT refresh bindings set up by\n) Tj
ET
BT
15 241 Td
(         * other UAs.\n) Tj
ET
BT
15 230 Td
(         * TODO: add bindings for AOR, check preference priority by `q`\n) Tj
ET
BT
15 219 Td
(         *  sip:xxxxxx\n) Tj
ET
BT
15 208 Td
(         *  tel:xxxxx\n) Tj
ET
BT
15 197 Td
(         *  mailto:xxxxx\n) Tj
ET
BT
15 186 Td
(         */\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(        /*\n) Tj
ET
BT
15 153 Td
(         * TODO: add current bindings list to rep\n) Tj
ET
BT
15 142 Td
(         */\n) Tj
ET
BT
15 131 Td
(        rep.add_date\(\)\n) Tj
ET
BT
15 120 Td
(        ->add_value\(Time::now\(\)\);\n) Tj
ET
BT
15 109 Td
(//        ->add_value\("Sat, 13 Nov 2014 23:29:00 GMT"\);\n) Tj
ET
BT
15 98 Td
(        send_msg\(rep\);\n) Tj
ET
BT
15 87 Td
(\n) Tj
ET
BT
15 76 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 65 Td
(    }\n) Tj
ET
BT
15 54 Td
(    \n) Tj
ET
BT
15 43 Td
(    int Element::on_bye_request\(RequestMessage &in_msg\)\n) Tj
ET

endstream
endobj
420 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [421 0 R ] /Parent 2 0 R >>
endobj
421 0 obj 
<</Length 3362 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(139) Tj
ET
BT
15 780 Td
(    {\n) Tj
ET
BT
15 769 Td
(        ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 758 Td
(    \n) Tj
ET
BT
15 747 Td
(        Dialog dialog\(in_msg\);\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(//        if \(in_msg.record_route_.size\(\)\)\n) Tj
ET
BT
15 714 Td
(//            rep.record_route_ = in_msg.record_route_;\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(        dialogs_.cancel_dialog\(dialog.id\(\)\);\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 659 Td
(    }\n) Tj
ET
BT
15 648 Td
(    \n) Tj
ET
BT
15 637 Td
(    int Element::on_cancel_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 626 Td
(    {\n) Tj
ET
BT
15 615 Td
(        Dialog dialog\(in_msg\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(        if \(dialogs_[dialog.id\(\)]\)\n) Tj
ET
BT
15 582 Td
(        {\n) Tj
ET
BT
15 571 Td
(            if \(dialogs_[dialog.id\(\)]->still_ringing\(\)\)\n) Tj
ET
BT
15 560 Td
(            {\n) Tj
ET
BT
15 549 Td
(                // TODO: cancel it\n) Tj
ET
BT
15 538 Td
(            }\n) Tj
ET
BT
15 527 Td
(            else\n) Tj
ET
BT
15 516 Td
(            {\n) Tj
ET
BT
15 505 Td
(                ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(                rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 472 Td
(                rep.ResponseCode\(SIP_RESPONSE_REQUEST_TERMINATED\);\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(                send_msg\(rep\);\n) Tj
ET
BT
15 439 Td
(            }\n) Tj
ET
BT
15 428 Td
(        }\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 395 Td
(    }\n) Tj
ET
BT
15 384 Td
(    \n) Tj
ET
BT
15 373 Td
(    int Element::on_ack_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 362 Td
(    {\n) Tj
ET
BT
15 351 Td
(        Dialog dialog\(in_msg\);\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(        if \(dialogs_[dialog.id\(\)]\)\n) Tj
ET
BT
15 318 Td
(        {\n) Tj
ET
BT
15 307 Td
(            dialogs_[dialog.id\(\)]->is_confirmed\(true\);\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 263 Td
(    }\n) Tj
ET
BT
15 252 Td
(    \n) Tj
ET
BT
15 241 Td
(    int Element::on_options_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 230 Td
(    {\n) Tj
ET
BT
15 219 Td
(        ResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(        rep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 186 Td
(        rep.ResponseCode\(SIP_RESPONSE_SUCCESSFUL\);\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(        rep.add_accept\(\)\n) Tj
ET
BT
15 153 Td
(        ->add_value\("text", "plain"\)\n) Tj
ET
BT
15 142 Td
(        .add_value\("text", "html"\)\n) Tj
ET
BT
15 131 Td
(        .add_value\("application/sdp"\)\n) Tj
ET
BT
15 120 Td
(        .add_param\("level", "1"\)\n) Tj
ET
BT
15 109 Td
(        .add_value\("multipart/sdp"\);\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(        rep.add_allow\(\);\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(        for \(auto &it : allowed_methods_\) \n) Tj
ET
BT
15 54 Td
(            rep.allow_.last\(\)->add_value\(it.name\(\)\);\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
423 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [424 0 R ] /Parent 2 0 R >>
endobj
424 0 obj 
<</Length 2481 >>
stream
/F1 10 Tf
BT
121.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/element.cpp) Tj
ET
BT
565 822 Td
(140) Tj
ET
BT
15 780 Td
(//        rep.add_error_info\(\)\n) Tj
ET
BT
15 769 Td
(//        ->add_uri\("<sip:mary238@4usnmn4.s49s.lsdj.org>"\)\n) Tj
ET
BT
15 758 Td
(//        .add_uri\("<sip:yem.kkk.ei3m.com>"\);\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(        send_msg\(rep\);\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 703 Td
(    }\n) Tj
ET
BT
15 692 Td
(    \n) Tj
ET
BT
15 681 Td
(    int Element::on_subscribe_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 670 Td
(    {\n) Tj
ET
BT
15 659 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 648 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 637 Td
(    }\n) Tj
ET
BT
15 626 Td
(    \n) Tj
ET
BT
15 615 Td
(    int Element::on_notify_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 582 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 571 Td
(    }\n) Tj
ET
BT
15 560 Td
(    \n) Tj
ET
BT
15 549 Td
(    int Element::on_info_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 538 Td
(    {\n) Tj
ET
BT
15 527 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 516 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 505 Td
(    }\n) Tj
ET
BT
15 494 Td
(    \n) Tj
ET
BT
15 483 Td
(    int Element::on_update_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 472 Td
(    {\n) Tj
ET
BT
15 461 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 450 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 439 Td
(    }\n) Tj
ET
BT
15 428 Td
(    \n) Tj
ET
BT
15 417 Td
(    int Element::on_refer_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 406 Td
(    {\n) Tj
ET
BT
15 395 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 384 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 373 Td
(    }\n) Tj
ET
BT
15 362 Td
(    \n) Tj
ET
BT
15 351 Td
(    int Element::on_message_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 340 Td
(    {\n) Tj
ET
BT
15 329 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 318 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 307 Td
(    }\n) Tj
ET
BT
15 296 Td
(    \n) Tj
ET
BT
15 285 Td
(    int Element::on_prack_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 274 Td
(    {\n) Tj
ET
BT
15 263 Td
(        echo\(in_msg\);\n) Tj
ET
BT
15 252 Td
(        return PROCEDURE_OK;\n) Tj
ET
BT
15 241 Td
(    }\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
426 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [427 0 R ] /Parent 2 0 R >>
endobj
427 0 obj 
<</Length 2810 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/registar.cpp) Tj
ET
BT
565 822 Td
(141) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/Element/registar.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "Element/registar.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(\tRegistar::Registar\(\)\n) Tj
ET
BT
15 670 Td
(\t{\n) Tj
ET
BT
15 659 Td
(\t\t// TODO: configurable\n) Tj
ET
BT
15 648 Td
(\t\tudp_.SelfAddr\(Socket::get_ip_addr\(\)\);\n) Tj
ET
BT
15 637 Td
(\t\tudp_.SelfPort\(5163\);\n) Tj
ET
BT
15 626 Td
(\t\tudp_.setup_server\(\);\n) Tj
ET
BT
15 615 Td
(\t}\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(//\tint Registar::invite_request\(\)\n) Tj
ET
BT
15 582 Td
(//\t{\n) Tj
ET
BT
15 571 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 560 Td
(//\t}\n) Tj
ET
BT
15 549 Td
(//\n) Tj
ET
BT
15 538 Td
(//\tint Registar::register_request\(\)\n) Tj
ET
BT
15 527 Td
(//\t{\n) Tj
ET
BT
15 516 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 505 Td
(//\t}\n) Tj
ET
BT
15 494 Td
(//\n) Tj
ET
BT
15 483 Td
(//\tint Registar::bye_request\(\)\n) Tj
ET
BT
15 472 Td
(//\t{\n) Tj
ET
BT
15 461 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 450 Td
(//\t}\n) Tj
ET
BT
15 439 Td
(//\n) Tj
ET
BT
15 428 Td
(//\tint Registar::cancel_request\(\)\n) Tj
ET
BT
15 417 Td
(//\t{\n) Tj
ET
BT
15 406 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 395 Td
(//\t}\n) Tj
ET
BT
15 384 Td
(//\n) Tj
ET
BT
15 373 Td
(//\tint Registar::update_request\(\)\n) Tj
ET
BT
15 362 Td
(//\t{\n) Tj
ET
BT
15 351 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 340 Td
(//\t}\n) Tj
ET
BT
15 329 Td
(//\n) Tj
ET
BT
15 318 Td
(//\tint Registar::info_request\(\)\n) Tj
ET
BT
15 307 Td
(//\t{\n) Tj
ET
BT
15 296 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 285 Td
(//\t}\n) Tj
ET
BT
15 274 Td
(//\n) Tj
ET
BT
15 263 Td
(//\tint Registar::ack_request\(\)\n) Tj
ET
BT
15 252 Td
(//\t{\n) Tj
ET
BT
15 241 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 230 Td
(//\t}\n) Tj
ET
BT
15 219 Td
(//\n) Tj
ET
BT
15 208 Td
(//\tint Registar::message_request\(\)\n) Tj
ET
BT
15 197 Td
(//\t{\n) Tj
ET
BT
15 186 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 175 Td
(//\t}\n) Tj
ET
BT
15 164 Td
(//\n) Tj
ET
BT
15 153 Td
(//\tint Registar::subscribe_request\(\)\n) Tj
ET
BT
15 142 Td
(//\t{\n) Tj
ET
BT
15 131 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 120 Td
(//\t}\n) Tj
ET
BT
15 109 Td
(//\n) Tj
ET
BT
15 98 Td
(//\tint Registar::notify_request\(\)\n) Tj
ET
BT
15 87 Td
(//\t{\n) Tj
ET
BT
15 76 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 65 Td
(//\t}\n) Tj
ET
BT
15 54 Td
(//\n) Tj
ET
BT
15 43 Td
(//\tint Registar::refer_request\(\)\n) Tj
ET

endstream
endobj
429 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [430 0 R ] /Parent 2 0 R >>
endobj
430 0 obj 
<</Length 3618 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/registar.cpp) Tj
ET
BT
565 822 Td
(142) Tj
ET
BT
15 780 Td
(//\t{\n) Tj
ET
BT
15 769 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 758 Td
(//\t}\n) Tj
ET
BT
15 747 Td
(//\n) Tj
ET
BT
15 736 Td
(//\tint Registar::options_request\(\)\n) Tj
ET
BT
15 725 Td
(//\t{\n) Tj
ET
BT
15 714 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 703 Td
(//\t}\n) Tj
ET
BT
15 692 Td
(//\n) Tj
ET
BT
15 681 Td
(//\tint Registar::prack_request\(\)\n) Tj
ET
BT
15 670 Td
(//\t{\n) Tj
ET
BT
15 659 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 648 Td
(//\t}\n) Tj
ET
BT
15 637 Td
(//\n) Tj
ET
BT
15 626 Td
(//\tint Registar::on_invite_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 615 Td
(//\t{\n) Tj
ET
BT
15 604 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 593 Td
(//\t\tResponseMessage rep\(SIP_RESPONSE_TRYING\);\n) Tj
ET
BT
15 582 Td
(//\t\tudp_.send_buffer\(rep.Msg\(\)\);\n) Tj
ET
BT
15 571 Td
(//\n) Tj
ET
BT
15 560 Td
(//\t\tInviteMethod invite\(in_msg\);\n) Tj
ET
BT
15 549 Td
(//\t\tinvite.parse\(\);\n) Tj
ET
BT
15 538 Td
(//\n) Tj
ET
BT
15 527 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 516 Td
(//\t}\n) Tj
ET
BT
15 505 Td
(//\t\n) Tj
ET
BT
15 494 Td
(\tint Registar::on_register_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 483 Td
(\t{\n) Tj
ET
BT
15 472 Td
(\t\tin_msg.parse\(\);\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(\t\tResponseMessage rep\(in_msg\);\n) Tj
ET
BT
15 439 Td
(\t\trep.SipVersion\(SIP_VERSION_2_0\);\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(\t\t// TODO: looking for server, determine whether proxy \(Request-URI\)\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(\t\t// TODO: Check HFRequire for extensions\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(\t\t// TODO: authenticate the UAC, if no auth-mechanism available , check HFFrom address\n) Tj
ET
BT
15 362 Td
(\n) Tj
ET
BT
15 351 Td
(\t\t// TODO: check if the authenticated user is authorized to modfy registrations for AOR.\n) Tj
ET
BT
15 340 Td
(\t\t//\t\tcheck the database where map user names to a list of AOR.\n) Tj
ET
BT
15 329 Td
(\t\t//\t\tif not authorized, reply with 403 response code and quit\n) Tj
ET
BT
15 318 Td
(\t\trep.ResponseCode\(SIP_RESPONSE_FORBIDDEN\);\n) Tj
ET
BT
15 307 Td
(\t\tudp_.send_buffer\(rep.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 296 Td
(\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(\t\t// TODO: get AOR from HFTo.\n) Tj
ET
BT
15 263 Td
(\t\t//\t\tif AOR not valid for domain in Request-URI, reply with 404 response code and quit\n) Tj
ET
BT
15 252 Td
(\t\trep.ResponseCode\(SIP_RESPONSE_NOT_FOUND\);\n) Tj
ET
BT
15 241 Td
(\t\tudp_.send_buffer\(rep.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 230 Td
(\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 219 Td
(\n) Tj
ET
BT
15 208 Td
(\t\t// check HFContact\n) Tj
ET
BT
15 197 Td
(\t\tif \(in_msg.contact_.size\(\)\)\n) Tj
ET
BT
15 186 Td
(\t\t{\n) Tj
ET
BT
15 175 Td
(\t\t\tif \(1 < in_msg.contact_.size\(\)\)\n) Tj
ET
BT
15 164 Td
(\t\t\t{\n) Tj
ET
BT
15 153 Td
(\t\t\t\trep.ResponseCode\(SIP_RESPONSE_BAD_REQUEST\);\n) Tj
ET
BT
15 142 Td
(\t\t\t\tudp_.send_buffer\(rep.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 131 Td
(\t\t\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 120 Td
(\t\t\t}\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(\t\t\tfor \(auto &it : in_msg.contact_.at\(0\)->cons_\)\n) Tj
ET
BT
15 87 Td
(\t\t\t{\n) Tj
ET
BT
15 76 Td
(\t\t\t\tif \(it->uri\(\) == "*"\)\n) Tj
ET
BT
15 65 Td
(\t\t\t\t{\n) Tj
ET
BT
15 54 Td
(\t\t\t\t\tif \(in_msg.expires_.size\(\) && in_msg.expires_.at\(0\)->digit_value_ != "0"\)\n) Tj
ET
BT
15 43 Td
(\t\t\t\t\t{\n) Tj
ET

endstream
endobj
432 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [433 0 R ] /Parent 2 0 R >>
endobj
433 0 obj 
<</Length 3532 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/registar.cpp) Tj
ET
BT
565 822 Td
(143) Tj
ET
BT
15 780 Td
(\t\t\t\t\t\trep.ResponseCode\(SIP_RESPONSE_BAD_REQUEST\);\n) Tj
ET
BT
15 769 Td
(\t\t\t\t\t\tudp_.send_buffer\(rep.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 758 Td
(\t\t\t\t\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 747 Td
(\t\t\t\t\t}\n) Tj
ET
BT
15 736 Td
(\t\t\t\t}\n) Tj
ET
BT
15 725 Td
(\t\t\t}\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(\t\t// TODO: check HFCallId, whether agrees with each binding stored\n) Tj
ET
BT
15 692 Td
(\t\t//\t\tif not, remove the binding\n) Tj
ET
BT
15 681 Td
(\t\t//\t\telse \n) Tj
ET
BT
15 670 Td
(\t\t//\t\t\tif the in_msg.cseq_ > binding.cseq_\n) Tj
ET
BT
15 659 Td
(\t\t//\t\t\telse abort update, request failed\n) Tj
ET
BT
15 648 Td
(\t\t\n) Tj
ET
BT
15 637 Td
(\t\t\tint seconds;\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(\t\t\tstd::string expire = in_msg.contact_.at\(0\)->header_params_.get_value_by_name\("expires"\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\t\t\tif \(expire.empty\(\)\)\n) Tj
ET
BT
15 582 Td
(\t\t\t{\n) Tj
ET
BT
15 571 Td
(\t\t\t\tif \(in_msg.expires_.size\(\)\)\n) Tj
ET
BT
15 560 Td
(\t\t\t\t{\n) Tj
ET
BT
15 549 Td
(\t\t\t\t\texpire = in_msg.expires_.at\(0\)->expire\(\);\n) Tj
ET
BT
15 538 Td
(\t\t\t\t}\n) Tj
ET
BT
15 527 Td
(\t\t\t\telse\n) Tj
ET
BT
15 516 Td
(\t\t\t\t{\n) Tj
ET
BT
15 505 Td
(\t\t\t\t\t// TODO: expire = local expireation\n) Tj
ET
BT
15 494 Td
(\t\t\t\t}\n) Tj
ET
BT
15 483 Td
(\t\t\t}\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(\t\t\tstd::istringstream is\(expire\);\n) Tj
ET
BT
15 450 Td
(\t\t\tis >> seconds;\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(\t\t\tif \(seconds > 0 && seconds < ONE_HOUR/* TODO && expire < local-min-registrar-timeout */\)\n) Tj
ET
BT
15 417 Td
(\t\t\t{\n) Tj
ET
BT
15 406 Td
(\t\t\t\trep.ResponseCode\(SIP_RESPONSE_INTERVAL_TOO_BRIEF\);\n) Tj
ET
BT
15 395 Td
(\t\t\t\trep.add_min_expires\(\)->add_value\("45"\);/* TODO: min-expire value*/\n) Tj
ET
BT
15 384 Td
(\t\t\t\tudp_.send_buffer\(rep.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 373 Td
(\t\t\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 362 Td
(\t\t\t}\n) Tj
ET
BT
15 351 Td
(\t\t}\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(\t\trep.ResponseCode\(SIP_RESPONSE_SUCCESSFUL\);\n) Tj
ET
BT
15 318 Td
(\t\t// TODO: append HFContact in current bindings with expires param\n) Tj
ET
BT
15 307 Td
(\t\t//\t\tappend HFDate\n) Tj
ET
BT
15 296 Td
(\t\tudp_.send_buffer\(rep.create\(\).Msg\(\)\);\n) Tj
ET
BT
15 285 Td
(\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 274 Td
(\t}\n) Tj
ET
BT
15 263 Td
(//\t\n) Tj
ET
BT
15 252 Td
(//\tint Registar::on_bye_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 241 Td
(//\t{\n) Tj
ET
BT
15 230 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 219 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 208 Td
(//\t}\n) Tj
ET
BT
15 197 Td
(//\t\n) Tj
ET
BT
15 186 Td
(//\tint Registar::on_cancel_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 175 Td
(//\t{\n) Tj
ET
BT
15 164 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 153 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 142 Td
(//\t}\n) Tj
ET
BT
15 131 Td
(//\t\n) Tj
ET
BT
15 120 Td
(//\tint Registar::on_ack_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 109 Td
(//\t{\n) Tj
ET
BT
15 98 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 87 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 76 Td
(//\t}\n) Tj
ET
BT
15 65 Td
(//\t\n) Tj
ET
BT
15 54 Td
(//\tint Registar::on_options_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 43 Td
(//\t{\n) Tj
ET

endstream
endobj
435 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [436 0 R ] /Parent 2 0 R >>
endobj
436 0 obj 
<</Length 3298 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/registar.cpp) Tj
ET
BT
565 822 Td
(144) Tj
ET
BT
15 780 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 769 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 758 Td
(//\t}\n) Tj
ET
BT
15 747 Td
(//\t\n) Tj
ET
BT
15 736 Td
(//\tint Registar::on_subscribe_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 725 Td
(//\t{\n) Tj
ET
BT
15 714 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 703 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 692 Td
(//\t}\n) Tj
ET
BT
15 681 Td
(//\t\n) Tj
ET
BT
15 670 Td
(//\tint Registar::on_notify_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 659 Td
(//\t{\n) Tj
ET
BT
15 648 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 637 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 626 Td
(//\t}\n) Tj
ET
BT
15 615 Td
(//\t\n) Tj
ET
BT
15 604 Td
(//\tint Registar::on_info_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 593 Td
(//\t{\n) Tj
ET
BT
15 582 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 571 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 560 Td
(//\t}\n) Tj
ET
BT
15 549 Td
(//\t\n) Tj
ET
BT
15 538 Td
(//\tint Registar::on_update_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 527 Td
(//\t{\n) Tj
ET
BT
15 516 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 505 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 494 Td
(//\t}\n) Tj
ET
BT
15 483 Td
(//\t\n) Tj
ET
BT
15 472 Td
(//\tint Registar::on_refer_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 461 Td
(//\t{\n) Tj
ET
BT
15 450 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 439 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 428 Td
(//\t}\n) Tj
ET
BT
15 417 Td
(//\t\n) Tj
ET
BT
15 406 Td
(//\tint Registar::on_message_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 395 Td
(//\t{\n) Tj
ET
BT
15 384 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 373 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 362 Td
(//\t}\n) Tj
ET
BT
15 351 Td
(//\t\n) Tj
ET
BT
15 340 Td
(//\tint Registar::on_prack_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 329 Td
(//\t{\n) Tj
ET
BT
15 318 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 307 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 296 Td
(//\t}\n) Tj
ET
BT
15 285 Td
(//\n) Tj
ET
BT
15 274 Td
(//\tint Registar::on_response\(Message &in_msg\)\n) Tj
ET
BT
15 263 Td
(//\t{\n) Tj
ET
BT
15 252 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 241 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 230 Td
(//\t}\n) Tj
ET
BT
15 219 Td
(//\n) Tj
ET
BT
15 208 Td
(//\tint Registar::on_rx_req_exception\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 197 Td
(//\t{\n) Tj
ET
BT
15 186 Td
(//\t\t// ---------------------------------------------\n) Tj
ET
BT
15 175 Td
(//\t\tResponseMessage resp_msg = in_msg;\n) Tj
ET
BT
15 164 Td
(//\n) Tj
ET
BT
15 153 Td
(//\t\tresp_msg.RespStatus\(SIP_RESPONSE_METHOD_NOT_ALLOWED\);\n) Tj
ET
BT
15 142 Td
(//\n) Tj
ET
BT
15 131 Td
(//\t\tresp_msg.allow_.append_field\(\);\n) Tj
ET
BT
15 120 Td
(//\n) Tj
ET
BT
15 109 Td
(//\t\tfor \(MethodMapList::iterator it = allowed_methods_.begin\(\); it != allowed_methods_.end\(\); it++\)\n) Tj
ET
BT
15 98 Td
(//\t\t\tresp_msg.allow_.append_value\(it->Name\(\)\);\n) Tj
ET
BT
15 87 Td
(//\n) Tj
ET
BT
15 76 Td
(//\t\t// ---------------------------------------------\n) Tj
ET
BT
15 65 Td
(//\n) Tj
ET
BT
15 54 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 43 Td
(//\t}\n) Tj
ET

endstream
endobj
438 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [439 0 R ] /Parent 2 0 R >>
endobj
439 0 obj 
<</Length 212 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/registar.cpp) Tj
ET
BT
565 822 Td
(145) Tj
ET
BT
15 780 Td
(//\n) Tj
ET
BT
15 769 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
441 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [442 0 R ] /Parent 2 0 R >>
endobj
442 0 obj 
<</Length 980 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/uaclient.cpp) Tj
ET
BT
565 822 Td
(146) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/Element/uaclient.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "Element/uaclient.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(\tUAClient::UAClient\(\)\n) Tj
ET
BT
15 670 Td
(\t{\n) Tj
ET
BT
15 659 Td
(\t\tudp_.SelfAddr\(Socket::get_ip_addr\(\)\);\n) Tj
ET
BT
15 648 Td
(\t\tudp_.SelfPort\(2039\);\n) Tj
ET
BT
15 637 Td
(\t\tudp_.setup_server\(\);\n) Tj
ET
BT
15 626 Td
(\t\tudp_.Addr\(Socket::get_ip_addr\(\)\);\n) Tj
ET
BT
15 615 Td
(\t\tudp_.Port\(1971\);\n) Tj
ET
BT
15 604 Td
(//\t\tudp_.NeedBind\(false\);\n) Tj
ET
BT
15 593 Td
(\t}\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
444 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [445 0 R ] /Parent 2 0 R >>
endobj
445 0 obj 
<</Length 2763 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/proxy.cpp) Tj
ET
BT
565 822 Td
(147) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/Element/proxy.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "Element/proxy.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(\tProxy::Proxy\(\)\n) Tj
ET
BT
15 670 Td
(\t{\n) Tj
ET
BT
15 659 Td
(\t\t// TODO: configurable\n) Tj
ET
BT
15 648 Td
(\t\tudp_.SelfAddr\(Socket::get_ip_addr\(\)\);\n) Tj
ET
BT
15 637 Td
(\t\tudp_.SelfPort\(7831\);\n) Tj
ET
BT
15 626 Td
(\t\tudp_.setup_server\(\);\n) Tj
ET
BT
15 615 Td
(\t}\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(//\tint Proxy::invite_request\(\)\n) Tj
ET
BT
15 582 Td
(//\t{\n) Tj
ET
BT
15 571 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 560 Td
(//\t}\n) Tj
ET
BT
15 549 Td
(//\n) Tj
ET
BT
15 538 Td
(//\tint Proxy::register_request\(\)\n) Tj
ET
BT
15 527 Td
(//\t{\n) Tj
ET
BT
15 516 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 505 Td
(//\t}\n) Tj
ET
BT
15 494 Td
(//\n) Tj
ET
BT
15 483 Td
(//\tint Proxy::bye_request\(\)\n) Tj
ET
BT
15 472 Td
(//\t{\n) Tj
ET
BT
15 461 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 450 Td
(//\t}\n) Tj
ET
BT
15 439 Td
(//\n) Tj
ET
BT
15 428 Td
(//\tint Proxy::cancel_request\(\)\n) Tj
ET
BT
15 417 Td
(//\t{\n) Tj
ET
BT
15 406 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 395 Td
(//\t}\n) Tj
ET
BT
15 384 Td
(//\n) Tj
ET
BT
15 373 Td
(//\tint Proxy::update_request\(\)\n) Tj
ET
BT
15 362 Td
(//\t{\n) Tj
ET
BT
15 351 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 340 Td
(//\t}\n) Tj
ET
BT
15 329 Td
(//\n) Tj
ET
BT
15 318 Td
(//\tint Proxy::info_request\(\)\n) Tj
ET
BT
15 307 Td
(//\t{\n) Tj
ET
BT
15 296 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 285 Td
(//\t}\n) Tj
ET
BT
15 274 Td
(//\n) Tj
ET
BT
15 263 Td
(//\tint Proxy::ack_request\(\)\n) Tj
ET
BT
15 252 Td
(//\t{\n) Tj
ET
BT
15 241 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 230 Td
(//\t}\n) Tj
ET
BT
15 219 Td
(//\n) Tj
ET
BT
15 208 Td
(//\tint Proxy::message_request\(\)\n) Tj
ET
BT
15 197 Td
(//\t{\n) Tj
ET
BT
15 186 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 175 Td
(//\t}\n) Tj
ET
BT
15 164 Td
(//\n) Tj
ET
BT
15 153 Td
(//\tint Proxy::subscribe_request\(\)\n) Tj
ET
BT
15 142 Td
(//\t{\n) Tj
ET
BT
15 131 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 120 Td
(//\t}\n) Tj
ET
BT
15 109 Td
(//\n) Tj
ET
BT
15 98 Td
(//\tint Proxy::notify_request\(\)\n) Tj
ET
BT
15 87 Td
(//\t{\n) Tj
ET
BT
15 76 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 65 Td
(//\t}\n) Tj
ET
BT
15 54 Td
(//\n) Tj
ET
BT
15 43 Td
(//\tint Proxy::refer_request\(\)\n) Tj
ET

endstream
endobj
447 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [448 0 R ] /Parent 2 0 R >>
endobj
448 0 obj 
<</Length 3050 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/proxy.cpp) Tj
ET
BT
565 822 Td
(148) Tj
ET
BT
15 780 Td
(//\t{\n) Tj
ET
BT
15 769 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 758 Td
(//\t}\n) Tj
ET
BT
15 747 Td
(//\n) Tj
ET
BT
15 736 Td
(//\tint Proxy::options_request\(\)\n) Tj
ET
BT
15 725 Td
(//\t{\n) Tj
ET
BT
15 714 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 703 Td
(//\t}\n) Tj
ET
BT
15 692 Td
(//\n) Tj
ET
BT
15 681 Td
(//\tint Proxy::prack_request\(\)\n) Tj
ET
BT
15 670 Td
(//\t{\n) Tj
ET
BT
15 659 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 648 Td
(//\t}\n) Tj
ET
BT
15 637 Td
(//\n) Tj
ET
BT
15 626 Td
(//\tint Proxy::on_invite_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 615 Td
(//\t{\n) Tj
ET
BT
15 604 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 593 Td
(//\t}\n) Tj
ET
BT
15 582 Td
(//\t\n) Tj
ET
BT
15 571 Td
(//\tint Proxy::on_register_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 560 Td
(//\t{\n) Tj
ET
BT
15 549 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 538 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 527 Td
(//\t}\n) Tj
ET
BT
15 516 Td
(//\t\n) Tj
ET
BT
15 505 Td
(//\tint Proxy::on_bye_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 494 Td
(//\t{\n) Tj
ET
BT
15 483 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 472 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 461 Td
(//\t}\n) Tj
ET
BT
15 450 Td
(//\t\n) Tj
ET
BT
15 439 Td
(//\tint Proxy::on_cancel_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 428 Td
(//\t{\n) Tj
ET
BT
15 417 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 406 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 395 Td
(//\t}\n) Tj
ET
BT
15 384 Td
(//\t\n) Tj
ET
BT
15 373 Td
(//\tint Proxy::on_ack_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 362 Td
(//\t{\n) Tj
ET
BT
15 351 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 340 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 329 Td
(//\t}\n) Tj
ET
BT
15 318 Td
(//\t\n) Tj
ET
BT
15 307 Td
(//\tint Proxy::on_options_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 296 Td
(//\t{\n) Tj
ET
BT
15 285 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 274 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 263 Td
(//\t}\n) Tj
ET
BT
15 252 Td
(//\t\n) Tj
ET
BT
15 241 Td
(//\tint Proxy::on_subscribe_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 230 Td
(//\t{\n) Tj
ET
BT
15 219 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 208 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 197 Td
(//\t}\n) Tj
ET
BT
15 186 Td
(//\t\n) Tj
ET
BT
15 175 Td
(//\tint Proxy::on_notify_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 164 Td
(//\t{\n) Tj
ET
BT
15 153 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 142 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 131 Td
(//\t}\n) Tj
ET
BT
15 120 Td
(//\t\n) Tj
ET
BT
15 109 Td
(//\tint Proxy::on_info_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 98 Td
(//\t{\n) Tj
ET
BT
15 87 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 76 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 65 Td
(//\t}\n) Tj
ET
BT
15 54 Td
(//\t\n) Tj
ET
BT
15 43 Td
(//\tint Proxy::on_update_request\(RequestMessage &in_msg\)\n) Tj
ET

endstream
endobj
450 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [451 0 R ] /Parent 2 0 R >>
endobj
451 0 obj 
<</Length 1373 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/proxy.cpp) Tj
ET
BT
565 822 Td
(149) Tj
ET
BT
15 780 Td
(//\t{\n) Tj
ET
BT
15 769 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 758 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 747 Td
(//\t}\n) Tj
ET
BT
15 736 Td
(//\t\n) Tj
ET
BT
15 725 Td
(//\tint Proxy::on_refer_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 714 Td
(//\t{\n) Tj
ET
BT
15 703 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 692 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 681 Td
(//\t}\n) Tj
ET
BT
15 670 Td
(//\t\n) Tj
ET
BT
15 659 Td
(//\tint Proxy::on_message_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 648 Td
(//\t{\n) Tj
ET
BT
15 637 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 626 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 615 Td
(//\t}\n) Tj
ET
BT
15 604 Td
(//\t\n) Tj
ET
BT
15 593 Td
(//\tint Proxy::on_prack_request\(RequestMessage &in_msg\)\n) Tj
ET
BT
15 582 Td
(//\t{\n) Tj
ET
BT
15 571 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 560 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 549 Td
(//\t}\n) Tj
ET
BT
15 538 Td
(//\n) Tj
ET
BT
15 527 Td
(//\tint Proxy::on_response\(Message &in_msg\)\n) Tj
ET
BT
15 516 Td
(//\t{\n) Tj
ET
BT
15 505 Td
(//\t\techo\(in_msg\);\n) Tj
ET
BT
15 494 Td
(//\t\treturn PROCEDURE_OK;\n) Tj
ET
BT
15 483 Td
(//\t}\n) Tj
ET
BT
15 472 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
453 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [454 0 R ] /Parent 2 0 R >>
endobj
454 0 obj 
<</Length 865 >>
stream
/F1 10 Tf
BT
121.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/Element/uaserver.cpp) Tj
ET
BT
565 822 Td
(150) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/Element/uaserver.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "Element/uaserver.h"\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(namespace EasySip\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(\tUAServer::UAServer\(\)\n) Tj
ET
BT
15 670 Td
(\t{\n) Tj
ET
BT
15 659 Td
(\t\t// TODO: configurable\n) Tj
ET
BT
15 648 Td
(\t\tudp_.SelfAddr\(Socket::get_ip_addr\(\)\);\n) Tj
ET
BT
15 637 Td
(\t\tudp_.SelfPort\(1971\);\n) Tj
ET
BT
15 626 Td
(\t\tudp_.setup_server\(\);\n) Tj
ET
BT
15 615 Td
(\t}\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
456 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [457 0 R ] /Parent 2 0 R >>
endobj
457 0 obj 
<</Length 3366 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/socket.cpp) Tj
ET
BT
565 822 Td
(151) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * src/socket.cpp\n) Tj
ET
BT
15 758 Td
( * \n) Tj
ET
BT
15 747 Td
( * Author: Zex <top_zlynch@yahoo.com>\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include "socket.h"\n) Tj
ET
BT
15 714 Td
(#include "buffer.h"\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(// port reuse\n) Tj
ET
BT
15 681 Td
(//unsigned int yes = 1;\n) Tj
ET
BT
15 670 Td
(//setsockopt\(socket, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof\(yes\)\);\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(namespace EasySip\n) Tj
ET
BT
15 637 Td
({\n) Tj
ET
BT
15 626 Td
(    std::string Socket::get_ip_addr\(\)\n) Tj
ET
BT
15 615 Td
(    {\n) Tj
ET
BT
15 604 Td
(        std::string ret;\n) Tj
ET
BT
15 593 Td
(        struct ifaddrs *ifaddrs = NULL, *ifaddr = NULL;\n) Tj
ET
BT
15 582 Td
(        void *tmpAddrPtr = NULL;\n) Tj
ET
BT
15 571 Td
(        int prot, len;\n) Tj
ET
BT
15 560 Td
(    \n) Tj
ET
BT
15 549 Td
(        getifaddrs\(&ifaddrs\);\n) Tj
ET
BT
15 538 Td
(    \n) Tj
ET
BT
15 527 Td
(        for \(ifaddr = ifaddrs; ifaddr; ifaddr = ifaddr->ifa_next\)\n) Tj
ET
BT
15 516 Td
(        {\n) Tj
ET
BT
15 505 Td
(            if \(!ifaddr->ifa_addr\)\n) Tj
ET
BT
15 494 Td
(            {\n) Tj
ET
BT
15 483 Td
(                continue;\n) Tj
ET
BT
15 472 Td
(            }\n) Tj
ET
BT
15 461 Td
(\n) Tj
ET
BT
15 450 Td
(            if \(ifaddr->ifa_addr->sa_family == AF_INET\)\n) Tj
ET
BT
15 439 Td
(            {\n) Tj
ET
BT
15 428 Td
(                tmpAddrPtr = &\(\(struct sockaddr_in *\)ifaddr->ifa_addr\)->sin_addr;\n) Tj
ET
BT
15 417 Td
(                len = INET_ADDRSTRLEN;\n) Tj
ET
BT
15 406 Td
(                prot = AF_INET;\n) Tj
ET
BT
15 395 Td
(            }\n) Tj
ET
BT
15 384 Td
(            else if \(ifaddr->ifa_addr->sa_family == AF_INET6\)\n) Tj
ET
BT
15 373 Td
(            {\n) Tj
ET
BT
15 362 Td
(                tmpAddrPtr = &\(\(struct sockaddr_in6 *\)ifaddr->ifa_addr\)->sin6_addr;\n) Tj
ET
BT
15 351 Td
(                len = INET6_ADDRSTRLEN;\n) Tj
ET
BT
15 340 Td
(                prot = AF_INET6;\n) Tj
ET
BT
15 329 Td
(                break;\n) Tj
ET
BT
15 318 Td
(            }\n) Tj
ET
BT
15 307 Td
(            else\n) Tj
ET
BT
15 296 Td
(            {\n) Tj
ET
BT
15 285 Td
(                continue;\n) Tj
ET
BT
15 274 Td
(            }\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(            Buffer addr_buf\(len\);\n) Tj
ET
BT
15 230 Td
(            inet_ntop\(prot, tmpAddrPtr, addr_buf.data\(\), addr_buf.len\(\)\);\n) Tj
ET
BT
15 219 Td
(            std::cout << "IF: " << ifaddr->ifa_name << " IP: " << addr_buf.data\(\) << '\\n';\n) Tj
ET
BT
15 208 Td
(            ret = addr_buf.data\(\);\n) Tj
ET
BT
15 197 Td
(        }\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(        if \(ifaddrs\)\n) Tj
ET
BT
15 164 Td
(        {\n) Tj
ET
BT
15 153 Td
(            freeifaddrs\(ifaddrs\);\n) Tj
ET
BT
15 142 Td
(        }\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(        return ret;\n) Tj
ET
BT
15 109 Td
(    }\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET
BT
15 87 Td
(    int Socket::set_timeout\(int sec\)\n) Tj
ET
BT
15 76 Td
(    {\n) Tj
ET
BT
15 65 Td
(        int ret;\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(        struct timeval tv;\n) Tj
ET

endstream
endobj
459 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [460 0 R ] /Parent 2 0 R >>
endobj
460 0 obj 
<</Length 3367 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/socket.cpp) Tj
ET
BT
565 822 Td
(152) Tj
ET
BT
15 780 Td
(        tv.tv_sec = sec;\n) Tj
ET
BT
15 769 Td
(        tv.tv_usec = 0;\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(        if \(0 > \(ret = setsockopt\(sk_, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof\(tv\)\)\)\)\n) Tj
ET
BT
15 736 Td
(                std::cerr << "socket: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(        return ret;\n) Tj
ET
BT
15 703 Td
(    }\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(    SocketIp4UDP::SocketIp4UDP\(\)\n) Tj
ET
BT
15 670 Td
(    : SocketIp4\(SOCK_DGRAM\), binded_\(false\), need_bind_\(true\)\n) Tj
ET
BT
15 659 Td
(    {\n) Tj
ET
BT
15 648 Td
(    }\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(    SocketIp4UDP::SocketIp4UDP\(std::string addr, int port\)\n) Tj
ET
BT
15 615 Td
(    : SocketIp4\(SOCK_DGRAM\), binded_\(false\), need_bind_\(true\)\n) Tj
ET
BT
15 604 Td
(    {\n) Tj
ET
BT
15 593 Td
(        SelfAddr\(addr\);\n) Tj
ET
BT
15 582 Td
(        SelfPort\(port\);\n) Tj
ET
BT
15 571 Td
(    }\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(    SocketIp4UDP::~SocketIp4UDP\(\)\n) Tj
ET
BT
15 538 Td
(    {\n) Tj
ET
BT
15 527 Td
(    }\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(    void SocketIp4UDP::send_buffer\(const std::string msg\)\n) Tj
ET
BT
15 494 Td
(    {\n) Tj
ET
BT
15 483 Td
(        sendto\(sk_,  msg.c_str\(\), msg.size\(\), 0,\n) Tj
ET
BT
15 472 Td
(            \(sockaddr*\)&sk_addr_, sizeof\(sk_addr_\)\);\n) Tj
ET
BT
15 461 Td
(    }\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(    int SocketIp4UDP::setup_server\(\)\n) Tj
ET
BT
15 428 Td
(    {\n) Tj
ET
BT
15 417 Td
(        int ret;\n) Tj
ET
BT
15 406 Td
(\n) Tj
ET
BT
15 395 Td
(        if \(!binded_ && need_bind_\)\n) Tj
ET
BT
15 384 Td
(        {\n) Tj
ET
BT
15 373 Td
(            if \(0 > \(ret = bind\(sk_, \(sockaddr*\)&self_sk_addr_, sizeof\(self_sk_addr_\)\)\)\)\n) Tj
ET
BT
15 362 Td
(            {\n) Tj
ET
BT
15 351 Td
(                // TODO: throw exception\n) Tj
ET
BT
15 340 Td
(                std::cerr << "bind: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 329 Td
(                return ret;\n) Tj
ET
BT
15 318 Td
(            }\n) Tj
ET
BT
15 307 Td
(            binded_ = true;\n) Tj
ET
BT
15 296 Td
(        }\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(        return ret;\n) Tj
ET
BT
15 263 Td
(    }\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(    int SocketIp4UDP::recv_buffer\(int selfloop\)\n) Tj
ET
BT
15 230 Td
(    {\n) Tj
ET
BT
15 219 Td
(        int ret;\n) Tj
ET
BT
15 208 Td
(        Buffer buf\(max_rx_\);\n) Tj
ET
BT
15 197 Td
(        socklen_t len = sizeof\(sk_addr_\);\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(//        fd_set r_fds;\n) Tj
ET
BT
15 164 Td
(//        struct timeval tv;\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(        do\n) Tj
ET
BT
15 131 Td
(        {\n) Tj
ET
BT
15 120 Td
(//            FD_ZERO\(&r_fds\);\n) Tj
ET
BT
15 109 Td
(//            FD_SET\(sk_, &r_fds\);\n) Tj
ET
BT
15 98 Td
(//            tv.tv_sec = 3;\n) Tj
ET
BT
15 87 Td
(//            tv.tv_usec = 10;\n) Tj
ET
BT
15 76 Td
(//\n) Tj
ET
BT
15 65 Td
(//            select\(sk_+1, &r_fds, 0, 0, &tv\);\n) Tj
ET
BT
15 54 Td
(//\n) Tj
ET
BT
15 43 Td
(//            if \(FD_ISSET\(sk_, &r_fds\)\)\n) Tj
ET

endstream
endobj
462 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [463 0 R ] /Parent 2 0 R >>
endobj
463 0 obj 
<</Length 1372 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/src/socket.cpp) Tj
ET
BT
565 822 Td
(153) Tj
ET
BT
15 780 Td
(            {\n) Tj
ET
BT
15 769 Td
(                if \(\(ret = recvfrom\(sk_, buf.data\(\), buf.len\(\), 0,\n) Tj
ET
BT
15 758 Td
(                    \(sockaddr*\)&sk_addr_, &len\)\) == 0\)\n) Tj
ET
BT
15 747 Td
(                {\n) Tj
ET
BT
15 736 Td
(                //    break;\n) Tj
ET
BT
15 725 Td
(                }\n) Tj
ET
BT
15 714 Td
(                else if \(ret < 0\)\n) Tj
ET
BT
15 703 Td
(                {\n) Tj
ET
BT
15 692 Td
(                    if \(errno == EAGAIN\) break;\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(                    std::cerr << "recvfrom: " << strerror\(errno\) << '\\n';\n) Tj
ET
BT
15 659 Td
(                    break;\n) Tj
ET
BT
15 648 Td
(                }\n) Tj
ET
BT
15 637 Td
(                else\n) Tj
ET
BT
15 626 Td
(                {\n) Tj
ET
BT
15 615 Td
(                    addr_ = inet_ntoa\(sk_addr_.sin_addr\);\n) Tj
ET
BT
15 604 Td
(                    msg_ = buf.data\(\);\n) Tj
ET
BT
15 593 Td
(                }\n) Tj
ET
BT
15 582 Td
(            }\n) Tj
ET
BT
15 571 Td
(        } while \(selfloop\);\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(        return ret;\n) Tj
ET
BT
15 538 Td
(    }\n) Tj
ET
BT
15 527 Td
(} // namespace EasySip\n) Tj
ET

endstream
endobj
465 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [466 0 R ] /Parent 2 0 R >>
endobj
466 0 obj 
<</Length 1085 >>
stream
/F1 10 Tf
BT
123.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-pair.cpp) Tj
ET
BT
565 822 Td
(154) Tj
ET
BT
15 780 Td
(#include <utility>\n) Tj
ET
BT
15 769 Td
(#include <iostream>\n) Tj
ET
BT
15 758 Td
(#include <set>\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(int main\(\)\n) Tj
ET
BT
15 725 Td
({\n) Tj
ET
BT
15 714 Td
(\tstd::pair<int, int> fo;\n) Tj
ET
BT
15 703 Td
(\tstd::set<std::pair<int, int> > fos;\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(\tfo = std::make_pair\(100, 33\);\n) Tj
ET
BT
15 670 Td
(\tstd::pair<int, int> foe = std::make_pair\(100, 33\);\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(\tstd::cout << fo.first << ' ' << fo.second << '\\n';\n) Tj
ET
BT
15 637 Td
(\tfos.insert\(fo\);\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(\tstd::set<std::pair<int, int> >::iterator it = fos.find\(foe\);\n) Tj
ET
BT
15 604 Td
(\tstd::cout << \(it == fos.end\(\)\) << '\\n';\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(\tstd::cout << fo.first << ' ' << fo.second << '\\n';\n) Tj
ET
BT
15 571 Td
(}\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET

endstream
endobj
468 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [469 0 R ] /Parent 2 0 R >>
endobj
469 0 obj 
<</Length 846 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-thr-timer.cpp) Tj
ET
BT
565 822 Td
(155) Tj
ET
BT
15 780 Td
(#include <iostream>\n) Tj
ET
BT
15 769 Td
(#include "ts-thr-timer.h"\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(void on_timeup\(\)\n) Tj
ET
BT
15 736 Td
({\n) Tj
ET
BT
15 725 Td
(\tstd::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 714 Td
(}\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(typedef void \(*func_cb\)\(\);\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(int main\(\)\n) Tj
ET
BT
15 659 Td
({\n) Tj
ET
BT
15 648 Td
(\tint i=1000;\n) Tj
ET
BT
15 637 Td
(\ttimer<int, func_cb>\(i, &on_timeup\);\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(\twhile\(1\);\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\treturn 0;\n) Tj
ET
BT
15 582 Td
(}\n) Tj
ET
BT
15 571 Td
(\n) Tj
ET

endstream
endobj
471 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [472 0 R ] /Parent 2 0 R >>
endobj
472 0 obj 
<</Length 2290 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-ip.cpp) Tj
ET
BT
565 822 Td
(156) Tj
ET
BT
15 780 Td
(#include <stdio.h>      \n) Tj
ET
BT
15 769 Td
(#include <sys/types.h>\n) Tj
ET
BT
15 758 Td
(#include <ifaddrs.h>\n) Tj
ET
BT
15 747 Td
(#include <netinet/in.h> \n) Tj
ET
BT
15 736 Td
(#include <string.h> \n) Tj
ET
BT
15 725 Td
(#include <arpa/inet.h>\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(int main \(int argc, const char * argv[]\)\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(    struct ifaddrs * ifAddrStruct=NULL;\n) Tj
ET
BT
15 670 Td
(    struct ifaddrs * ifa=NULL;\n) Tj
ET
BT
15 659 Td
(    void * tmpAddrPtr=NULL;\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(    getifaddrs\(&ifAddrStruct\);\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET
BT
15 615 Td
(    for \(ifa = ifAddrStruct; ifa != NULL; ifa = ifa->ifa_next\) {\n) Tj
ET
BT
15 604 Td
(        if \(!ifa->ifa_addr\) {\n) Tj
ET
BT
15 593 Td
(            continue;\n) Tj
ET
BT
15 582 Td
(        }\n) Tj
ET
BT
15 571 Td
(        if \(ifa->ifa_addr->sa_family == AF_INET\) { // check it is IP4\n) Tj
ET
BT
15 560 Td
(            // is a valid IP4 Address\n) Tj
ET
BT
15 549 Td
(            tmpAddrPtr=&\(\(struct sockaddr_in *\)ifa->ifa_addr\)->sin_addr;\n) Tj
ET
BT
15 538 Td
(            char addressBuffer[INET_ADDRSTRLEN];\n) Tj
ET
BT
15 527 Td
(            inet_ntop\(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN\);\n) Tj
ET
BT
15 516 Td
(            printf\("%s IP Address %s\\n", ifa->ifa_name, addressBuffer\); \n) Tj
ET
BT
15 505 Td
(        } else if \(ifa->ifa_addr->sa_family == AF_INET6\) { // check it is IP6\n) Tj
ET
BT
15 494 Td
(            // is a valid IP6 Address\n) Tj
ET
BT
15 483 Td
(            tmpAddrPtr=&\(\(struct sockaddr_in6 *\)ifa->ifa_addr\)->sin6_addr;\n) Tj
ET
BT
15 472 Td
(            char addressBuffer[INET6_ADDRSTRLEN];\n) Tj
ET
BT
15 461 Td
(            inet_ntop\(AF_INET6, tmpAddrPtr, addressBuffer, INET6_ADDRSTRLEN\);\n) Tj
ET
BT
15 450 Td
(            printf\("%s IP Address %s\\n", ifa->ifa_name, addressBuffer\); \n) Tj
ET
BT
15 439 Td
(        } \n) Tj
ET
BT
15 428 Td
(    }\n) Tj
ET
BT
15 417 Td
(    if \(ifAddrStruct!=NULL\) freeifaddrs\(ifAddrStruct\);\n) Tj
ET
BT
15 406 Td
(    return 0;\n) Tj
ET
BT
15 395 Td
(}\n) Tj
ET

endstream
endobj
474 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [475 0 R ] /Parent 2 0 R >>
endobj
475 0 obj 
<</Length 4090 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-timer.cpp) Tj
ET
BT
565 822 Td
(157) Tj
ET
BT
15 780 Td
(#include <signal.h>\n) Tj
ET
BT
15 769 Td
(#include <time.h>\n) Tj
ET
BT
15 758 Td
(#include <string.h>\n) Tj
ET
BT
15 747 Td
(#include <error.h>\n) Tj
ET
BT
15 736 Td
(#include <iostream>\n) Tj
ET
BT
15 725 Td
(#include <sys/time.h>\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(//union sigval {          /* Data passed with notification */\n) Tj
ET
BT
15 692 Td
(//           int     sival_int;         /* Integer value */\n) Tj
ET
BT
15 681 Td
(//           void   *sival_ptr;         /* Pointer value */\n) Tj
ET
BT
15 670 Td
(//       };\n) Tj
ET
BT
15 659 Td
(//\n) Tj
ET
BT
15 648 Td
(//       struct sigevent {\n) Tj
ET
BT
15 637 Td
(//           int          sigev_notify; /* Notification method */\n) Tj
ET
BT
15 626 Td
(//           int          sigev_signo;  /* Notification signal */\n) Tj
ET
BT
15 615 Td
(//           union sigval sigev_value;  /* Data passed with\n) Tj
ET
BT
15 604 Td
(//                                         notification */\n) Tj
ET
BT
15 593 Td
(//           void       \(*sigev_notify_function\) \(union sigval\);\n) Tj
ET
BT
15 582 Td
(//                            /* Function used for thread\n) Tj
ET
BT
15 571 Td
(//                               notification \(SIGEV_THREAD\) */\n) Tj
ET
BT
15 560 Td
(//           void        *sigev_notify_attributes;\n) Tj
ET
BT
15 549 Td
(//                            /* Attributes for notification thread\n) Tj
ET
BT
15 538 Td
(//                               \(SIGEV_THREAD\) */\n) Tj
ET
BT
15 527 Td
(//           pid_t        sigev_notify_thread_id;\n) Tj
ET
BT
15 516 Td
(//                            /* ID of thread to signal \(SIGEV_THREAD_ID\) */\n) Tj
ET
BT
15 505 Td
(//       };\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(extern int errno;\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(void sigev_notify_cb\(union sigval sv\)\n) Tj
ET
BT
15 450 Td
({\n) Tj
ET
BT
15 439 Td
(\tstd::cout << "sigev_notify_function: " << sv.sival_int << '\\n';\n) Tj
ET
BT
15 428 Td
(}\n) Tj
ET
BT
15 417 Td
(\n) Tj
ET
BT
15 406 Td
(//           struct timespec {\n) Tj
ET
BT
15 395 Td
(//               time_t tv_sec;                /* Seconds */\n) Tj
ET
BT
15 384 Td
(//               long   tv_nsec;               /* Nanoseconds */\n) Tj
ET
BT
15 373 Td
(//           };\n) Tj
ET
BT
15 362 Td
(//\n) Tj
ET
BT
15 351 Td
(//           struct itimerspec {\n) Tj
ET
BT
15 340 Td
(//               struct timespec it_interval;  /* Timer interval */\n) Tj
ET
BT
15 329 Td
(//               struct timespec it_value;     /* Initial expiration */\n) Tj
ET
BT
15 318 Td
(//\n) Tj
ET
BT
15 307 Td
(//       int timer_settime\(timer_t timerid, int flags,\n) Tj
ET
BT
15 296 Td
(//                         const struct itimerspec *new_value,\n) Tj
ET
BT
15 285 Td
(//                         struct itimerspec * old_value\);\n) Tj
ET
BT
15 274 Td
(//\t\tint timer_gettime\(timer_t timerid, struct itimerspec *curr_value\);\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(//int main\(\)\n) Tj
ET
BT
15 241 Td
(//{\n) Tj
ET
BT
15 230 Td
(//\tint ret = 0;\n) Tj
ET
BT
15 219 Td
(//\n) Tj
ET
BT
15 208 Td
(//\tstruct sigevent sige;\n) Tj
ET
BT
15 197 Td
(//\ttimer_t tid;\n) Tj
ET
BT
15 186 Td
(//\n) Tj
ET
BT
15 175 Td
(//\tsige.sigev_notify_function = sigev_notify_cb;\n) Tj
ET
BT
15 164 Td
(//\tsige.sigev_notify = SIGEV_THREAD;//SIGEV_SIGNAL;\n) Tj
ET
BT
15 153 Td
(//\tsige.sigev_signo = SIGRTMIN;\n) Tj
ET
BT
15 142 Td
(//\n) Tj
ET
BT
15 131 Td
(//    std::cout << "timer_create: " << \(ret = timer_create\(CLOCK_REALTIME, &sige, &tid\)\) << '\\n';\n) Tj
ET
BT
15 120 Td
(//\n) Tj
ET
BT
15 109 Td
(//\tstruct itimerspec itmspec, *itmspec_cur = new itimerspec;\n) Tj
ET
BT
15 98 Td
(//\tstruct timespec tmspec_intv, tmspec_expir;\n) Tj
ET
BT
15 87 Td
(//\n) Tj
ET
BT
15 76 Td
(//\ttmspec_intv.tv_sec = 3;\n) Tj
ET
BT
15 65 Td
(//\ttmspec_intv.tv_nsec = 0;\n) Tj
ET
BT
15 54 Td
(//\ttmspec_expir.tv_sec = 3;\n) Tj
ET
BT
15 43 Td
(//\ttmspec_expir.tv_nsec = 0;\n) Tj
ET

endstream
endobj
477 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [478 0 R ] /Parent 2 0 R >>
endobj
478 0 obj 
<</Length 3164 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-timer.cpp) Tj
ET
BT
565 822 Td
(158) Tj
ET
BT
15 780 Td
(//\n) Tj
ET
BT
15 769 Td
(//\titmspec.it_interval = tmspec_intv;\n) Tj
ET
BT
15 758 Td
(//\titmspec.it_value = tmspec_expir;\n) Tj
ET
BT
15 747 Td
(//\n) Tj
ET
BT
15 736 Td
(//\tstd::cout << "timer_gettime: " << \(ret = timer_gettime\(tid, itmspec_cur\)\) << '\\n';\n) Tj
ET
BT
15 725 Td
(//\tstd::cout << "timer_settime: " << \(ret = timer_settime\(tid, TIMER_ABSTIME, &itmspec, itmspec_cur\)\) << '\\n';\n) Tj
ET
BT
15 714 Td
(//\tstd::cout << "timer_delte: " << \(ret = timer_delete\(tid\)\) << '\\n';\n) Tj
ET
BT
15 703 Td
(//\n) Tj
ET
BT
15 692 Td
(//\tdelete itmspec_cur;\n) Tj
ET
BT
15 681 Td
(//\n) Tj
ET
BT
15 670 Td
(//\treturn ret;\n) Tj
ET
BT
15 659 Td
(//}\n) Tj
ET
BT
15 648 Td
(//\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(//struct itimerval {\n) Tj
ET
BT
15 615 Td
(//               struct timeval it_interval; /* next value */\n) Tj
ET
BT
15 604 Td
(//               struct timeval it_value;    /* current value */\n) Tj
ET
BT
15 593 Td
(//           };\n) Tj
ET
BT
15 582 Td
(//\n) Tj
ET
BT
15 571 Td
(//           struct timeval {\n) Tj
ET
BT
15 560 Td
(//               time_t      tv_sec;         /* seconds */\n) Tj
ET
BT
15 549 Td
(//               suseconds_t tv_usec;        /* microseconds */\n) Tj
ET
BT
15 538 Td
(//           };\n) Tj
ET
BT
15 527 Td
(//\tbool cb1\(\)\n) Tj
ET
BT
15 516 Td
(//\t{\n) Tj
ET
BT
15 505 Td
(//\t\tstd::cout << "cb1 signo received, time's up\\n";\n) Tj
ET
BT
15 494 Td
(//\t\treturn false;\n) Tj
ET
BT
15 483 Td
(//\t}\n) Tj
ET
BT
15 472 Td
(//\n) Tj
ET
BT
15 461 Td
(struct itimerval it_a;\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(void sigalrm_cb\(int signo\)\n) Tj
ET
BT
15 428 Td
({\n) Tj
ET
BT
15 417 Td
(\tstd::cout << signo << " signo received, time's up\\n";\n) Tj
ET
BT
15 406 Td
(\t//signal\(SIGALRM, SIG_DFL\);\n) Tj
ET
BT
15 395 Td
(\tstd::cout << "settimer: " << setitimer\(ITIMER_REAL, 0, &it_a\) << '\\n';\n) Tj
ET
BT
15 384 Td
(}\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(int main\(\)\n) Tj
ET
BT
15 351 Td
({\n) Tj
ET
BT
15 340 Td
(\tsignal\(SIGALRM, sigalrm_cb\);\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(\tstruct itimerval it_a;\n) Tj
ET
BT
15 307 Td
(\tstruct timeval tm_cur, tm_next;\n) Tj
ET
BT
15 296 Td
(\n) Tj
ET
BT
15 285 Td
(\ttm_cur.tv_sec = 1;\n) Tj
ET
BT
15 274 Td
(\ttm_cur.tv_usec = 0;\n) Tj
ET
BT
15 263 Td
(\n) Tj
ET
BT
15 252 Td
(\ttm_next.tv_sec = 3;\n) Tj
ET
BT
15 241 Td
(\ttm_next.tv_usec = 0;\n) Tj
ET
BT
15 230 Td
(\n) Tj
ET
BT
15 219 Td
(\tit_a.it_interval = tm_next;\n) Tj
ET
BT
15 208 Td
(\tit_a.it_value = tm_cur;\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(//\tstd::cout << "settimer: " << setitimer\(ITIMER_REAL, &it_a, 0\) << '\\n';\n) Tj
ET
BT
15 175 Td
(\tchar c;\n) Tj
ET
BT
15 164 Td
(\tstd::cin.get\(c\);\n) Tj
ET
BT
15 153 Td
(//\twhile\(1\);\n) Tj
ET
BT
15 142 Td
(\tstd::cout << "timercmp\(&tm_cur, tm_next, ==\) " << timercmp\(&tm_cur, &tm_next, ==\) << '\\n';\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(\treturn 0;\n) Tj
ET
BT
15 109 Td
(}\n) Tj
ET
BT
15 98 Td
(\n) Tj
ET

endstream
endobj
480 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [481 0 R ] /Parent 2 0 R >>
endobj
481 0 obj 
<</Length 1655 >>
stream
/F1 10 Tf
BT
122.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-es-thread.cpp) Tj
ET
BT
565 822 Td
(159) Tj
ET
BT
15 780 Td
(#include "thread.h"\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(using namespace EasySip;\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(void* t1_loop\(void* arg\)\n) Tj
ET
BT
15 725 Td
({\n) Tj
ET
BT
15 714 Td
(\tint a = *\(int*\)arg;\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(\tstd::cout << a << '\\n';\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(\treturn 0;\n) Tj
ET
BT
15 659 Td
(}\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(class X\n) Tj
ET
BT
15 626 Td
({\n) Tj
ET
BT
15 615 Td
(\tint num;\n) Tj
ET
BT
15 604 Td
(public:\n) Tj
ET
BT
15 593 Td
(\tX\(int n\) : num\(n\) {};\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(\tvoid* show\(\)\n) Tj
ET
BT
15 560 Td
(\t{\n) Tj
ET
BT
15 549 Td
(\t\tstd::cout << num << '\\n';\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(\t//\tstd::cout << "start " << pthread_yield\(\) << '\\n';\n) Tj
ET
BT
15 516 Td
(\t\treturn 0;\n) Tj
ET
BT
15 505 Td
(\t}\n) Tj
ET
BT
15 494 Td
(};\n) Tj
ET
BT
15 483 Td
(\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(int main\(\)\n) Tj
ET
BT
15 450 Td
({\n) Tj
ET
BT
15 439 Td
(\tint arg = 1098;\n) Tj
ET
BT
15 428 Td
(\tX x\(132\);\n) Tj
ET
BT
15 417 Td
(\t//Thread t1\(t1_loop, \(void*\)&arg\);\n) Tj
ET
BT
15 406 Td
(\tThread t1 = Thread\(&X::show, &x\);\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(//\tt1.join\(\);\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(\tchar c;\n) Tj
ET
BT
15 351 Td
(\tstd::cin.get\(c\);\n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(\treturn 0;\n) Tj
ET
BT
15 318 Td
(}\n) Tj
ET

endstream
endobj
483 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [484 0 R ] /Parent 2 0 R >>
endobj
484 0 obj 
<</Length 1071 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-es-timer.cpp) Tj
ET
BT
565 822 Td
(160) Tj
ET
BT
15 780 Td
(#include "timer.h"\n) Tj
ET
BT
15 769 Td
(#include <thread>\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(using namespace EasySip;\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(void startt\(Timer *t\)\n) Tj
ET
BT
15 714 Td
({\n) Tj
ET
BT
15 703 Td
(\tt->start\(\);\n) Tj
ET
BT
15 692 Td
(}\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(int main\(\)\n) Tj
ET
BT
15 648 Td
({\n) Tj
ET
BT
15 637 Td
(\tTimer t1\(3, 0\);\n) Tj
ET
BT
15 626 Td
(\tTimer t2\(5, 0\);\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(\tstd::thread th1\(startt, &t1\);\n) Tj
ET
BT
15 593 Td
(\tstd::thread th2\(startt, &t2\);\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(\tth1.join\(\);\n) Tj
ET
BT
15 560 Td
(\tth2.join\(\);\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(\tchar c;\n) Tj
ET
BT
15 527 Td
(\tstd::cin.get\(c\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(\treturn 0;\n) Tj
ET
BT
15 494 Td
(}\n) Tj
ET

endstream
endobj
486 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [487 0 R ] /Parent 2 0 R >>
endobj
487 0 obj 
<</Length 1049 >>
stream
/F1 10 Tf
BT
122.5 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-shareptr.cpp) Tj
ET
BT
565 822 Td
(161) Tj
ET
BT
15 780 Td
(#include <iostream>\n) Tj
ET
BT
15 769 Td
(#include <memory>\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(class A\n) Tj
ET
BT
15 736 Td
({\n) Tj
ET
BT
15 725 Td
(public:\n) Tj
ET
BT
15 714 Td
(\tint n_;\n) Tj
ET
BT
15 703 Td
(\tA\(int n\) : n_\(n\)\n) Tj
ET
BT
15 692 Td
(\t{ std::cout << n_ << " construct\\n"; }\n) Tj
ET
BT
15 681 Td
(\t~A\(\)\n) Tj
ET
BT
15 670 Td
(\t{ std::cout << n_ << " destruct\\n"; }\n) Tj
ET
BT
15 659 Td
(};\n) Tj
ET
BT
15 648 Td
(int main\(\)\n) Tj
ET
BT
15 637 Td
({\n) Tj
ET
BT
15 626 Td
(\tstd::shared_ptr<A> a;\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(\ta = std::make_shared<A>\(3\);\n) Tj
ET
BT
15 593 Td
(\tstd::cout << a->n_ << ">>>>>>>>\\n";\n) Tj
ET
BT
15 582 Td
(\ta = std::make_shared<A>\(100\);\n) Tj
ET
BT
15 571 Td
(\tstd::cout << a->n_ << ">>>>>>>>\\n";\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\treturn 0;\n) Tj
ET
BT
15 538 Td
(}\n) Tj
ET

endstream
endobj
489 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [490 0 R ] /Parent 2 0 R >>
endobj
490 0 obj 
<</Length 2936 >>
stream
/F1 10 Tf
BT
123 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-server.cpp) Tj
ET
BT
565 822 Td
(162) Tj
ET
BT
15 780 Td
(/*\n) Tj
ET
BT
15 769 Td
( * lsof -i\n) Tj
ET
BT
15 758 Td
( * netstat -lptu\n) Tj
ET
BT
15 747 Td
( * netstat -tulpn\n) Tj
ET
BT
15 736 Td
( */\n) Tj
ET
BT
15 725 Td
(#include <iostream>\n) Tj
ET
BT
15 714 Td
(#include "socket.h"\n) Tj
ET
BT
15 703 Td
(#include "Element/uaserver.h"\n) Tj
ET
BT
15 692 Td
(#include <thread>\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(using namespace EasySip;\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(UAServer server;\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(void rxd\(\)\n) Tj
ET
BT
15 615 Td
({\n) Tj
ET
BT
15 604 Td
(\tserver.start\(\);\n) Tj
ET
BT
15 593 Td
(}\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(void txd\(\)\n) Tj
ET
BT
15 560 Td
({\n) Tj
ET
BT
15 549 Td
(\tchar c;\n) Tj
ET
BT
15 538 Td
(\tint run = 1;\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(\twhile \(run\)\n) Tj
ET
BT
15 505 Td
(\t{\n) Tj
ET
BT
15 494 Td
(\t\tstd::cout << "input command: ";\n) Tj
ET
BT
15 483 Td
(\t\tstd::cin >> c;\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(\t\tswitch \(c\)\n) Tj
ET
BT
15 450 Td
(\t\t{\n) Tj
ET
BT
15 439 Td
(\t\t\tcase 'i': server.invite_request\(\); break;\n) Tj
ET
BT
15 428 Td
(\t\t\tcase 'r': server.register_request\(\); break;\n) Tj
ET
BT
15 417 Td
(\t\t\tcase 'b': server.bye_request\(\); break;\n) Tj
ET
BT
15 406 Td
(\t\t\tcase 'c': server.cancel_request\(\); break;\n) Tj
ET
BT
15 395 Td
(\t\t\tcase 'u': server.update_request\(\); break;\n) Tj
ET
BT
15 384 Td
(\t\t\tcase 'f': server.info_request\(\); break;\n) Tj
ET
BT
15 373 Td
(\t\t\tcase 'a': server.ack_request\(\); break;\n) Tj
ET
BT
15 362 Td
(\t\t\tcase 'm': server.message_request\(\); break;\n) Tj
ET
BT
15 351 Td
(\t\t\tcase 's': server.subscribe_request\(\); break;\n) Tj
ET
BT
15 340 Td
(\t\t\tcase 'n': server.notify_request\(\); break;\n) Tj
ET
BT
15 329 Td
(\t\t\tcase 'e': server.refer_request\(\); break;\n) Tj
ET
BT
15 318 Td
(\t\t\tcase 'o': server.options_request\(\); break;\n) Tj
ET
BT
15 307 Td
(\t\t\tcase 'k': server.prack_request\(\); break;\n) Tj
ET
BT
15 296 Td
(\t\t\tcase 'q': std::cout << "shutdown ...\\n"; while\(server.run\(\)\) server.run\(false\); run = 0; break;\n) Tj
ET
BT
15 285 Td
(\t\t\tdefault:\n) Tj
ET
BT
15 274 Td
(\t\t\t{\n) Tj
ET
BT
15 263 Td
(\t\t\t\tstd::cerr << "Unexpected command '" << c << "\(" << int\(c\) << "\)\\n";\n) Tj
ET
BT
15 252 Td
(\t\t\t}\n) Tj
ET
BT
15 241 Td
(\t\t}\n) Tj
ET
BT
15 230 Td
(\t}\n) Tj
ET
BT
15 219 Td
(}\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(int main\(\)\n) Tj
ET
BT
15 186 Td
({\n) Tj
ET
BT
15 175 Td
(\tstd::thread tx\(txd\);\n) Tj
ET
BT
15 164 Td
(\tstd::thread rx\(rxd\);\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(\ttx.join\(\);\n) Tj
ET
BT
15 131 Td
(\trx.join\(\);\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(\treturn 0;\n) Tj
ET
BT
15 98 Td
(}\n) Tj
ET

endstream
endobj
492 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [493 0 R ] /Parent 2 0 R >>
endobj
493 0 obj 
<</Length 1102 >>
stream
/F1 10 Tf
BT
122.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-thr-timer.h) Tj
ET
BT
565 822 Td
(163) Tj
ET
BT
15 780 Td
(#include <thread>\n) Tj
ET
BT
15 769 Td
(#include <chrono>\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(//struct f_op\n) Tj
ET
BT
15 736 Td
(//{\n) Tj
ET
BT
15 725 Td
(//\tvoid operator\(\)\(\) const {\n) Tj
ET
BT
15 714 Td
(//\t\tstd::cout << __PRETTY_FUNCTION__ << '\\n';\n) Tj
ET
BT
15 703 Td
(//\t}\n) Tj
ET
BT
15 692 Td
(//};\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(template<typename Dua, typename Func>\n) Tj
ET
BT
15 659 Td
(//struct timer//\(Dua const & d, Func const & f\)\n) Tj
ET
BT
15 648 Td
(//{\n) Tj
ET
BT
15 637 Td
(void\ttimer\(Dua const & d, Func const & f\)\n) Tj
ET
BT
15 626 Td
(\t{\n) Tj
ET
BT
15 615 Td
(\tstd::thread\([d, f]\(\){\n) Tj
ET
BT
15 604 Td
(\t\tstd::chrono::milliseconds dur\(d\);\n) Tj
ET
BT
15 593 Td
(\t\tstd::this_thread::sleep_for\(dur\);\n) Tj
ET
BT
15 582 Td
(\t\tf\(\);\n) Tj
ET
BT
15 571 Td
(\t}\).detach\(\);\n) Tj
ET
BT
15 560 Td
(\t}\n) Tj
ET
BT
15 549 Td
(//};\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET

endstream
endobj
495 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [496 0 R ] /Parent 2 0 R >>
endobj
496 0 obj 
<</Length 2785 >>
stream
/F1 10 Tf
BT
123 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-client.cpp) Tj
ET
BT
565 822 Td
(164) Tj
ET
BT
15 780 Td
(#include "Element/uaclient.h"\n) Tj
ET
BT
15 769 Td
(#include <iostream>\n) Tj
ET
BT
15 758 Td
(#include <thread>\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(using namespace EasySip;\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(UAClient client;\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(void rxd\(\)\n) Tj
ET
BT
15 681 Td
({\n) Tj
ET
BT
15 670 Td
(\tclient.start\(\);\n) Tj
ET
BT
15 659 Td
(}\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(void txd\(\)\n) Tj
ET
BT
15 626 Td
({\n) Tj
ET
BT
15 615 Td
(\tchar c;\n) Tj
ET
BT
15 604 Td
(\tint run = 1;\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(\twhile \(run\)\n) Tj
ET
BT
15 571 Td
(\t{\n) Tj
ET
BT
15 560 Td
(\t\tstd::cout << "input command: ";\n) Tj
ET
BT
15 549 Td
(\t\tstd::cin >> c;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(\t\tswitch \(c\)\n) Tj
ET
BT
15 516 Td
(\t\t{\n) Tj
ET
BT
15 505 Td
(\t\t\tcase 'i': client.invite_request\(\); break;\n) Tj
ET
BT
15 494 Td
(\t\t\tcase 'r': client.register_request\(\); break;\n) Tj
ET
BT
15 483 Td
(\t\t\tcase 'b': client.bye_request\(\); break;\n) Tj
ET
BT
15 472 Td
(\t\t\tcase 'c': client.cancel_request\(\); break;\n) Tj
ET
BT
15 461 Td
(\t\t\tcase 'u': client.update_request\(\); break;\n) Tj
ET
BT
15 450 Td
(\t\t\tcase 'f': client.info_request\(\); break;\n) Tj
ET
BT
15 439 Td
(\t\t\tcase 'a': client.ack_request\(\); break;\n) Tj
ET
BT
15 428 Td
(\t\t\tcase 'm': client.message_request\(\); break;\n) Tj
ET
BT
15 417 Td
(\t\t\tcase 's': client.subscribe_request\(\); break;\n) Tj
ET
BT
15 406 Td
(\t\t\tcase 'n': client.notify_request\(\); break;\n) Tj
ET
BT
15 395 Td
(\t\t\tcase 'e': client.refer_request\(\); break;\n) Tj
ET
BT
15 384 Td
(\t\t\tcase 'o': client.options_request\(\); break;\n) Tj
ET
BT
15 373 Td
(\t\t\tcase 'k': client.prack_request\(\); break;\n) Tj
ET
BT
15 362 Td
(\t\t\tcase 'q':\n) Tj
ET
BT
15 351 Td
(\t\t\t\tPROGRESS_WITH_FEEDBACK\("shutdown", client.run\(\), client.run\(false\)\)\n) Tj
ET
BT
15 340 Td
(\t\t\t\trun = 0; break;\n) Tj
ET
BT
15 329 Td
(\t\t\tdefault:\n) Tj
ET
BT
15 318 Td
(\t\t\t{\n) Tj
ET
BT
15 307 Td
(\t\t\t\tstd::cerr << "Unexpected command '" << c << "\(" << int\(c\) << "\)\\n";\n) Tj
ET
BT
15 296 Td
(\t\t\t}\n) Tj
ET
BT
15 285 Td
(\t\t}\n) Tj
ET
BT
15 274 Td
(\t}\n) Tj
ET
BT
15 263 Td
(}\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(int main\(\)\n) Tj
ET
BT
15 230 Td
({\n) Tj
ET
BT
15 219 Td
(\tstd::thread tx\(txd\);\n) Tj
ET
BT
15 208 Td
(\tstd::thread rx\(rxd\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(\ttx.join\(\);\n) Tj
ET
BT
15 175 Td
(\trx.join\(\);\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(\treturn 0;\n) Tj
ET
BT
15 142 Td
(}\n) Tj
ET

endstream
endobj
498 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [499 0 R ] /Parent 2 0 R >>
endobj
499 0 obj 
<</Length 520 >>
stream
/F1 10 Tf
BT
123 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-header.cpp) Tj
ET
BT
565 822 Td
(165) Tj
ET
BT
15 780 Td
(#include "../include/header_field.h"\n) Tj
ET
BT
15 769 Td
(#include <iostream>\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(using namespace EasySip;\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(int main\(\)\n) Tj
ET
BT
15 714 Td
({\n) Tj
ET
BT
15 703 Td
(\tstd::cout << HFFrom\(\).Field\(\)<< '\\n';\n) Tj
ET
BT
15 692 Td
(\treturn 0;\n) Tj
ET
BT
15 681 Td
(}\n) Tj
ET

endstream
endobj
501 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [502 0 R ] /Parent 2 0 R >>
endobj
502 0 obj 
<</Length 2869 >>
stream
/F1 10 Tf
BT
124.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts.cpp) Tj
ET
BT
565 822 Td
(166) Tj
ET
BT
15 780 Td
(#include <iostream>\n) Tj
ET
BT
15 769 Td
(#include <string.h>\n) Tj
ET
BT
15 758 Td
(#include <memory>\n) Tj
ET
BT
15 747 Td
(#include <locale>\n) Tj
ET
BT
15 736 Td
(#include <unordered_map>\n) Tj
ET
BT
15 725 Td
(#include <algorithm>\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(class A\n) Tj
ET
BT
15 692 Td
({\n) Tj
ET
BT
15 681 Td
(\tunsigned long value;\n) Tj
ET
BT
15 670 Td
(public:\n) Tj
ET
BT
15 659 Td
(\tA\(A &a\)\n) Tj
ET
BT
15 648 Td
(\t: value\(a.Value\(\)\)\n) Tj
ET
BT
15 637 Td
(\t{\n) Tj
ET
BT
15 626 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 615 Td
(\t}\n) Tj
ET
BT
15 604 Td
(\tA\(\)\n) Tj
ET
BT
15 593 Td
(\t: value\(3\)\n) Tj
ET
BT
15 582 Td
(\t{\n) Tj
ET
BT
15 571 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 560 Td
(\t}\n) Tj
ET
BT
15 549 Td
(\tA\(unsigned int val\)\n) Tj
ET
BT
15 538 Td
(\t{\n) Tj
ET
BT
15 527 Td
(\t\tvalue = val;\n) Tj
ET
BT
15 516 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 505 Td
(\t}\n) Tj
ET
BT
15 494 Td
(\tvoid show\(\)\n) Tj
ET
BT
15 483 Td
(\t{\n) Tj
ET
BT
15 472 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 461 Td
(\t}\n) Tj
ET
BT
15 450 Td
(\t~A\(\)\n) Tj
ET
BT
15 439 Td
(\t{}\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(\tvoid Value\(unsigned long val\)\n) Tj
ET
BT
15 406 Td
(\t{\n) Tj
ET
BT
15 395 Td
(\t\tvalue = val;\n) Tj
ET
BT
15 384 Td
(\t}\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(\tunsigned long Value\(\)\n) Tj
ET
BT
15 351 Td
(\t{\n) Tj
ET
BT
15 340 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 329 Td
(\t\treturn value;\n) Tj
ET
BT
15 318 Td
(\t}\n) Tj
ET
BT
15 307 Td
(\n) Tj
ET
BT
15 296 Td
(\tunsigned long operator* \(unsigned long val\)\n) Tj
ET
BT
15 285 Td
(\t{\n) Tj
ET
BT
15 274 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 263 Td
(\t\treturn \(value*val\);\n) Tj
ET
BT
15 252 Td
(\t}\n) Tj
ET
BT
15 241 Td
(\n) Tj
ET
BT
15 230 Td
(\tA operator= \(A a\)\n) Tj
ET
BT
15 219 Td
(\t{\n) Tj
ET
BT
15 208 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 197 Td
(\t\tA ret\(a.Value\(\)\);\n) Tj
ET
BT
15 186 Td
(\t\treturn ret;\n) Tj
ET
BT
15 175 Td
(\t}\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(\tfriend std::ostream& operator<< \(std::ostream &o, A a\)\n) Tj
ET
BT
15 142 Td
(\t{\n) Tj
ET
BT
15 131 Td
(\t\to << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 120 Td
(\t\treturn o;\n) Tj
ET
BT
15 109 Td
(\t}\n) Tj
ET
BT
15 98 Td
(//\tvoid operator\(\) \(A a\)\n) Tj
ET
BT
15 87 Td
(//\t{\n) Tj
ET
BT
15 76 Td
(//\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 65 Td
(//\t\tA ret\(a.Value\(\)\);\n) Tj
ET
BT
15 54 Td
(//\t\treturn ret;\n) Tj
ET
BT
15 43 Td
(//\t}\n) Tj
ET

endstream
endobj
504 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [505 0 R ] /Parent 2 0 R >>
endobj
505 0 obj 
<</Length 2723 >>
stream
/F1 10 Tf
BT
124.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts.cpp) Tj
ET
BT
565 822 Td
(167) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(};\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(class B : public A\n) Tj
ET
BT
15 736 Td
({\n) Tj
ET
BT
15 725 Td
(public:\n) Tj
ET
BT
15 714 Td
(\tB\(unsigned int val\)\n) Tj
ET
BT
15 703 Td
(\t: A\(val\)\n) Tj
ET
BT
15 692 Td
(\t{\n) Tj
ET
BT
15 681 Td
(\t\tstd::cout << __PRETTY_FUNCTION__ << "\\n";\n) Tj
ET
BT
15 670 Td
(\t\tshow\(\);\n) Tj
ET
BT
15 659 Td
(\t}\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(\t~B\(\)\n) Tj
ET
BT
15 626 Td
(\t{}\n) Tj
ET
BT
15 615 Td
(\n) Tj
ET
BT
15 604 Td
(\tint operator[] \(int val\)\n) Tj
ET
BT
15 593 Td
(\t{\n) Tj
ET
BT
15 582 Td
(\t\treturn 3310;\n) Tj
ET
BT
15 571 Td
(\t}\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\tint operator[] \(std::string hello\)\n) Tj
ET
BT
15 538 Td
(\t{\n) Tj
ET
BT
15 527 Td
(\t\treturn 928;\n) Tj
ET
BT
15 516 Td
(\t}\n) Tj
ET
BT
15 505 Td
(\tint operator[] \(A a\)\n) Tj
ET
BT
15 494 Td
(\t{\n) Tj
ET
BT
15 483 Td
(\t\ta.show\(\);\n) Tj
ET
BT
15 472 Td
(\t\treturn 309;\n) Tj
ET
BT
15 461 Td
(\t}\n) Tj
ET
BT
15 450 Td
(};\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(\t#define STRDQUOTE "'""\\"""'"\n) Tj
ET
BT
15 417 Td
(\t#define STRQUOTE "'""\\'""'"\n) Tj
ET
BT
15 406 Td
(\t#define STRBSLASH "'""\\\\""'"\n) Tj
ET
BT
15 395 Td
(\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(int main\(\)\n) Tj
ET
BT
15 351 Td
({\n) Tj
ET
BT
15 340 Td
(//\tB b\(100\);\n) Tj
ET
BT
15 329 Td
(\tB b2\(B\(100\)*3\);\n) Tj
ET
BT
15 318 Td
(//\tstd::cout << b.Value\(\) << '\\n';\n) Tj
ET
BT
15 307 Td
(\tstd::cout << b2.Value\(\) << '\\n';\n) Tj
ET
BT
15 296 Td
(\tstd::cout << b2[3] << '\\n';\n) Tj
ET
BT
15 285 Td
(\tstd::cout << b2["ok"] << '\\n';\n) Tj
ET
BT
15 274 Td
(\tA a\(333\);\n) Tj
ET
BT
15 263 Td
(\tstd::cout << b2[a] << '\\n';\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(\tstd::shared_ptr<A> p;\n) Tj
ET
BT
15 230 Td
(\tp = std::make_shared<A>\(\);\n) Tj
ET
BT
15 219 Td
(\tp->show\(\);\n) Tj
ET
BT
15 208 Td
(\n) Tj
ET
BT
15 197 Td
(\tstd::unordered_map<std::string, std::string> buck;\n) Tj
ET
BT
15 186 Td
(\n) Tj
ET
BT
15 175 Td
(\tbuck["hello"] = "now";\n) Tj
ET
BT
15 164 Td
(\tstd::string hstr\("hello"\);\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(\tstd::cout << buck.hash_function\(\)\(hstr\) << '\\n';\n) Tj
ET
BT
15 131 Td
(\n) Tj
ET
BT
15 120 Td
(\tstd::vector<int> digits, buf;\n) Tj
ET
BT
15 109 Td
(\n) Tj
ET
BT
15 98 Td
(\tfor \(int i = 0; i < 10; i++\)\n) Tj
ET
BT
15 87 Td
(\t{\n) Tj
ET
BT
15 76 Td
(\t\tbuf.push_back\(i\);\n) Tj
ET
BT
15 65 Td
(\t}\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(\tdigits = buf;\n) Tj
ET

endstream
endobj
507 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [508 0 R ] /Parent 2 0 R >>
endobj
508 0 obj 
<</Length 717 >>
stream
/F1 10 Tf
BT
124.75 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts.cpp) Tj
ET
BT
565 822 Td
(168) Tj
ET
BT
15 780 Td
(\tstd::reverse\(digits.begin\(\), digits.end\(\)\);\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(\tfor \(auto &i : digits\)\n) Tj
ET
BT
15 747 Td
(\t\tstd::cout << i << ';';\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(\tdigits.insert\(digits.end\(\), buf.begin\(\), buf.end\(\)\);\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(\tfor \(auto &i : digits\)\n) Tj
ET
BT
15 692 Td
(\t\tstd::cout << i << ';';\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(\treturn 1;\n) Tj
ET
BT
15 648 Td
(}\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(\n) Tj
ET

endstream
endobj
510 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [511 0 R ] /Parent 2 0 R >>
endobj
511 0 obj 
<</Length 3416 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-osip.c) Tj
ET
BT
565 822 Td
(169) Tj
ET
BT
15 780 Td
(#include <stdlib.h>\n) Tj
ET
BT
15 769 Td
(#include <sys/time.h>\n) Tj
ET
BT
15 758 Td
(#include <sys/types.h>\n) Tj
ET
BT
15 747 Td
(#include <sys/socket.h>\n) Tj
ET
BT
15 736 Td
(#include <netinet/in.h>\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(#include <osip2/osip.h>\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(#define MESSAGE_MAX_LENGTH 4000\n) Tj
ET
BT
15 681 Td
(#define MAX_ADDR_STR 128\n) Tj
ET
BT
15 670 Td
(#define MESSAGE_ENTRY_MAX_LENGTH 256\n) Tj
ET
BT
15 659 Td
(#define SIP_PORT 5060\n) Tj
ET
BT
15 648 Td
(#define EXPIRES_TIME_INSECS 3600\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(#define USER_ID "7929"\n) Tj
ET
BT
15 615 Td
(#define SIP_PROXY "sip:10.1.8.10"\n) Tj
ET
BT
15 604 Td
(#define SIP_FROM "sip:7929 at 10.1.7.110"\n) Tj
ET
BT
15 593 Td
(#define SIP_TO "sip:7929 at 10.1.7.110"\n) Tj
ET
BT
15 582 Td
(#define SIP_CONTACT "sip:7929 at 10.1.7.110"\n) Tj
ET
BT
15 571 Td
(#define LOCAL_IP "10.1.7.110"\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(osip_t *osip;\n) Tj
ET
BT
15 538 Td
(int sipSock;\n) Tj
ET
BT
15 527 Td
(\n) Tj
ET
BT
15 516 Td
(int networkInit\(\)\n) Tj
ET
BT
15 505 Td
({\n) Tj
ET
BT
15 494 Td
(\tstruct sockaddr_in address;\n) Tj
ET
BT
15 483 Td
(\tif\(\(sipSock = socket\(PF_INET, SOCK_DGRAM, 0\)\) < 0\){\n) Tj
ET
BT
15 472 Td
(\t\tperror\("networkInit: error opening socket"\);\n) Tj
ET
BT
15 461 Td
(\t\treturn -1;\n) Tj
ET
BT
15 450 Td
(\t}\n) Tj
ET
BT
15 439 Td
(\taddress.sin_family = PF_INET;\n) Tj
ET
BT
15 428 Td
(\taddress.sin_addr.s_addr = htonl\(INADDR_ANY\);\n) Tj
ET
BT
15 417 Td
(\taddress.sin_port = htons\(SIP_PORT\);\n) Tj
ET
BT
15 406 Td
(\tprintf\("sipSock = %d/n",sipSock\);\n) Tj
ET
BT
15 395 Td
(\tif\(bind\(sipSock,\(struct sockaddr *\)&address,sizeof\(address\)\) < 0\){\n) Tj
ET
BT
15 384 Td
(\t\tperror\("networkInit: error binding socket"\);\n) Tj
ET
BT
15 373 Td
(\t\treturn -1;\n) Tj
ET
BT
15 362 Td
(\t}\n) Tj
ET
BT
15 351 Td
(\n) Tj
ET
BT
15 340 Td
(\treturn 0;\n) Tj
ET
BT
15 329 Td
(}\n) Tj
ET
BT
15 318 Td
(\n) Tj
ET
BT
15 307 Td
(int networkMsgSend\(int sock,char *msgP,int msgLen,char *host,int port\)\n) Tj
ET
BT
15 296 Td
({\n) Tj
ET
BT
15 285 Td
(\tstruct sockaddr_in address;\n) Tj
ET
BT
15 274 Td
(\taddress.sin_family = PF_INET;\n) Tj
ET
BT
15 263 Td
(\taddress.sin_addr.s_addr = inet_addr\(host\);\n) Tj
ET
BT
15 252 Td
(\taddress.sin_port = htons\(port\);\n) Tj
ET
BT
15 241 Td
(\tif\(sendto\(sock,msgP,msgLen,0,\(struct sockaddr *\)&address,sizeof\(address\)\) < 0\){\n) Tj
ET
BT
15 230 Td
(\t\tperror\("networkMsgSend: sendto error"\);\n) Tj
ET
BT
15 219 Td
(\t\treturn -1;\n) Tj
ET
BT
15 208 Td
(\t}\n) Tj
ET
BT
15 197 Td
(\treturn 0;\n) Tj
ET
BT
15 186 Td
(}\n) Tj
ET
BT
15 175 Td
(\n) Tj
ET
BT
15 164 Td
(int networkMsgRecv\(int sock,char *msgP,int msgLen,struct sockaddr_in *address\)\n) Tj
ET
BT
15 153 Td
({\n) Tj
ET
BT
15 142 Td
(\tint addrLen;\n) Tj
ET
BT
15 131 Td
(\tint dataLen;\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(\tdataLen = recvfrom\(sock,msgP,msgLen,0,\(struct sockaddr *\)address,&addrLen\);\n) Tj
ET
BT
15 98 Td
(\tif\(dataLen < 0\){\n) Tj
ET
BT
15 87 Td
(\t\tperror\("networkMsgRecv: recvfrom error"\);\n) Tj
ET
BT
15 76 Td
(\t\treturn -1;\n) Tj
ET
BT
15 65 Td
(\t}\n) Tj
ET
BT
15 54 Td
(\treturn dataLen;\n) Tj
ET
BT
15 43 Td
(}\n) Tj
ET

endstream
endobj
513 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [514 0 R ] /Parent 2 0 R >>
endobj
514 0 obj 
<</Length 3543 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-osip.c) Tj
ET
BT
565 822 Td
(170) Tj
ET
BT
15 780 Td
(\n) Tj
ET
BT
15 769 Td
(int SendMsg\(osip_transaction_t *tr,osip_message_t *sip, char *host,int port, int out_socket\)\n) Tj
ET
BT
15 758 Td
({\n) Tj
ET
BT
15 747 Td
(\tint len = 0;\n) Tj
ET
BT
15 736 Td
(\tchar *msgP;\n) Tj
ET
BT
15 725 Td
(\tint msgLen;\n) Tj
ET
BT
15 714 Td
(\tint i;\n) Tj
ET
BT
15 703 Td
(\tint status;\n) Tj
ET
BT
15 692 Td
(\n) Tj
ET
BT
15 681 Td
(\tprintf\("SendMsg/n"\);\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(\tif\(\(i = osip_message_to_str\(sip, &msgP, &msgLen\)\) != 0\){\n) Tj
ET
BT
15 648 Td
(\t\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_BUG,NULL,"failed to convert message/n"\)\);\n) Tj
ET
BT
15 637 Td
(\t\treturn -1;\n) Tj
ET
BT
15 626 Td
(\t}\n) Tj
ET
BT
15 615 Td
(\tif\(!networkMsgSend\(sipSock,msgP,strlen\(msgP\),host,port\)\)\n) Tj
ET
BT
15 604 Td
(\t\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_INFO1,NULL,"Time: Udp message sent: /n%s/n",msgP\)\);\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(\treturn 0;\n) Tj
ET
BT
15 571 Td
(}\n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(void cb_rcvICTRes\(int type, osip_transaction_t *pott,osip_message_t *pomt\)\n) Tj
ET
BT
15 527 Td
({\n) Tj
ET
BT
15 516 Td
(\tprintf\("cb_rcvICTRes/n"\);\n) Tj
ET
BT
15 505 Td
(}\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(void cb_rcvNICTRes\(int type, osip_transaction_t *pott,osip_message_t *pomt\)\n) Tj
ET
BT
15 472 Td
({\n) Tj
ET
BT
15 461 Td
(\tprintf\("cb_rcvNICTRes/n"\);\n) Tj
ET
BT
15 450 Td
(}\n) Tj
ET
BT
15 439 Td
(\n) Tj
ET
BT
15 428 Td
(void cb_rcvreq\(int type, osip_transaction_t *pott,osip_message_t *pomt\)\n) Tj
ET
BT
15 417 Td
({\n) Tj
ET
BT
15 406 Td
(\tprintf\("cb_rcvreq/n"\);\n) Tj
ET
BT
15 395 Td
(}\n) Tj
ET
BT
15 384 Td
(\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(void setCallbacks\(osip_t *osip\)\n) Tj
ET
BT
15 351 Td
({\n) Tj
ET
BT
15 340 Td
(\tosip_set_cb_send_message\(osip,SendMsg\);\n) Tj
ET
BT
15 329 Td
(\tosip_set_message_callback\(osip,OSIP_ICT_STATUS_1XX_RECEIVED,cb_rcvICTRes\);\n) Tj
ET
BT
15 318 Td
(\tosip_set_message_callback\(osip,OSIP_NICT_STATUS_1XX_RECEIVED,cb_rcvNICTRes\);\n) Tj
ET
BT
15 307 Td
(\tosip_set_message_callback\(osip,OSIP_IST_INVITE_RECEIVED,cb_rcvreq\);\n) Tj
ET
BT
15 296 Td
(}\n) Tj
ET
BT
15 285 Td
(\n) Tj
ET
BT
15 274 Td
(int AddSupportedMethods\(osip_message_t *msgPtr\)\n) Tj
ET
BT
15 263 Td
({\n) Tj
ET
BT
15 252 Td
(\tosip_message_set_allow\(msgPtr, "INVITE"\);\n) Tj
ET
BT
15 241 Td
(\tosip_message_set_allow\(msgPtr, "INFO"\);\n) Tj
ET
BT
15 230 Td
(\tosip_message_set_allow\(msgPtr, "ACK"\);\n) Tj
ET
BT
15 219 Td
(\tosip_message_set_allow\(msgPtr, "CANCEL"\);\n) Tj
ET
BT
15 208 Td
(\tosip_message_set_allow\(msgPtr, "BYE"\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(\treturn 0;\n) Tj
ET
BT
15 175 Td
(}\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(int bSipSend\(\n) Tj
ET
BT
15 142 Td
(\t\t\t\t\t\t osip_message_t    *msgPtr,\n) Tj
ET
BT
15 131 Td
(\t\t\t\t\t\t osip_fsm_type_t   transactionType\)\n) Tj
ET
BT
15 120 Td
({\n) Tj
ET
BT
15 109 Td
(\tint status;\n) Tj
ET
BT
15 98 Td
(\tosip_transaction_t *transactionPtr;\n) Tj
ET
BT
15 87 Td
(\tosip_event_t       *sipeventPtr;\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(\tif \( \(status = osip_transaction_init\(&transactionPtr,transactionType,osip,msgPtr\)\) != 0 \){\n) Tj
ET
BT
15 54 Td
(\t\tprintf\("Failed to init transaction %d",status\);\n) Tj
ET
BT
15 43 Td
(\t\treturn -1;\n) Tj
ET

endstream
endobj
516 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [517 0 R ] /Parent 2 0 R >>
endobj
517 0 obj 
<</Length 3702 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-osip.c) Tj
ET
BT
565 822 Td
(171) Tj
ET
BT
15 780 Td
(\t}\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(\tif\(\(sipeventPtr = osip_new_outgoing_sipmessage\(msgPtr\)\) == NULL\){\n) Tj
ET
BT
15 747 Td
(\t\tprintf\("Can't allocate message"\);\n) Tj
ET
BT
15 736 Td
(\t\tosip_message_free\(msgPtr\);\n) Tj
ET
BT
15 725 Td
(\t\treturn -1;\n) Tj
ET
BT
15 714 Td
(\t}\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(\tsipeventPtr->transactionid =  transactionPtr->transactionid;\n) Tj
ET
BT
15 681 Td
(\n) Tj
ET
BT
15 670 Td
(\n) Tj
ET
BT
15 659 Td
(\tif\(\(status = osip_message_force_update\(msgPtr\)\) != 0\){\n) Tj
ET
BT
15 648 Td
(\t\tprintf\("Failed force update",status\);\n) Tj
ET
BT
15 637 Td
(\t\tosip_message_free\(msgPtr\);\n) Tj
ET
BT
15 626 Td
(\t\treturn -1;\n) Tj
ET
BT
15 615 Td
(\t}\n) Tj
ET
BT
15 604 Td
(\n) Tj
ET
BT
15 593 Td
(\tif\(\(status = osip_transaction_add_event\(transactionPtr, sipeventPtr\)\) != 0\){\n) Tj
ET
BT
15 582 Td
(\t\tprintf\("Can't add event"\);\n) Tj
ET
BT
15 571 Td
(\t\tosip_message_free\(msgPtr\);\n) Tj
ET
BT
15 560 Td
(\t\treturn -1;\n) Tj
ET
BT
15 549 Td
(\t}\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(\treturn 0;\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(}\n) Tj
ET
BT
15 494 Td
(\n) Tj
ET
BT
15 483 Td
(int bSipRegisterBuild\(osip_message_t **regMsgPtrPtr\)\n) Tj
ET
BT
15 472 Td
({\n) Tj
ET
BT
15 461 Td
(\tstatic int gSeqNum = 1;\n) Tj
ET
BT
15 450 Td
(\tint status;\n) Tj
ET
BT
15 439 Td
(\tchar *callidNumberStr = NULL;\n) Tj
ET
BT
15 428 Td
(\tchar *seqNumStr = NULL;\n) Tj
ET
BT
15 417 Td
(\tosip_call_id_t *callidPtr;\n) Tj
ET
BT
15 406 Td
(\tchar temp[MESSAGE_ENTRY_MAX_LENGTH];\n) Tj
ET
BT
15 395 Td
(\tchar sipPort[MESSAGE_ENTRY_MAX_LENGTH];\n) Tj
ET
BT
15 384 Td
(\tosip_cseq_t *cseqPtr;\n) Tj
ET
BT
15 373 Td
(\tunsigned int number;\n) Tj
ET
BT
15 362 Td
(\tosip_message_t     *regMsgPtr;\n) Tj
ET
BT
15 351 Td
(\tchar expires[10]; \n) Tj
ET
BT
15 340 Td
(\n) Tj
ET
BT
15 329 Td
(\tif\(\(status = osip_message_init\(&regMsgPtr\)\) != 0\){\n) Tj
ET
BT
15 318 Td
(\t\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_BUG,NULL,"Can't init message!/n"\)\);\n) Tj
ET
BT
15 307 Td
(\t\treturn -1;\n) Tj
ET
BT
15 296 Td
(\t}\n) Tj
ET
BT
15 285 Td
(\tosip_message_set_method\(regMsgPtr, osip_strdup\("REGISTER"\)\);\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(\tosip_uri_init\(&\(regMsgPtr->req_uri\)\);\n) Tj
ET
BT
15 252 Td
(\tif \( \( status = osip_uri_parse\(regMsgPtr->req_uri, SIP_PROXY\) \) != 0\)\n) Tj
ET
BT
15 241 Td
(\t{\n) Tj
ET
BT
15 230 Td
(\t\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_BUG,NULL,"uri parse failed!/n"\)\);\n) Tj
ET
BT
15 219 Td
(\t\tosip_message_free\(regMsgPtr\);\n) Tj
ET
BT
15 208 Td
(\t\treturn -1;\n) Tj
ET
BT
15 197 Td
(\t}\n) Tj
ET
BT
15 186 Td
(\tosip_message_set_version\(regMsgPtr, osip_strdup\("SIP/2.0"\)\);\n) Tj
ET
BT
15 175 Td
(\tosip_message_set_status_code\(regMsgPtr, 0\);\n) Tj
ET
BT
15 164 Td
(\tosip_message_set_reason_phrase\(regMsgPtr, NULL\);\n) Tj
ET
BT
15 153 Td
(\n) Tj
ET
BT
15 142 Td
(\tosip_message_set_to\(regMsgPtr, SIP_TO\);\n) Tj
ET
BT
15 131 Td
(\tosip_message_set_from\(regMsgPtr, SIP_FROM\);\n) Tj
ET
BT
15 120 Td
(\n) Tj
ET
BT
15 109 Td
(\tif\(\(status = osip_call_id_init\(&callidPtr\)\) != 0 \){\n) Tj
ET
BT
15 98 Td
(\t\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_BUG,NULL,"call id failed!/n"\)\);\n) Tj
ET
BT
15 87 Td
(\t\tosip_message_free\(regMsgPtr\);\n) Tj
ET
BT
15 76 Td
(\t\treturn -1;\n) Tj
ET
BT
15 65 Td
(\t}\n) Tj
ET
BT
15 54 Td
(\tcallidNumberStr = \(char *\)osip_malloc\(MAX_ADDR_STR\);\n) Tj
ET
BT
15 43 Td
(\tnumber = osip_build_random_number\(\);\n) Tj
ET

endstream
endobj
519 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [520 0 R ] /Parent 2 0 R >>
endobj
520 0 obj 
<</Length 3569 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-osip.c) Tj
ET
BT
565 822 Td
(172) Tj
ET
BT
15 780 Td
(\tsprintf\(callidNumberStr,"%u",number\);\n) Tj
ET
BT
15 769 Td
(\tosip_call_id_set_number\(callidPtr, callidNumberStr\);\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(\tosip_call_id_set_host\(callidPtr, osip_strdup\("10.1.1.63"\)\);\n) Tj
ET
BT
15 736 Td
(\n) Tj
ET
BT
15 725 Td
(\tregMsgPtr->call_id = callidPtr;\n) Tj
ET
BT
15 714 Td
(\n) Tj
ET
BT
15 703 Td
(\tif\(\(status = osip_cseq_init\(&cseqPtr\)\) != 0 \){\n) Tj
ET
BT
15 692 Td
(\t\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_BUG,NULL,"seq init failed!/n"\)\);\n) Tj
ET
BT
15 681 Td
(\t\tosip_message_free\(regMsgPtr\);\n) Tj
ET
BT
15 670 Td
(\t\treturn -1;\n) Tj
ET
BT
15 659 Td
(\t}\n) Tj
ET
BT
15 648 Td
(\tgSeqNum++;\n) Tj
ET
BT
15 637 Td
(\tseqNumStr = \(char *\)osip_malloc\(MAX_ADDR_STR\);\n) Tj
ET
BT
15 626 Td
(\tsprintf\(seqNumStr,"%i", gSeqNum\);\n) Tj
ET
BT
15 615 Td
(\tosip_cseq_set_number\(cseqPtr, seqNumStr\);\n) Tj
ET
BT
15 604 Td
(\tosip_cseq_set_method\(cseqPtr, osip_strdup\("REGISTER"\)\);\n) Tj
ET
BT
15 593 Td
(\tregMsgPtr->cseq = cseqPtr;\n) Tj
ET
BT
15 582 Td
(\n) Tj
ET
BT
15 571 Td
(\tosip_message_set_max_forwards\(regMsgPtr, "70"\); \n) Tj
ET
BT
15 560 Td
(\n) Tj
ET
BT
15 549 Td
(\tsprintf\(sipPort, "%i", SIP_PORT\);\n) Tj
ET
BT
15 538 Td
(\tsprintf\(temp, "SIP/2.0/%s %s;branch=z9hG4bK%u", "UDP",LOCAL_IP,osip_build_random_number\(\) \);\n) Tj
ET
BT
15 527 Td
(\tosip_message_set_via\(regMsgPtr, temp\);\n) Tj
ET
BT
15 516 Td
(\n) Tj
ET
BT
15 505 Td
(\tosip_message_set_contact\(regMsgPtr, SIP_CONTACT\);\n) Tj
ET
BT
15 494 Td
(\tsprintf\(expires, "%i", EXPIRES_TIME_INSECS\);\n) Tj
ET
BT
15 483 Td
(\tosip_message_set_expires\(regMsgPtr, expires\);\n) Tj
ET
BT
15 472 Td
(\n) Tj
ET
BT
15 461 Td
(\tosip_message_set_content_length\(regMsgPtr, "0"\);\n) Tj
ET
BT
15 450 Td
(\n) Tj
ET
BT
15 439 Td
(\tosip_message_set_user_agent\(regMsgPtr, "TotalView 1.0"\);\n) Tj
ET
BT
15 428 Td
(\n) Tj
ET
BT
15 417 Td
(\tAddSupportedMethods\(regMsgPtr\);\n) Tj
ET
BT
15 406 Td
(\t*regMsgPtrPtr = regMsgPtr;\n) Tj
ET
BT
15 395 Td
(\treturn 0;\n) Tj
ET
BT
15 384 Td
(}\n) Tj
ET
BT
15 373 Td
(\n) Tj
ET
BT
15 362 Td
(int bSipRegister\(void *cookie\)\n) Tj
ET
BT
15 351 Td
({\n) Tj
ET
BT
15 340 Td
(\tosip_message_t *regMsgPtr;\n) Tj
ET
BT
15 329 Td
(\n) Tj
ET
BT
15 318 Td
(\tif\(bSipRegisterBuild\(&regMsgPtr\) != 0\){\n) Tj
ET
BT
15 307 Td
(\t\tprintf\("Error building register message!"\);\n) Tj
ET
BT
15 296 Td
(\t\treturn -1;\n) Tj
ET
BT
15 285 Td
(\t}\n) Tj
ET
BT
15 274 Td
(\n) Tj
ET
BT
15 263 Td
(\tif \(bSipSend\(regMsgPtr,NICT\) != 0\){\n) Tj
ET
BT
15 252 Td
(\t\tprintf\("Error sending message!"\);\n) Tj
ET
BT
15 241 Td
(\t\treturn -1;\n) Tj
ET
BT
15 230 Td
(\t}\n) Tj
ET
BT
15 219 Td
(\treturn 0;\n) Tj
ET
BT
15 208 Td
(}\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(void processSipMsg\(\)\n) Tj
ET
BT
15 175 Td
({\n) Tj
ET
BT
15 164 Td
(\tint port;\n) Tj
ET
BT
15 153 Td
(\tchar host[256];\n) Tj
ET
BT
15 142 Td
(\tchar msg[MESSAGE_MAX_LENGTH];\n) Tj
ET
BT
15 131 Td
(\tint msgLen;\n) Tj
ET
BT
15 120 Td
(\tosip_event_t *sipevent;\n) Tj
ET
BT
15 109 Td
(\tosip_transaction_t *transaction = NULL;\n) Tj
ET
BT
15 98 Td
(\tstruct sockaddr_in sa;\n) Tj
ET
BT
15 87 Td
(\tint status;\n) Tj
ET
BT
15 76 Td
(\n) Tj
ET
BT
15 65 Td
(\tif\(\(msgLen = networkMsgRecv\(sipSock,msg,MESSAGE_MAX_LENGTH,&sa\)\) > 0\){\n) Tj
ET
BT
15 54 Td
(\t\tprintf\("processSipMsg: RECEIVED MSG/n"\);\n) Tj
ET
BT
15 43 Td
(\t\tprintf\("%s/n",msg\);\n) Tj
ET

endstream
endobj
522 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [523 0 R ] /Parent 2 0 R >>
endobj
523 0 obj 
<</Length 3612 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-osip.c) Tj
ET
BT
565 822 Td
(173) Tj
ET
BT
15 780 Td
(\t\tsipevent = osip_parse\(msg,msgLen\);\n) Tj
ET
BT
15 769 Td
(\t\tif\(\(sipevent==NULL\)||\(sipevent->sip==NULL\)\){\n) Tj
ET
BT
15 758 Td
(\t\t\tprintf\("Could not parse SIP message/n"\);\n) Tj
ET
BT
15 747 Td
(\t\t\tosip_event_free\(sipevent\);\n) Tj
ET
BT
15 736 Td
(\t\t\treturn;\n) Tj
ET
BT
15 725 Td
(\t\t}\n) Tj
ET
BT
15 714 Td
(\t}\n) Tj
ET
BT
15 703 Td
(\tosip_message_fix_last_via_header\(sipevent->sip,\(char *\)inet_ntoa\(sa.sin_addr\),ntohs\(sa.sin_port\)\);\n) Tj
ET
BT
15 692 Td
(\tif\(\(status = osip_find_transaction_and_add_event\(osip,sipevent\)\) != 0\){\n) Tj
ET
BT
15 681 Td
(\t\tprintf\("New transaction!/n"\);\n) Tj
ET
BT
15 670 Td
(\t\tif\(MSG_IS_REQUEST\(sipevent->sip\)\){\n) Tj
ET
BT
15 659 Td
(\t\t\tprintf\("Got New Request/n"\);;\n) Tj
ET
BT
15 648 Td
(\t\t}else if\(MSG_IS_RESPONSE\(sipevent->sip\)\){\n) Tj
ET
BT
15 637 Td
(\t\t\tprintf\("Bad Message:%s/n",msg\);\n) Tj
ET
BT
15 626 Td
(\t\t\tosip_event_free\(sipevent\);\n) Tj
ET
BT
15 615 Td
(\t\t}else{\n) Tj
ET
BT
15 604 Td
(\t\t\tprintf\("Unsupported message:%s/n",msg\);\n) Tj
ET
BT
15 593 Td
(\t\t\tosip_event_free\(sipevent\);\n) Tj
ET
BT
15 582 Td
(\t\t}\n) Tj
ET
BT
15 571 Td
(\t}\n) Tj
ET
BT
15 560 Td
(}\n) Tj
ET
BT
15 549 Td
(\n) Tj
ET
BT
15 538 Td
(int main\(\)\n) Tj
ET
BT
15 527 Td
({\n) Tj
ET
BT
15 516 Td
(\tint i,result;\n) Tj
ET
BT
15 505 Td
(\tfd_set readfds;\n) Tj
ET
BT
15 494 Td
(\tstruct timeval tv;\n) Tj
ET
BT
15 483 Td
(\tprintf\("Initializing OSIP/n"\);\n) Tj
ET
BT
15 472 Td
(\tTRACE_INITIALIZE\(END_TRACE_LEVEL,NULL\);\n) Tj
ET
BT
15 461 Td
(\tif\(networkInit\(\) < 0\){\n) Tj
ET
BT
15 450 Td
(\t\tprintf\("ERROR Initializing NETWORK/n"\);\n) Tj
ET
BT
15 439 Td
(\t\treturn -1;\n) Tj
ET
BT
15 428 Td
(\t}\n) Tj
ET
BT
15 417 Td
(\ti=osip_init\(&osip\);\n) Tj
ET
BT
15 406 Td
(\tif \(i!=0\)\n) Tj
ET
BT
15 395 Td
(\t\treturn -1;\n) Tj
ET
BT
15 384 Td
(\tprintf\("Setting Callbacks/n"\);\n) Tj
ET
BT
15 373 Td
(\tsetCallbacks\(osip\);\n) Tj
ET
BT
15 362 Td
(\tprintf\("Entering Main loop 1/n"\);\n) Tj
ET
BT
15 351 Td
(\tOSIP_TRACE\(osip_trace\(__FILE__,__LINE__,OSIP_BUG,NULL,"Check OSIP_TRACE init/n"\)\);\n) Tj
ET
BT
15 340 Td
(\tbSipRegister\("This is Test Cookie"\);\n) Tj
ET
BT
15 329 Td
(\twhile\(1\){\n) Tj
ET
BT
15 318 Td
(\t\tFD_ZERO\(&readfds\);\n) Tj
ET
BT
15 307 Td
(\t\tFD_SET\(sipSock,&readfds\);\n) Tj
ET
BT
15 296 Td
(\t\ttv.tv_sec = 0;\n) Tj
ET
BT
15 285 Td
(\t\ttv.tv_usec = 100000;\n) Tj
ET
BT
15 274 Td
(\t\tresult = select\(FD_SETSIZE,&readfds,0,0,&tv\);\n) Tj
ET
BT
15 263 Td
(\t\tif\(result < 0\){\n) Tj
ET
BT
15 252 Td
(\t\t\tperror\("main: select error"\);\n) Tj
ET
BT
15 241 Td
(\t\t\texit\(1\);\n) Tj
ET
BT
15 230 Td
(\t\t}\n) Tj
ET
BT
15 219 Td
(\t\tif\(FD_ISSET\(sipSock,&readfds\)\){\n) Tj
ET
BT
15 208 Td
(\t\t\tprintf\("main: Received SIP message/n"\);\n) Tj
ET
BT
15 197 Td
(\t\t\tprocessSipMsg\(\);\n) Tj
ET
BT
15 186 Td
(\t\t}\n) Tj
ET
BT
15 175 Td
(\t\tosip_ict_execute\(osip\);\n) Tj
ET
BT
15 164 Td
(\t\tosip_ist_execute\(osip\);\n) Tj
ET
BT
15 153 Td
(\t\tosip_nict_execute\(osip\);\n) Tj
ET
BT
15 142 Td
(\t\tosip_nist_execute\(osip\);\n) Tj
ET
BT
15 131 Td
(\t\tosip_timers_ict_execute\(osip\);\n) Tj
ET
BT
15 120 Td
(\t\tosip_timers_ist_execute\(osip\);\n) Tj
ET
BT
15 109 Td
(\t\tosip_timers_nict_execute\(osip\);\n) Tj
ET
BT
15 98 Td
(\t\tosip_timers_nist_execute\(osip\);\n) Tj
ET
BT
15 87 Td
(\t}\n) Tj
ET
BT
15 76 Td
(\treturn 0;\n) Tj
ET
BT
15 65 Td
(}\n) Tj
ET
BT
15 54 Td
(\n) Tj
ET
BT
15 43 Td
(\n) Tj
ET

endstream
endobj
525 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [526 0 R ] /Parent 2 0 R >>
endobj
526 0 obj 
<</Length 915 >>
stream
/F1 10 Tf
BT
124 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-osip.c) Tj
ET
BT
565 822 Td
(174) Tj
ET
BT
15 780 Td
(/-------------------------------------------------------------------\n) Tj
ET
BT
15 769 Td
(\n) Tj
ET
BT
15 758 Td
(\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(Hi,\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(I am new to OSIP Stack.\n) Tj
ET
BT
15 703 Td
(I am writing a small user agent.\n) Tj
ET
BT
15 692 Td
(I have initialised osip stack and formed a sip message.\n) Tj
ET
BT
15 681 Td
(I have initialised a transaction, but after this how do I sent this message to the UAS.\n) Tj
ET
BT
15 670 Td
(Please let me know the API used to send the message to the UAS.\n) Tj
ET
BT
15 659 Td
(\n) Tj
ET
BT
15 648 Td
(Is there a transport layer in OSIP Stack or not?\n) Tj
ET
BT
15 637 Td
(\n) Tj
ET
BT
15 626 Td
(Should I create a socket to the Server and send?\n) Tj
ET

endstream
endobj
528 0 obj 
<</Type /Page /LastModified (D:20141028101816-07'00') /Resources <</ProcSet [/Text ] /Font <</F1 8 0 R >> >> /MediaBox [0 0 595 842 ] 
/Contents [529 0 R ] /Parent 2 0 R >>
endobj
529 0 obj 
<</Length 2764 >>
stream
/F1 10 Tf
BT
123.25 822 Td
(Tue Oct 2014 10:10:15  EasySipTs-v123.44.567-EasySipTs/test/ts-proxy.cpp) Tj
ET
BT
565 822 Td
(175) Tj
ET
BT
15 780 Td
(#include "Element/proxy.h"\n) Tj
ET
BT
15 769 Td
(#include <iostream>\n) Tj
ET
BT
15 758 Td
(#include <thread>\n) Tj
ET
BT
15 747 Td
(\n) Tj
ET
BT
15 736 Td
(using namespace EasySip;\n) Tj
ET
BT
15 725 Td
(\n) Tj
ET
BT
15 714 Td
(Proxy proxy;\n) Tj
ET
BT
15 703 Td
(\n) Tj
ET
BT
15 692 Td
(void rxd\(\)\n) Tj
ET
BT
15 681 Td
({\n) Tj
ET
BT
15 670 Td
(\tproxy.start\(\);\n) Tj
ET
BT
15 659 Td
(}\n) Tj
ET
BT
15 648 Td
(\n) Tj
ET
BT
15 637 Td
(void txd\(\)\n) Tj
ET
BT
15 626 Td
({\n) Tj
ET
BT
15 615 Td
(\tchar c;\n) Tj
ET
BT
15 604 Td
(\tint run = 1;\n) Tj
ET
BT
15 593 Td
(\n) Tj
ET
BT
15 582 Td
(\twhile \(run\)\n) Tj
ET
BT
15 571 Td
(\t{\n) Tj
ET
BT
15 560 Td
(\t\tstd::cout << "input command: ";\n) Tj
ET
BT
15 549 Td
(\t\tstd::cin >> c;\n) Tj
ET
BT
15 538 Td
(\n) Tj
ET
BT
15 527 Td
(\t\tswitch \(c\)\n) Tj
ET
BT
15 516 Td
(\t\t{\n) Tj
ET
BT
15 505 Td
(\t\t\tcase 'i': proxy.invite_request\(\); break;\n) Tj
ET
BT
15 494 Td
(\t\t\tcase 'r': proxy.register_request\(\); break;\n) Tj
ET
BT
15 483 Td
(\t\t\tcase 'b': proxy.bye_request\(\); break;\n) Tj
ET
BT
15 472 Td
(\t\t\tcase 'c': proxy.cancel_request\(\); break;\n) Tj
ET
BT
15 461 Td
(\t\t\tcase 'u': proxy.update_request\(\); break;\n) Tj
ET
BT
15 450 Td
(\t\t\tcase 'f': proxy.info_request\(\); break;\n) Tj
ET
BT
15 439 Td
(\t\t\tcase 'a': proxy.ack_request\(\); break;\n) Tj
ET
BT
15 428 Td
(\t\t\tcase 'm': proxy.message_request\(\); break;\n) Tj
ET
BT
15 417 Td
(\t\t\tcase 's': proxy.subscribe_request\(\); break;\n) Tj
ET
BT
15 406 Td
(\t\t\tcase 'n': proxy.notify_request\(\); break;\n) Tj
ET
BT
15 395 Td
(\t\t\tcase 'e': proxy.refer_request\(\); break;\n) Tj
ET
BT
15 384 Td
(\t\t\tcase 'o': proxy.options_request\(\); break;\n) Tj
ET
BT
15 373 Td
(\t\t\tcase 'k': proxy.prack_request\(\); break;\n) Tj
ET
BT
15 362 Td
(\t\t\tcase 'q':\n) Tj
ET
BT
15 351 Td
(\t\t\t\tPROGRESS_WITH_FEEDBACK\("shutdown", proxy.run\(\), proxy.run\(false\)\)\n) Tj
ET
BT
15 340 Td
(\t\t\t\trun = 0; break;\n) Tj
ET
BT
15 329 Td
(\t\t\tdefault:\n) Tj
ET
BT
15 318 Td
(\t\t\t{\n) Tj
ET
BT
15 307 Td
(\t\t\t\tstd::cerr << "Unexpected command '" << c << "\(" << int\(c\) << "\)\\n";\n) Tj
ET
BT
15 296 Td
(\t\t\t}\n) Tj
ET
BT
15 285 Td
(\t\t}\n) Tj
ET
BT
15 274 Td
(\t}\n) Tj
ET
BT
15 263 Td
(}\n) Tj
ET
BT
15 252 Td
(\n) Tj
ET
BT
15 241 Td
(int main\(\)\n) Tj
ET
BT
15 230 Td
({\n) Tj
ET
BT
15 219 Td
(\tstd::thread tx\(txd\);\n) Tj
ET
BT
15 208 Td
(\tstd::thread rx\(rxd\);\n) Tj
ET
BT
15 197 Td
(\n) Tj
ET
BT
15 186 Td
(\ttx.join\(\);\n) Tj
ET
BT
15 175 Td
(\trx.join\(\);\n) Tj
ET
BT
15 164 Td
(\n) Tj
ET
BT
15 153 Td
(\treturn 0;\n) Tj
ET
BT
15 142 Td
(}\n) Tj
ET

endstream
endobj
xref
0 11 
0000000000 65535 f 
0000000015 00000 n 
0000000091 00000 n 
0000001522 00000 n 
0000001541 00000 n 
0000001575 00000 n 
0000001609 00000 n 
0000001796 00000 n 
0000003661 00000 n 
0000003758 00000 n 
0000003946 00000 n 
12 2 
0000007884 00000 n 
0000008073 00000 n 
15 2 
0000011841 00000 n 
0000012030 00000 n 
18 2 
0000016722 00000 n 
0000016911 00000 n 
21 2 
0000019769 00000 n 
0000019958 00000 n 
24 2 
0000022735 00000 n 
0000022924 00000 n 
27 2 
0000023436 00000 n 
0000023625 00000 n 
30 2 
0000026925 00000 n 
0000027114 00000 n 
33 2 
0000030327 00000 n 
0000030516 00000 n 
36 2 
0000034030 00000 n 
0000034219 00000 n 
39 2 
0000037601 00000 n 
0000037790 00000 n 
42 2 
0000041336 00000 n 
0000041525 00000 n 
45 2 
0000044753 00000 n 
0000044942 00000 n 
48 2 
0000048119 00000 n 
0000048308 00000 n 
51 2 
0000051851 00000 n 
0000052040 00000 n 
54 2 
0000055256 00000 n 
0000055445 00000 n 
57 2 
0000058937 00000 n 
0000059126 00000 n 
60 2 
0000062298 00000 n 
0000062487 00000 n 
63 2 
0000065774 00000 n 
0000065963 00000 n 
66 2 
0000069423 00000 n 
0000069612 00000 n 
69 2 
0000072929 00000 n 
0000073118 00000 n 
72 2 
0000076376 00000 n 
0000076565 00000 n 
75 2 
0000079724 00000 n 
0000079913 00000 n 
78 2 
0000083164 00000 n 
0000083353 00000 n 
81 2 
0000086793 00000 n 
0000086982 00000 n 
84 2 
0000091133 00000 n 
0000091322 00000 n 
87 2 
0000093730 00000 n 
0000093919 00000 n 
90 2 
0000096702 00000 n 
0000096891 00000 n 
93 2 
0000099721 00000 n 
0000099910 00000 n 
96 2 
0000102975 00000 n 
0000103164 00000 n 
99 2 
0000103351 00000 n 
0000103541 00000 n 
102 2 
0000106630 00000 n 
0000106821 00000 n 
105 2 
0000110739 00000 n 
0000110930 00000 n 
108 2 
0000111412 00000 n 
0000111603 00000 n 
111 2 
0000114729 00000 n 
0000114920 00000 n 
114 2 
0000118767 00000 n 
0000118958 00000 n 
117 2 
0000122847 00000 n 
0000123038 00000 n 
120 2 
0000127750 00000 n 
0000127941 00000 n 
123 2 
0000130912 00000 n 
0000131103 00000 n 
126 2 
0000133402 00000 n 
0000133593 00000 n 
129 2 
0000136799 00000 n 
0000136990 00000 n 
132 2 
0000140065 00000 n 
0000140256 00000 n 
135 2 
0000143250 00000 n 
0000143441 00000 n 
138 2 
0000144432 00000 n 
0000144623 00000 n 
141 2 
0000147392 00000 n 
0000147583 00000 n 
144 2 
0000149028 00000 n 
0000149219 00000 n 
147 2 
0000152557 00000 n 
0000152748 00000 n 
150 2 
0000156008 00000 n 
0000156199 00000 n 
153 2 
0000159326 00000 n 
0000159517 00000 n 
156 2 
0000160541 00000 n 
0000160732 00000 n 
159 2 
0000164205 00000 n 
0000164396 00000 n 
162 2 
0000168002 00000 n 
0000168193 00000 n 
165 2 
0000171143 00000 n 
0000171334 00000 n 
168 2 
0000174172 00000 n 
0000174363 00000 n 
171 2 
0000177400 00000 n 
0000177591 00000 n 
174 2 
0000178981 00000 n 
0000179172 00000 n 
177 2 
0000180187 00000 n 
0000180378 00000 n 
180 2 
0000183386 00000 n 
0000183577 00000 n 
183 2 
0000186551 00000 n 
0000186742 00000 n 
186 2 
0000190434 00000 n 
0000190625 00000 n 
189 2 
0000193784 00000 n 
0000193975 00000 n 
192 2 
0000194968 00000 n 
0000195159 00000 n 
195 2 
0000200833 00000 n 
0000201024 00000 n 
198 2 
0000203289 00000 n 
0000203480 00000 n 
201 2 
0000206410 00000 n 
0000206601 00000 n 
204 2 
0000211155 00000 n 
0000211346 00000 n 
207 2 
0000214896 00000 n 
0000215087 00000 n 
210 2 
0000218197 00000 n 
0000218388 00000 n 
213 2 
0000221545 00000 n 
0000221736 00000 n 
216 2 
0000224901 00000 n 
0000225092 00000 n 
219 2 
0000228414 00000 n 
0000228605 00000 n 
222 2 
0000231860 00000 n 
0000232051 00000 n 
225 2 
0000235308 00000 n 
0000235499 00000 n 
228 2 
0000238767 00000 n 
0000238958 00000 n 
231 2 
0000241179 00000 n 
0000241370 00000 n 
234 2 
0000242079 00000 n 
0000242270 00000 n 
237 2 
0000245309 00000 n 
0000245500 00000 n 
240 2 
0000248794 00000 n 
0000248985 00000 n 
243 2 
0000252284 00000 n 
0000252475 00000 n 
246 2 
0000255757 00000 n 
0000255948 00000 n 
249 2 
0000259265 00000 n 
0000259456 00000 n 
252 2 
0000262945 00000 n 
0000263136 00000 n 
255 2 
0000267991 00000 n 
0000268182 00000 n 
258 2 
0000271817 00000 n 
0000272008 00000 n 
261 2 
0000278843 00000 n 
0000279034 00000 n 
264 2 
0000283214 00000 n 
0000283405 00000 n 
267 2 
0000286750 00000 n 
0000286941 00000 n 
270 2 
0000290474 00000 n 
0000290665 00000 n 
273 2 
0000294252 00000 n 
0000294443 00000 n 
276 2 
0000297962 00000 n 
0000298153 00000 n 
279 2 
0000298849 00000 n 
0000299040 00000 n 
282 2 
0000300691 00000 n 
0000300882 00000 n 
285 2 
0000304504 00000 n 
0000304695 00000 n 
288 2 
0000308152 00000 n 
0000308343 00000 n 
291 2 
0000312154 00000 n 
0000312345 00000 n 
294 2 
0000315989 00000 n 
0000316180 00000 n 
297 2 
0000319601 00000 n 
0000319792 00000 n 
300 2 
0000323391 00000 n 
0000323582 00000 n 
303 2 
0000327159 00000 n 
0000327350 00000 n 
306 2 
0000331096 00000 n 
0000331287 00000 n 
309 2 
0000334653 00000 n 
0000334844 00000 n 
312 2 
0000338747 00000 n 
0000338938 00000 n 
315 2 
0000342586 00000 n 
0000342777 00000 n 
318 2 
0000346552 00000 n 
0000346743 00000 n 
321 2 
0000350205 00000 n 
0000350396 00000 n 
324 2 
0000353897 00000 n 
0000354088 00000 n 
327 2 
0000357578 00000 n 
0000357769 00000 n 
330 2 
0000361463 00000 n 
0000361654 00000 n 
333 2 
0000365573 00000 n 
0000365764 00000 n 
336 2 
0000369412 00000 n 
0000369603 00000 n 
339 2 
0000372940 00000 n 
0000373131 00000 n 
342 2 
0000376683 00000 n 
0000376874 00000 n 
345 2 
0000380465 00000 n 
0000380656 00000 n 
348 2 
0000384367 00000 n 
0000384558 00000 n 
351 2 
0000388608 00000 n 
0000388799 00000 n 
354 2 
0000392282 00000 n 
0000392473 00000 n 
357 2 
0000398112 00000 n 
0000398303 00000 n 
360 2 
0000400038 00000 n 
0000400229 00000 n 
363 2 
0000402983 00000 n 
0000403174 00000 n 
366 2 
0000406378 00000 n 
0000406569 00000 n 
369 2 
0000410047 00000 n 
0000410238 00000 n 
372 2 
0000411474 00000 n 
0000411665 00000 n 
375 2 
0000416377 00000 n 
0000416568 00000 n 
378 2 
0000421077 00000 n 
0000421268 00000 n 
381 2 
0000425028 00000 n 
0000425219 00000 n 
384 2 
0000428868 00000 n 
0000429059 00000 n 
387 2 
0000432621 00000 n 
0000432812 00000 n 
390 2 
0000436358 00000 n 
0000436549 00000 n 
393 2 
0000439947 00000 n 
0000440138 00000 n 
396 2 
0000444243 00000 n 
0000444434 00000 n 
399 2 
0000448039 00000 n 
0000448230 00000 n 
402 2 
0000452229 00000 n 
0000452420 00000 n 
405 2 
0000456732 00000 n 
0000456923 00000 n 
408 2 
0000460652 00000 n 
0000460843 00000 n 
411 2 
0000464218 00000 n 
0000464409 00000 n 
414 2 
0000468499 00000 n 
0000468690 00000 n 
417 2 
0000472331 00000 n 
0000472522 00000 n 
420 2 
0000475933 00000 n 
0000476124 00000 n 
423 2 
0000479540 00000 n 
0000479731 00000 n 
426 2 
0000482266 00000 n 
0000482457 00000 n 
429 2 
0000485321 00000 n 
0000485512 00000 n 
432 2 
0000489184 00000 n 
0000489375 00000 n 
435 2 
0000492961 00000 n 
0000493152 00000 n 
438 2 
0000496504 00000 n 
0000496695 00000 n 
441 2 
0000496960 00000 n 
0000497151 00000 n 
444 2 
0000498184 00000 n 
0000498375 00000 n 
447 2 
0000501192 00000 n 
0000501383 00000 n 
450 2 
0000504487 00000 n 
0000504678 00000 n 
453 2 
0000506105 00000 n 
0000506296 00000 n 
456 2 
0000507214 00000 n 
0000507405 00000 n 
459 2 
0000510825 00000 n 
0000511016 00000 n 
462 2 
0000514437 00000 n 
0000514628 00000 n 
465 2 
0000516054 00000 n 
0000516245 00000 n 
468 2 
0000517384 00000 n 
0000517575 00000 n 
471 2 
0000518474 00000 n 
0000518665 00000 n 
474 2 
0000521009 00000 n 
0000521200 00000 n 
477 2 
0000525344 00000 n 
0000525535 00000 n 
480 2 
0000528753 00000 n 
0000528944 00000 n 
483 2 
0000530653 00000 n 
0000530844 00000 n 
486 2 
0000531969 00000 n 
0000532160 00000 n 
489 2 
0000533263 00000 n 
0000533454 00000 n 
492 2 
0000536444 00000 n 
0000536635 00000 n 
495 2 
0000537791 00000 n 
0000537982 00000 n 
498 2 
0000540821 00000 n 
0000541012 00000 n 
501 2 
0000541585 00000 n 
0000541776 00000 n 
504 2 
0000544699 00000 n 
0000544890 00000 n 
507 2 
0000547667 00000 n 
0000547858 00000 n 
510 2 
0000548628 00000 n 
0000548819 00000 n 
513 2 
0000552289 00000 n 
0000552480 00000 n 
516 2 
0000556077 00000 n 
0000556268 00000 n 
519 2 
0000560024 00000 n 
0000560215 00000 n 
522 2 
0000563838 00000 n 
0000564029 00000 n 
525 2 
0000567695 00000 n 
0000567886 00000 n 
528 2 
0000568854 00000 n 
0000569045 00000 n 
trailer
<</ID [<36623264303833366632373365623836> <62333930613937396464333366633734> ] /Size 531 /Root 1 0 R >>
startxref
571863
%%EOF
